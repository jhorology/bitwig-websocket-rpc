{
  "reportedOn": "Aug 12, 2018 10:01:00 PM",
  "host": {
    "apiVersion": 7,
    "product": "Bitwig Studio",
    "vendor": "Bitwig",
    "version": "2.4 Beta 2",
    "platformType": "MAC"
  },
  "extension": {
    "name": "WebSocket RPC",
    "author": "Masafumi",
    "version": "0.1-SNAPSHOT",
    "id": "68aa62d8-5a50-48d4-b9e4-9d684307f7ce",
    "requiredApiVersion": 7,
    "hardwareVendor": "WebSocket RPC",
    "hardwareModel": "WebSocket RPC",
    "usingBetaAPI": true,
    "shouldFailOnDeprecatedUse": true
  },
  "system": {
    "java.vendor": "Oracle Corporation",
    "sun.java.launcher": "SUN_STANDARD",
    "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers",
    "os.name": "Mac OS X",
    "accessoriesDir": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/MacOS",
    "sun.boot.class.path": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/resources.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/rt.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/sunrsasign.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/jsse.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/jce.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/charsets.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/jfr.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/classes",
    "LibraryDirectory": "/Users/masafumi/Library",
    "java.vm.specification.vendor": "Oracle Corporation",
    "java.runtime.version": "1.8.0_161-b12",
    "controlScripts": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Resources/ControlSurfaceScripts",
    "user.name": "masafumi",
    "executableDir": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/MacOS",
    "user.language": "en",
    "sun.boot.library.path": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib",
    "java.version": "1.8.0_161",
    "user.timezone": "Asia/Tokyo",
    "factoryLibrary": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Resources/Library",
    "sun.arch.data.model": "64",
    "vampPath": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns",
    "http.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
    "java.endorsed.dirs": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/endorsed",
    "sun.cpu.isalist": "",
    "sun.jnu.encoding": "UTF-8",
    "file.encoding.pkg": "sun.io",
    "file.separator": "/",
    "java.specification.name": "Java Platform API Specification",
    "nitro.include": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Resources/nitro/std",
    "java.class.version": "52.0",
    "user.country": "JP",
    "java.home": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home",
    "java.vm.info": "mixed mode",
    "os.version": "10.13.6",
    "sun.font.fontmanager": "sun.font.CFontManager",
    "path.separator": ":",
    "javax.accessibility.assistive_technologies": "",
    "java.vm.version": "25.161-b12",
    "sun.awt.enableExtraMouseButtons": "true",
    "java.awt.printerjob": "sun.lwawt.macosx.CPrinterJob",
    "sun.io.unicode.encoding": "UnicodeBig",
    "awt.toolkit": "sun.lwawt.macosx.LWCToolkit",
    "socksNonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
    "ftp.nonProxyHosts": "local|*.local|169.254/16|*.169.254/16",
    "vampExecutable": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/MacOS/BitwigVampHost",
    "applicationServiceUrl": "http://www.bitwig.com/services/application",
    "user.home": "/Users/masafumi",
    "CachesDirectory": "/Users/masafumi/Library/Caches/Bitwig",
    "java.specification.vendor": "Oracle Corporation",
    "java.library.path": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Frameworks",
    "java.vendor.url": "http://java.oracle.com/",
    "java.vm.vendor": "Oracle Corporation",
    "gopherProxySet": "false",
    "java.runtime.name": "Java(TM) SE Runtime Environment",
    "sun.java.command": "com.bitwig.flt.app.BitwigStudioMain",
    "java.class.path": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Java/libs.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Java/bitwig.jar:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Java/lwjgl.jar",
    "ApplicationSupportDirectory": "/Users/masafumi/Library/Application Support/Bitwig/Bitwig Studio",
    "java.vm.specification.name": "Java Virtual Machine Specification",
    "java.vm.specification.version": "1.8",
    "sun.cpu.endian": "little",
    "DocumentsDirectory": "/Users/masafumi/Documents/Bitwig Studio",
    "sun.os.patch.level": "unknown",
    "java.io.tmpdir": "/var/folders/ph/bsmd4zy175xdh0xlflczpncw0000gn/T/",
    "java.vendor.url.bug": "http://bugreport.sun.com/bugreport/",
    "resourceLocation": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/Resources",
    "engineExecutable": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/MacOS/Bitwig Audio Engine.app/Contents/MacOS/BitwigStudioEngine",
    "os.arch": "x86_64",
    "java.awt.graphicsenv": "sun.awt.CGraphicsEnvironment",
    "java.ext.dirs": "/Users/masafumi/Library/Java/Extensions:/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/PlugIns/JavaVM.plugin/Contents/Home/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java",
    "commandPipe": "/Users/masafumi/Library/Application Support/Bitwig/Bitwig Studio/launcher-pipe",
    "user.dir": "/Users/masafumi",
    "line.separator": "\n",
    "java.vm.name": "Java HotSpot(TM) 64-Bit Server VM",
    "file.encoding": "UTF-8",
    "java.specification.version": "1.8",
    "bundleDir": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app"
  },
  "env": {
    "PATH": "/Users/masafumi/.jabba/jdk/1.10.0/Contents/Home/bin:/Users/masafumi/.nvm/versions/node/v10.8.0/bin:/Users/masafumi/.local/bin:/Users/masafumi/.local/perl5/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet:/opt/X11/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands:/Applications/Wireshark.app/Contents/MacOS:/Applications/Xamarin Workbooks.app/Contents/SharedSupport/path-bin",
    "ALTERNATE_EDITOR": "/Applications/Emacs.app/Contents/MacOS/Emacs",
    "PERL_MM_OPT": "INSTALL_BASE=/Users/masafumi/.local/perl5",
    "JAVA_HOME": "/Users/masafumi/.jabba/jdk/1.10.0/Contents/Home",
    "TERM": "xterm-256color",
    "LANG": "ja_JP.UTF-8",
    "JAVA_MAIN_CLASS_75762": "com.bitwig.flt.app.BitwigStudioMain",
    "DISPLAY": "/private/tmp/com.apple.launchd.Dq4BiiVX2U/org.macosforge.xquartz:0",
    "PERL_MB_OPT": "--install_base \"/Users/masafumi/.local/perl5\"",
    "LOGNAME": "masafumi",
    "XPC_SERVICE_NAME": "0",
    "PWD": "/Users/masafumi/Documents/GitHub/bitwig-websocket-rpc",
    "TERM_PROGRAM_VERSION": "404",
    "PERL5LIB": "/Users/masafumi/.local/perl5/lib/perl5",
    "_": "/Users/masafumi/Applications/Bitwig Studio Beta/Bitwig Studio.app/Contents/MacOS/BitwigStudio",
    "JABBA_HOME": "/Users/masafumi/.jabba",
    "COMMAND_LINE_INSTALL": "true",
    "NVM_CD_FLAGS": "",
    "NVM_DIR": "/Users/masafumi/.nvm",
    "SHELL": "/bin/bash",
    "TERM_PROGRAM": "Apple_Terminal",
    "LSCOLORS": "GxFxCxDxBxegedabagaced",
    "VISUAL": "/usr/local/bin/emacsclient",
    "USER": "masafumi",
    "CLICOLOR": "1",
    "TMPDIR": "/var/folders/ph/bsmd4zy175xdh0xlflczpncw0000gn/T/",
    "SSH_AUTH_SOCK": "/private/tmp/com.apple.launchd.zcDM2wOAsH/Listeners",
    "EDITOR": "/usr/local/bin/emacsclient",
    "XPC_FLAGS": "0x0",
    "TERM_SESSION_ID": "00DF796A-3D1C-4851-94D7-569A0BB28E2B",
    "__CF_USER_TEXT_ENCODING": "0x1F5:0x0:0x0",
    "COPYFILE_DISABLE": "1",
    "Apple_PubSub_Socket_Render": "/private/tmp/com.apple.launchd.joyygTZMZf/Render",
    "BITWIG_DEBUG_PORT": "8989",
    "LC_CTYPE": "UTF-8",
    "JAVA_HOME_BEFORE_JABBA": "/Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home",
    "NVM_BIN": "/Users/masafumi/.nvm/versions/node/v10.8.0/bin",
    "PERL_LOCAL_LIB_ROOT": "/Users/masafumi/.local/perl5",
    "SHLVL": "2",
    "HOME": "/Users/masafumi"
  },
  "methods": [{
    "method": "rpc.log",
    "params": [],
    "result": "Object",
    "expression": "Object rpc.log()"
  }, {
    "method": "rpc.log.get",
    "params": [],
    "result": "String",
    "expression": "String rpc.log().get()"
  }, {
    "method": "rpc.log.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String rpc.log().getLimited(Number)"
  }, {
    "method": "rpc.log.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void rpc.log().addValueObserver(Object)"
  }, {
    "method": "rpc.log.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void rpc.log().setIsSubscribed(boolean)"
  }, {
    "method": "rpc.log.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean rpc.log().isSubscribed()"
  }, {
    "method": "rpc.log.subscribe",
    "params": [],
    "result": "void",
    "expression": "void rpc.log().subscribe()"
  }, {
    "method": "rpc.log.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void rpc.log().unsubscribe()"
  }, {
    "method": "rpc.echo",
    "params": ["String"],
    "result": "String",
    "expression": "String rpc.echo(String)"
  }, {
    "method": "rpc.on",
    "params": ["String[]"],
    "result": "Object",
    "expression": "Object rpc.on(String[])"
  }, {
    "method": "rpc.off",
    "params": ["String[]"],
    "result": "Object",
    "expression": "Object rpc.off(String[])"
  }, {
    "method": "rpc.report",
    "params": [],
    "result": "Object",
    "expression": "Object rpc.report()"
  }, {
    "method": "rpc.broadcast",
    "params": ["String", "Object"],
    "result": "void",
    "expression": "void rpc.broadcast(String, Object)"
  }, {
    "method": "test.concat",
    "params": ["Object"],
    "result": "String",
    "expression": "String test.concat(Object)"
  }, {
    "method": "test.concat",
    "params": ["String[]"],
    "result": "String",
    "expression": "String test.concat(String[])"
  }, {
    "method": "test.concat",
    "params": ["String", "String"],
    "result": "String",
    "expression": "String test.concat(String, String)"
  }, {
    "method": "test.sum",
    "params": ["Number", "Number"],
    "result": "Number",
    "expression": "Number test.sum(Number, Number)"
  }, {
    "method": "test.sum",
    "params": ["Number[]"],
    "result": "Number",
    "expression": "Number test.sum(Number[])"
  }, {
    "method": "test.sum",
    "params": ["Object"],
    "result": "Number",
    "expression": "Number test.sum(Object)"
  }, {
    "method": "test.sum",
    "params": ["Number", "Number", "Number"],
    "result": "Number",
    "expression": "Number test.sum(Number, Number, Number)"
  }, {
    "method": "test.nop",
    "params": [],
    "result": "void",
    "expression": "void test.nop()"
  }, {
    "method": "test.echo",
    "params": ["String"],
    "result": "String",
    "expression": "String test.echo(String)"
  }, {
    "method": "test.hello",
    "params": [],
    "result": "String",
    "expression": "String test.hello()"
  }, {
    "method": "test.consume",
    "params": ["Number"],
    "result": "void",
    "expression": "void test.consume(Number)"
  }, {
    "method": "test.consume",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void test.consume(Number, Number)"
  }, {
    "method": "test.consume",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void test.consume(Number, Number, Number)"
  }, {
    "method": "test.consume",
    "params": ["Number[]"],
    "result": "void",
    "expression": "void test.consume(Number[])"
  }, {
    "method": "test.repeat",
    "params": ["Object"],
    "result": "String",
    "expression": "String test.repeat(Object)"
  }, {
    "method": "test.repeat",
    "params": ["String", "Number"],
    "result": "String",
    "expression": "String test.repeat(String, Number)"
  }, {
    "method": "application.remove",
    "params": [],
    "result": "void",
    "expression": "void application.remove()"
  }, {
    "method": "application.getActions",
    "params": [],
    "result": "Object[]",
    "expression": "Object[] application.getActions()"
  }, {
    "method": "application.copy",
    "params": [],
    "result": "void",
    "expression": "void application.copy()"
  }, {
    "method": "application.rename",
    "params": [],
    "result": "void",
    "expression": "void application.rename()"
  }, {
    "method": "application.duplicate",
    "params": [],
    "result": "void",
    "expression": "void application.duplicate()"
  }, {
    "method": "application.escape",
    "params": [],
    "result": "void",
    "expression": "void application.escape()"
  }, {
    "method": "application.zoomOut",
    "params": [],
    "result": "void",
    "expression": "void application.zoomOut()"
  }, {
    "method": "application.activateEngine",
    "params": [],
    "result": "void",
    "expression": "void application.activateEngine()"
  }, {
    "method": "application.arrowKeyDown",
    "params": [],
    "result": "void",
    "expression": "void application.arrowKeyDown()"
  }, {
    "method": "application.arrowKeyLeft",
    "params": [],
    "result": "void",
    "expression": "void application.arrowKeyLeft()"
  }, {
    "method": "application.arrowKeyRight",
    "params": [],
    "result": "void",
    "expression": "void application.arrowKeyRight()"
  }, {
    "method": "application.arrowKeyUp",
    "params": [],
    "result": "void",
    "expression": "void application.arrowKeyUp()"
  }, {
    "method": "application.createAudioTrack",
    "params": ["Number"],
    "result": "void",
    "expression": "void application.createAudioTrack(Number)"
  }, {
    "method": "application.createEffectTrack",
    "params": ["Number"],
    "result": "void",
    "expression": "void application.createEffectTrack(Number)"
  }, {
    "method": "application.createInstrumentTrack",
    "params": ["Number"],
    "result": "void",
    "expression": "void application.createInstrumentTrack(Number)"
  }, {
    "method": "application.deactivateEngine",
    "params": [],
    "result": "void",
    "expression": "void application.deactivateEngine()"
  }, {
    "method": "application.focusPanelAbove",
    "params": [],
    "result": "void",
    "expression": "void application.focusPanelAbove()"
  }, {
    "method": "application.focusPanelBelow",
    "params": [],
    "result": "void",
    "expression": "void application.focusPanelBelow()"
  }, {
    "method": "application.focusPanelToLeft",
    "params": [],
    "result": "void",
    "expression": "void application.focusPanelToLeft()"
  }, {
    "method": "application.focusPanelToRight",
    "params": [],
    "result": "void",
    "expression": "void application.focusPanelToRight()"
  }, {
    "method": "application.getActionCategories",
    "params": [],
    "result": "Object[]",
    "expression": "Object[] application.getActionCategories()"
  }, {
    "method": "application.getActionCategory",
    "params": ["String"],
    "result": "Object",
    "expression": "Object application.getActionCategory(String)"
  }, {
    "method": "application.getActionCategory.getName",
    "params": ["String"],
    "result": "String",
    "expression": "String application.getActionCategory(String).getName()"
  }, {
    "method": "application.getActionCategory.getActions",
    "params": ["String"],
    "result": "Object[]",
    "expression": "Object[] application.getActionCategory(String).getActions()"
  }, {
    "method": "application.getActionCategory.getId",
    "params": ["String"],
    "result": "String",
    "expression": "String application.getActionCategory(String).getId()"
  }, {
    "method": "application.previousPanelLayout",
    "params": [],
    "result": "void",
    "expression": "void application.previousPanelLayout()"
  }, {
    "method": "application.previousProject",
    "params": [],
    "result": "void",
    "expression": "void application.previousProject()"
  }, {
    "method": "application.previousSubPanel",
    "params": [],
    "result": "void",
    "expression": "void application.previousSubPanel()"
  }, {
    "method": "application.selectAll",
    "params": [],
    "result": "void",
    "expression": "void application.selectAll()"
  }, {
    "method": "application.zoomIn",
    "params": [],
    "result": "void",
    "expression": "void application.zoomIn()"
  }, {
    "method": "application.selectNone",
    "params": [],
    "result": "void",
    "expression": "void application.selectNone()"
  }, {
    "method": "application.setPanelLayout",
    "params": ["String"],
    "result": "void",
    "expression": "void application.setPanelLayout(String)"
  }, {
    "method": "application.zoomToFit",
    "params": [],
    "result": "void",
    "expression": "void application.zoomToFit()"
  }, {
    "method": "application.zoomToSelection",
    "params": [],
    "result": "void",
    "expression": "void application.zoomToSelection()"
  }, {
    "method": "application.redo",
    "params": [],
    "result": "void",
    "expression": "void application.redo()"
  }, {
    "method": "application.getAction",
    "params": ["String"],
    "result": "Object",
    "expression": "Object application.getAction(String)"
  }, {
    "method": "application.getAction.invoke",
    "params": ["String"],
    "result": "void",
    "expression": "void application.getAction(String).invoke()"
  }, {
    "method": "application.getAction.getName",
    "params": ["String"],
    "result": "String",
    "expression": "String application.getAction(String).getName()"
  }, {
    "method": "application.getAction.getId",
    "params": ["String"],
    "result": "String",
    "expression": "String application.getAction(String).getId()"
  }, {
    "method": "application.getAction.getMenuItemText",
    "params": ["String"],
    "result": "String",
    "expression": "String application.getAction(String).getMenuItemText()"
  }, {
    "method": "application.getAction.getCategory",
    "params": ["String"],
    "result": "Object",
    "expression": "Object application.getAction(String).getCategory()"
  }, {
    "method": "application.getAction.getCategory.getName",
    "params": ["String"],
    "result": "String",
    "expression": "String application.getAction(String).getCategory().getName()"
  }, {
    "method": "application.getAction.getCategory.getActions",
    "params": ["String"],
    "result": "Object[]",
    "expression": "Object[] application.getAction(String).getCategory().getActions()"
  }, {
    "method": "application.getAction.getCategory.getId",
    "params": ["String"],
    "result": "String",
    "expression": "String application.getAction(String).getCategory().getId()"
  }, {
    "method": "application.displayProfile",
    "params": [],
    "result": "Object",
    "expression": "Object application.displayProfile()"
  }, {
    "method": "application.displayProfile.get",
    "params": [],
    "result": "String",
    "expression": "String application.displayProfile().get()"
  }, {
    "method": "application.displayProfile.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String application.displayProfile().getLimited(Number)"
  }, {
    "method": "application.displayProfile.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void application.displayProfile().addValueObserver(Object)"
  }, {
    "method": "application.displayProfile.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void application.displayProfile().setIsSubscribed(boolean)"
  }, {
    "method": "application.displayProfile.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean application.displayProfile().isSubscribed()"
  }, {
    "method": "application.displayProfile.subscribe",
    "params": [],
    "result": "void",
    "expression": "void application.displayProfile().subscribe()"
  }, {
    "method": "application.displayProfile.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void application.displayProfile().unsubscribe()"
  }, {
    "method": "application.hasActiveEngine",
    "params": [],
    "result": "Object",
    "expression": "Object application.hasActiveEngine()"
  }, {
    "method": "application.hasActiveEngine.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean application.hasActiveEngine().get()"
  }, {
    "method": "application.hasActiveEngine.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void application.hasActiveEngine().addValueObserver(Object)"
  }, {
    "method": "application.hasActiveEngine.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void application.hasActiveEngine().setIsSubscribed(boolean)"
  }, {
    "method": "application.hasActiveEngine.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean application.hasActiveEngine().isSubscribed()"
  }, {
    "method": "application.hasActiveEngine.subscribe",
    "params": [],
    "result": "void",
    "expression": "void application.hasActiveEngine().subscribe()"
  }, {
    "method": "application.hasActiveEngine.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void application.hasActiveEngine().unsubscribe()"
  }, {
    "method": "application.panelLayout",
    "params": [],
    "result": "Object",
    "expression": "Object application.panelLayout()"
  }, {
    "method": "application.panelLayout.get",
    "params": [],
    "result": "String",
    "expression": "String application.panelLayout().get()"
  }, {
    "method": "application.panelLayout.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String application.panelLayout().getLimited(Number)"
  }, {
    "method": "application.panelLayout.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void application.panelLayout().addValueObserver(Object)"
  }, {
    "method": "application.panelLayout.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void application.panelLayout().setIsSubscribed(boolean)"
  }, {
    "method": "application.panelLayout.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean application.panelLayout().isSubscribed()"
  }, {
    "method": "application.panelLayout.subscribe",
    "params": [],
    "result": "void",
    "expression": "void application.panelLayout().subscribe()"
  }, {
    "method": "application.panelLayout.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void application.panelLayout().unsubscribe()"
  }, {
    "method": "application.projectName",
    "params": [],
    "result": "Object",
    "expression": "Object application.projectName()"
  }, {
    "method": "application.projectName.get",
    "params": [],
    "result": "String",
    "expression": "String application.projectName().get()"
  }, {
    "method": "application.projectName.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String application.projectName().getLimited(Number)"
  }, {
    "method": "application.projectName.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void application.projectName().addValueObserver(Object)"
  }, {
    "method": "application.projectName.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void application.projectName().setIsSubscribed(boolean)"
  }, {
    "method": "application.projectName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean application.projectName().isSubscribed()"
  }, {
    "method": "application.projectName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void application.projectName().subscribe()"
  }, {
    "method": "application.projectName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void application.projectName().unsubscribe()"
  }, {
    "method": "application.cut",
    "params": [],
    "result": "void",
    "expression": "void application.cut()"
  }, {
    "method": "application.paste",
    "params": [],
    "result": "void",
    "expression": "void application.paste()"
  }, {
    "method": "application.undo",
    "params": [],
    "result": "void",
    "expression": "void application.undo()"
  }, {
    "method": "application.enter",
    "params": [],
    "result": "void",
    "expression": "void application.enter()"
  }, {
    "method": "application.navigateToParentTrackGroup",
    "params": [],
    "result": "void",
    "expression": "void application.navigateToParentTrackGroup()"
  }, {
    "method": "application.nextSubPanel",
    "params": [],
    "result": "void",
    "expression": "void application.nextSubPanel()"
  }, {
    "method": "application.nextPanelLayout",
    "params": [],
    "result": "void",
    "expression": "void application.nextPanelLayout()"
  }, {
    "method": "application.nextProject",
    "params": [],
    "result": "void",
    "expression": "void application.nextProject()"
  }, {
    "method": "application.toggleAutomationEditor",
    "params": [],
    "result": "void",
    "expression": "void application.toggleAutomationEditor()"
  }, {
    "method": "application.toggleBrowserVisibility",
    "params": [],
    "result": "void",
    "expression": "void application.toggleBrowserVisibility()"
  }, {
    "method": "application.toggleDevices",
    "params": [],
    "result": "void",
    "expression": "void application.toggleDevices()"
  }, {
    "method": "application.toggleInspector",
    "params": [],
    "result": "void",
    "expression": "void application.toggleInspector()"
  }, {
    "method": "application.toggleMixer",
    "params": [],
    "result": "void",
    "expression": "void application.toggleMixer()"
  }, {
    "method": "application.toggleNoteEditor",
    "params": [],
    "result": "void",
    "expression": "void application.toggleNoteEditor()"
  }, {
    "method": "application.toggleFullScreen",
    "params": [],
    "result": "void",
    "expression": "void application.toggleFullScreen()"
  }, {
    "method": "transport.stop",
    "params": [],
    "result": "void",
    "expression": "void transport.stop()"
  }, {
    "method": "transport.rewind",
    "params": [],
    "result": "void",
    "expression": "void transport.rewind()"
  }, {
    "method": "transport.returnToArrangement",
    "params": [],
    "result": "void",
    "expression": "void transport.returnToArrangement()"
  }, {
    "method": "transport.resetAutomationOverrides",
    "params": [],
    "result": "void",
    "expression": "void transport.resetAutomationOverrides()"
  }, {
    "method": "transport.setPosition",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.setPosition(Number)"
  }, {
    "method": "transport.toggleLatchAutomationWriteMode",
    "params": [],
    "result": "void",
    "expression": "void transport.toggleLatchAutomationWriteMode()"
  }, {
    "method": "transport.toggleWriteArrangerAutomation",
    "params": [],
    "result": "void",
    "expression": "void transport.toggleWriteArrangerAutomation()"
  }, {
    "method": "transport.toggleWriteClipLauncherAutomation",
    "params": [],
    "result": "void",
    "expression": "void transport.toggleWriteClipLauncherAutomation()"
  }, {
    "method": "transport.automationWriteMode",
    "params": [],
    "result": "Object",
    "expression": "Object transport.automationWriteMode()"
  }, {
    "method": "transport.automationWriteMode.set",
    "params": ["String"],
    "result": "void",
    "expression": "void transport.automationWriteMode().set(String)"
  }, {
    "method": "transport.automationWriteMode.get",
    "params": [],
    "result": "String",
    "expression": "String transport.automationWriteMode().get()"
  }, {
    "method": "transport.automationWriteMode.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.automationWriteMode().addValueObserver(Object)"
  }, {
    "method": "transport.automationWriteMode.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.automationWriteMode().setIsSubscribed(boolean)"
  }, {
    "method": "transport.automationWriteMode.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.automationWriteMode().isSubscribed()"
  }, {
    "method": "transport.automationWriteMode.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.automationWriteMode().subscribe()"
  }, {
    "method": "transport.automationWriteMode.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.automationWriteMode().unsubscribe()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction",
    "params": [],
    "result": "Object",
    "expression": "Object transport.clipLauncherPostRecordingAction()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.set",
    "params": ["String"],
    "result": "void",
    "expression": "void transport.clipLauncherPostRecordingAction().set(String)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.get",
    "params": [],
    "result": "String",
    "expression": "String transport.clipLauncherPostRecordingAction().get()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.clipLauncherPostRecordingAction().addValueObserver(Object)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.clipLauncherPostRecordingAction().setIsSubscribed(boolean)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.clipLauncherPostRecordingAction().isSubscribed()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.clipLauncherPostRecordingAction().subscribe()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.clipLauncherPostRecordingAction().unsubscribe()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset",
    "params": [],
    "result": "Object",
    "expression": "Object transport.getClipLauncherPostRecordingTimeOffset()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.getFormatted",
    "params": [],
    "result": "String",
    "expression": "String transport.getClipLauncherPostRecordingTimeOffset().getFormatted()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.getClipLauncherPostRecordingTimeOffset().get()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.getClipLauncherPostRecordingTimeOffset().addValueObserver(Object)"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.getClipLauncherPostRecordingTimeOffset().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.getClipLauncherPostRecordingTimeOffset().isSubscribed()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getClipLauncherPostRecordingTimeOffset().subscribe()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getClipLauncherPostRecordingTimeOffset().unsubscribe()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getClipLauncherPostRecordingTimeOffset().set(Number)"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getClipLauncherPostRecordingTimeOffset().inc(Number)"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isArrangerAutomationWriteEnabled()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerAutomationWriteEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerAutomationWriteEnabled().toggle()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerAutomationWriteEnabled().get()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isArrangerAutomationWriteEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerAutomationWriteEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerAutomationWriteEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerAutomationWriteEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerAutomationWriteEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerOverdubEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isArrangerOverdubEnabled()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerOverdubEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerOverdubEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerOverdubEnabled().toggle()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerOverdubEnabled().get()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isArrangerOverdubEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isArrangerOverdubEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerOverdubEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerOverdubEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerOverdubEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerOverdubEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerOverdubEnabled().unsubscribe()"
  }, {
    "method": "transport.isAutomationOverrideActive",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isAutomationOverrideActive()"
  }, {
    "method": "transport.isAutomationOverrideActive.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isAutomationOverrideActive().get()"
  }, {
    "method": "transport.isAutomationOverrideActive.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isAutomationOverrideActive().addValueObserver(Object)"
  }, {
    "method": "transport.isAutomationOverrideActive.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isAutomationOverrideActive().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isAutomationOverrideActive.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isAutomationOverrideActive().isSubscribed()"
  }, {
    "method": "transport.isAutomationOverrideActive.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isAutomationOverrideActive().subscribe()"
  }, {
    "method": "transport.isAutomationOverrideActive.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isAutomationOverrideActive().unsubscribe()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isMetronomeAudibleDuringPreRoll()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isMetronomeAudibleDuringPreRoll().set(boolean)"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeAudibleDuringPreRoll().toggle()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isMetronomeAudibleDuringPreRoll().get()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isMetronomeAudibleDuringPreRoll().addValueObserver(Object)"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isMetronomeAudibleDuringPreRoll().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isMetronomeAudibleDuringPreRoll().isSubscribed()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeAudibleDuringPreRoll().subscribe()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeAudibleDuringPreRoll().unsubscribe()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isMetronomeTickPlaybackEnabled()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isMetronomeTickPlaybackEnabled().set(boolean)"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeTickPlaybackEnabled().toggle()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isMetronomeTickPlaybackEnabled().get()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isMetronomeTickPlaybackEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isMetronomeTickPlaybackEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isMetronomeTickPlaybackEnabled().isSubscribed()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeTickPlaybackEnabled().subscribe()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeTickPlaybackEnabled().unsubscribe()"
  }, {
    "method": "transport.isPunchInEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isPunchInEnabled()"
  }, {
    "method": "transport.isPunchInEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isPunchInEnabled().set(boolean)"
  }, {
    "method": "transport.isPunchInEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isPunchInEnabled().toggle()"
  }, {
    "method": "transport.isPunchInEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isPunchInEnabled().get()"
  }, {
    "method": "transport.isPunchInEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isPunchInEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isPunchInEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isPunchInEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isPunchInEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isPunchInEnabled().isSubscribed()"
  }, {
    "method": "transport.isPunchInEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isPunchInEnabled().subscribe()"
  }, {
    "method": "transport.isPunchInEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isPunchInEnabled().unsubscribe()"
  }, {
    "method": "transport.isPunchOutEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isPunchOutEnabled()"
  }, {
    "method": "transport.isPunchOutEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isPunchOutEnabled().set(boolean)"
  }, {
    "method": "transport.isPunchOutEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isPunchOutEnabled().toggle()"
  }, {
    "method": "transport.isPunchOutEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isPunchOutEnabled().get()"
  }, {
    "method": "transport.isPunchOutEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isPunchOutEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isPunchOutEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isPunchOutEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isPunchOutEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isPunchOutEnabled().isSubscribed()"
  }, {
    "method": "transport.isPunchOutEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isPunchOutEnabled().subscribe()"
  }, {
    "method": "transport.isPunchOutEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isPunchOutEnabled().unsubscribe()"
  }, {
    "method": "transport.metronomeVolume",
    "params": [],
    "result": "Object",
    "expression": "Object transport.metronomeVolume()"
  }, {
    "method": "transport.metronomeVolume.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.metronomeVolume().set(Number, Number)"
  }, {
    "method": "transport.metronomeVolume.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.metronomeVolume().set(Number)"
  }, {
    "method": "transport.metronomeVolume.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.metronomeVolume().inc(Number, Number)"
  }, {
    "method": "transport.metronomeVolume.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.metronomeVolume().inc(Number)"
  }, {
    "method": "transport.metronomeVolume.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.metronomeVolume().incRaw(Number)"
  }, {
    "method": "transport.metronomeVolume.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.metronomeVolume().setImmediately(Number)"
  }, {
    "method": "transport.metronomeVolume.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.metronomeVolume().setRaw(Number)"
  }, {
    "method": "transport.metronomeVolume.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.metronomeVolume().get()"
  }, {
    "method": "transport.metronomeVolume.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.metronomeVolume().addRawValueObserver(Object)"
  }, {
    "method": "transport.metronomeVolume.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number transport.metronomeVolume().getRaw()"
  }, {
    "method": "transport.metronomeVolume.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void transport.metronomeVolume().addValueObserver(Number, Object)"
  }, {
    "method": "transport.metronomeVolume.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.metronomeVolume().displayedValue()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String transport.metronomeVolume().displayedValue().get()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.metronomeVolume().displayedValue().getLimited(Number)"
  }, {
    "method": "transport.metronomeVolume.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.metronomeVolume().displayedValue().addValueObserver(Object)"
  }, {
    "method": "transport.metronomeVolume.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.metronomeVolume().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.metronomeVolume.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.metronomeVolume().displayedValue().isSubscribed()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.metronomeVolume().displayedValue().subscribe()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.metronomeVolume().displayedValue().unsubscribe()"
  }, {
    "method": "transport.metronomeVolume.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.metronomeVolume().addValueObserver(Object)"
  }, {
    "method": "transport.metronomeVolume.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.metronomeVolume().setIsSubscribed(boolean)"
  }, {
    "method": "transport.metronomeVolume.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.metronomeVolume().isSubscribed()"
  }, {
    "method": "transport.metronomeVolume.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.metronomeVolume().subscribe()"
  }, {
    "method": "transport.metronomeVolume.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.metronomeVolume().unsubscribe()"
  }, {
    "method": "transport.preRoll",
    "params": [],
    "result": "Object",
    "expression": "Object transport.preRoll()"
  }, {
    "method": "transport.preRoll.set",
    "params": ["String"],
    "result": "void",
    "expression": "void transport.preRoll().set(String)"
  }, {
    "method": "transport.preRoll.get",
    "params": [],
    "result": "String",
    "expression": "String transport.preRoll().get()"
  }, {
    "method": "transport.preRoll.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.preRoll().addValueObserver(Object)"
  }, {
    "method": "transport.preRoll.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.preRoll().setIsSubscribed(boolean)"
  }, {
    "method": "transport.preRoll.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.preRoll().isSubscribed()"
  }, {
    "method": "transport.preRoll.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.preRoll().subscribe()"
  }, {
    "method": "transport.preRoll.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.preRoll().unsubscribe()"
  }, {
    "method": "transport.timeSignature.get",
    "params": [],
    "result": "String",
    "expression": "String transport.timeSignature().get()"
  }, {
    "method": "transport.timeSignature.set",
    "params": ["String"],
    "result": "void",
    "expression": "void transport.timeSignature().set(String)"
  }, {
    "method": "transport.timeSignature.denominator",
    "params": [],
    "result": "Object",
    "expression": "Object transport.timeSignature().denominator()"
  }, {
    "method": "transport.timeSignature.denominator.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.timeSignature().denominator().set(Number)"
  }, {
    "method": "transport.timeSignature.denominator.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.timeSignature().denominator().inc(Number)"
  }, {
    "method": "transport.timeSignature.denominator.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.timeSignature().denominator().get()"
  }, {
    "method": "transport.timeSignature.denominator.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void transport.timeSignature().denominator().addValueObserver(Object, Number)"
  }, {
    "method": "transport.timeSignature.denominator.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.timeSignature().denominator().addValueObserver(Object)"
  }, {
    "method": "transport.timeSignature.denominator.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.timeSignature().denominator().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.denominator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.timeSignature().denominator().isSubscribed()"
  }, {
    "method": "transport.timeSignature.denominator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().denominator().subscribe()"
  }, {
    "method": "transport.timeSignature.denominator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().denominator().unsubscribe()"
  }, {
    "method": "transport.timeSignature.numerator",
    "params": [],
    "result": "Object",
    "expression": "Object transport.timeSignature().numerator()"
  }, {
    "method": "transport.timeSignature.numerator.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.timeSignature().numerator().set(Number)"
  }, {
    "method": "transport.timeSignature.numerator.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.timeSignature().numerator().inc(Number)"
  }, {
    "method": "transport.timeSignature.numerator.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.timeSignature().numerator().get()"
  }, {
    "method": "transport.timeSignature.numerator.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void transport.timeSignature().numerator().addValueObserver(Object, Number)"
  }, {
    "method": "transport.timeSignature.numerator.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.timeSignature().numerator().addValueObserver(Object)"
  }, {
    "method": "transport.timeSignature.numerator.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.timeSignature().numerator().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.numerator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.timeSignature().numerator().isSubscribed()"
  }, {
    "method": "transport.timeSignature.numerator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().numerator().subscribe()"
  }, {
    "method": "transport.timeSignature.numerator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().numerator().unsubscribe()"
  }, {
    "method": "transport.timeSignature.ticks",
    "params": [],
    "result": "Object",
    "expression": "Object transport.timeSignature().ticks()"
  }, {
    "method": "transport.timeSignature.ticks.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.timeSignature().ticks().set(Number)"
  }, {
    "method": "transport.timeSignature.ticks.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.timeSignature().ticks().inc(Number)"
  }, {
    "method": "transport.timeSignature.ticks.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.timeSignature().ticks().get()"
  }, {
    "method": "transport.timeSignature.ticks.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void transport.timeSignature().ticks().addValueObserver(Object, Number)"
  }, {
    "method": "transport.timeSignature.ticks.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.timeSignature().ticks().addValueObserver(Object)"
  }, {
    "method": "transport.timeSignature.ticks.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.timeSignature().ticks().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.ticks.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.timeSignature().ticks().isSubscribed()"
  }, {
    "method": "transport.timeSignature.ticks.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().ticks().subscribe()"
  }, {
    "method": "transport.timeSignature.ticks.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().ticks().unsubscribe()"
  }, {
    "method": "transport.timeSignature.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.timeSignature().addValueObserver(Object)"
  }, {
    "method": "transport.timeSignature.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.timeSignature().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.timeSignature().isSubscribed()"
  }, {
    "method": "transport.timeSignature.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().subscribe()"
  }, {
    "method": "transport.timeSignature.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.timeSignature().unsubscribe()"
  }, {
    "method": "transport.tempo",
    "params": [],
    "result": "Object",
    "expression": "Object transport.tempo()"
  }, {
    "method": "transport.tempo.name",
    "params": [],
    "result": "Object",
    "expression": "Object transport.tempo().name()"
  }, {
    "method": "transport.tempo.name.get",
    "params": [],
    "result": "String",
    "expression": "String transport.tempo().name().get()"
  }, {
    "method": "transport.tempo.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.tempo().name().getLimited(Number)"
  }, {
    "method": "transport.tempo.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().name().addValueObserver(Object)"
  }, {
    "method": "transport.tempo.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().name().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.tempo().name().isSubscribed()"
  }, {
    "method": "transport.tempo.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().name().subscribe()"
  }, {
    "method": "transport.tempo.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().name().unsubscribe()"
  }, {
    "method": "transport.tempo.value",
    "params": [],
    "result": "Object",
    "expression": "Object transport.tempo().value()"
  }, {
    "method": "transport.tempo.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.tempo().value().set(Number, Number)"
  }, {
    "method": "transport.tempo.value.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().value().set(Number)"
  }, {
    "method": "transport.tempo.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.tempo().value().inc(Number, Number)"
  }, {
    "method": "transport.tempo.value.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().value().inc(Number)"
  }, {
    "method": "transport.tempo.value.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().value().incRaw(Number)"
  }, {
    "method": "transport.tempo.value.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().value().setImmediately(Number)"
  }, {
    "method": "transport.tempo.value.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().value().setRaw(Number)"
  }, {
    "method": "transport.tempo.value.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.tempo().value().get()"
  }, {
    "method": "transport.tempo.value.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().value().addRawValueObserver(Object)"
  }, {
    "method": "transport.tempo.value.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number transport.tempo().value().getRaw()"
  }, {
    "method": "transport.tempo.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void transport.tempo().value().addValueObserver(Number, Object)"
  }, {
    "method": "transport.tempo.value.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.tempo().value().displayedValue()"
  }, {
    "method": "transport.tempo.value.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String transport.tempo().value().displayedValue().get()"
  }, {
    "method": "transport.tempo.value.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.tempo().value().displayedValue().getLimited(Number)"
  }, {
    "method": "transport.tempo.value.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "transport.tempo.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.tempo().value().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().value().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().value().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.value.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().value().addValueObserver(Object)"
  }, {
    "method": "transport.tempo.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().value().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.tempo().value().isSubscribed()"
  }, {
    "method": "transport.tempo.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().value().subscribe()"
  }, {
    "method": "transport.tempo.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().value().unsubscribe()"
  }, {
    "method": "transport.tempo.reset",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().reset()"
  }, {
    "method": "transport.tempo.modulatedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.tempo().modulatedValue()"
  }, {
    "method": "transport.tempo.modulatedValue.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.tempo().modulatedValue().get()"
  }, {
    "method": "transport.tempo.modulatedValue.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "transport.tempo.modulatedValue.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number transport.tempo().modulatedValue().getRaw()"
  }, {
    "method": "transport.tempo.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.tempo().modulatedValue().displayedValue()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String transport.tempo().modulatedValue().displayedValue().get()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.tempo().modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.tempo().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().addValueObserver(Object)"
  }, {
    "method": "transport.tempo.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.tempo().modulatedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().subscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().modulatedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().restoreAutomationControl()"
  }, {
    "method": "transport.tempo.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().touch(boolean)"
  }, {
    "method": "transport.tempo.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().setIndication(boolean)"
  }, {
    "method": "transport.tempo.setLabel",
    "params": ["String"],
    "result": "void",
    "expression": "void transport.tempo().setLabel(String)"
  }, {
    "method": "transport.tempo.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.tempo().isSubscribed()"
  }, {
    "method": "transport.tempo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().subscribe()"
  }, {
    "method": "transport.tempo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().unsubscribe()"
  }, {
    "method": "transport.tempo.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.tempo().set(Number, Number)"
  }, {
    "method": "transport.tempo.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().set(Number)"
  }, {
    "method": "transport.tempo.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.tempo().inc(Number, Number)"
  }, {
    "method": "transport.tempo.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().inc(Number)"
  }, {
    "method": "transport.tempo.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().incRaw(Number)"
  }, {
    "method": "transport.tempo.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().setImmediately(Number)"
  }, {
    "method": "transport.tempo.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.tempo().setRaw(Number)"
  }, {
    "method": "transport.tempo.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.tempo().get()"
  }, {
    "method": "transport.tempo.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().addRawValueObserver(Object)"
  }, {
    "method": "transport.tempo.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number transport.tempo().getRaw()"
  }, {
    "method": "transport.tempo.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void transport.tempo().addValueObserver(Number, Object)"
  }, {
    "method": "transport.tempo.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.tempo().displayedValue()"
  }, {
    "method": "transport.tempo.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String transport.tempo().displayedValue().get()"
  }, {
    "method": "transport.tempo.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.tempo().displayedValue().getLimited(Number)"
  }, {
    "method": "transport.tempo.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().displayedValue().addValueObserver(Object)"
  }, {
    "method": "transport.tempo.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.tempo().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.tempo().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.tempo().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.tempo().addValueObserver(Object)"
  }, {
    "method": "transport.crossfade",
    "params": [],
    "result": "Object",
    "expression": "Object transport.crossfade()"
  }, {
    "method": "transport.crossfade.name",
    "params": [],
    "result": "Object",
    "expression": "Object transport.crossfade().name()"
  }, {
    "method": "transport.crossfade.name.get",
    "params": [],
    "result": "String",
    "expression": "String transport.crossfade().name().get()"
  }, {
    "method": "transport.crossfade.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.crossfade().name().getLimited(Number)"
  }, {
    "method": "transport.crossfade.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().name().addValueObserver(Object)"
  }, {
    "method": "transport.crossfade.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().name().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.crossfade().name().isSubscribed()"
  }, {
    "method": "transport.crossfade.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().name().subscribe()"
  }, {
    "method": "transport.crossfade.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().name().unsubscribe()"
  }, {
    "method": "transport.crossfade.value",
    "params": [],
    "result": "Object",
    "expression": "Object transport.crossfade().value()"
  }, {
    "method": "transport.crossfade.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.crossfade().value().set(Number, Number)"
  }, {
    "method": "transport.crossfade.value.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().value().set(Number)"
  }, {
    "method": "transport.crossfade.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.crossfade().value().inc(Number, Number)"
  }, {
    "method": "transport.crossfade.value.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().value().inc(Number)"
  }, {
    "method": "transport.crossfade.value.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().value().incRaw(Number)"
  }, {
    "method": "transport.crossfade.value.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().value().setImmediately(Number)"
  }, {
    "method": "transport.crossfade.value.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().value().setRaw(Number)"
  }, {
    "method": "transport.crossfade.value.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.crossfade().value().get()"
  }, {
    "method": "transport.crossfade.value.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().value().addRawValueObserver(Object)"
  }, {
    "method": "transport.crossfade.value.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number transport.crossfade().value().getRaw()"
  }, {
    "method": "transport.crossfade.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void transport.crossfade().value().addValueObserver(Number, Object)"
  }, {
    "method": "transport.crossfade.value.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.crossfade().value().displayedValue()"
  }, {
    "method": "transport.crossfade.value.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String transport.crossfade().value().displayedValue().get()"
  }, {
    "method": "transport.crossfade.value.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.crossfade().value().displayedValue().getLimited(Number)"
  }, {
    "method": "transport.crossfade.value.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "transport.crossfade.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.crossfade().value().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().value().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().value().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.value.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().value().addValueObserver(Object)"
  }, {
    "method": "transport.crossfade.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().value().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.crossfade().value().isSubscribed()"
  }, {
    "method": "transport.crossfade.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().value().subscribe()"
  }, {
    "method": "transport.crossfade.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().value().unsubscribe()"
  }, {
    "method": "transport.crossfade.reset",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().reset()"
  }, {
    "method": "transport.crossfade.modulatedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.crossfade().modulatedValue()"
  }, {
    "method": "transport.crossfade.modulatedValue.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.crossfade().modulatedValue().get()"
  }, {
    "method": "transport.crossfade.modulatedValue.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "transport.crossfade.modulatedValue.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number transport.crossfade().modulatedValue().getRaw()"
  }, {
    "method": "transport.crossfade.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.crossfade().modulatedValue().displayedValue()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String transport.crossfade().modulatedValue().displayedValue().get()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.crossfade().modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.crossfade().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().addValueObserver(Object)"
  }, {
    "method": "transport.crossfade.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.crossfade().modulatedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().subscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().modulatedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().restoreAutomationControl()"
  }, {
    "method": "transport.crossfade.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().touch(boolean)"
  }, {
    "method": "transport.crossfade.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().setIndication(boolean)"
  }, {
    "method": "transport.crossfade.setLabel",
    "params": ["String"],
    "result": "void",
    "expression": "void transport.crossfade().setLabel(String)"
  }, {
    "method": "transport.crossfade.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.crossfade().isSubscribed()"
  }, {
    "method": "transport.crossfade.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().subscribe()"
  }, {
    "method": "transport.crossfade.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().unsubscribe()"
  }, {
    "method": "transport.crossfade.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.crossfade().set(Number, Number)"
  }, {
    "method": "transport.crossfade.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().set(Number)"
  }, {
    "method": "transport.crossfade.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.crossfade().inc(Number, Number)"
  }, {
    "method": "transport.crossfade.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().inc(Number)"
  }, {
    "method": "transport.crossfade.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().incRaw(Number)"
  }, {
    "method": "transport.crossfade.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().setImmediately(Number)"
  }, {
    "method": "transport.crossfade.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.crossfade().setRaw(Number)"
  }, {
    "method": "transport.crossfade.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.crossfade().get()"
  }, {
    "method": "transport.crossfade.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().addRawValueObserver(Object)"
  }, {
    "method": "transport.crossfade.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number transport.crossfade().getRaw()"
  }, {
    "method": "transport.crossfade.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void transport.crossfade().addValueObserver(Number, Object)"
  }, {
    "method": "transport.crossfade.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object transport.crossfade().displayedValue()"
  }, {
    "method": "transport.crossfade.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String transport.crossfade().displayedValue().get()"
  }, {
    "method": "transport.crossfade.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String transport.crossfade().displayedValue().getLimited(Number)"
  }, {
    "method": "transport.crossfade.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().displayedValue().addValueObserver(Object)"
  }, {
    "method": "transport.crossfade.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.crossfade().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.crossfade().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.crossfade().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.crossfade().addValueObserver(Object)"
  }, {
    "method": "transport.play",
    "params": [],
    "result": "void",
    "expression": "void transport.play()"
  }, {
    "method": "transport.record",
    "params": [],
    "result": "void",
    "expression": "void transport.record()"
  }, {
    "method": "transport.restart",
    "params": [],
    "result": "void",
    "expression": "void transport.restart()"
  }, {
    "method": "transport.isArrangerRecordEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isArrangerRecordEnabled()"
  }, {
    "method": "transport.isArrangerRecordEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerRecordEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerRecordEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerRecordEnabled().toggle()"
  }, {
    "method": "transport.isArrangerRecordEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerRecordEnabled().get()"
  }, {
    "method": "transport.isArrangerRecordEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isArrangerRecordEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isArrangerRecordEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerRecordEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerRecordEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerRecordEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerRecordEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerRecordEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerRecordEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerRecordEnabled().unsubscribe()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isClipLauncherAutomationWriteEnabled()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isClipLauncherAutomationWriteEnabled().set(boolean)"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isClipLauncherAutomationWriteEnabled().toggle()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isClipLauncherAutomationWriteEnabled().get()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isClipLauncherAutomationWriteEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isClipLauncherAutomationWriteEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isClipLauncherAutomationWriteEnabled().isSubscribed()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isClipLauncherAutomationWriteEnabled().subscribe()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isClipLauncherAutomationWriteEnabled().unsubscribe()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isClipLauncherOverdubEnabled()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isClipLauncherOverdubEnabled().set(boolean)"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isClipLauncherOverdubEnabled().toggle()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isClipLauncherOverdubEnabled().get()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isClipLauncherOverdubEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isClipLauncherOverdubEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isClipLauncherOverdubEnabled().isSubscribed()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isClipLauncherOverdubEnabled().subscribe()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isClipLauncherOverdubEnabled().unsubscribe()"
  }, {
    "method": "transport.isMetronomeEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isMetronomeEnabled()"
  }, {
    "method": "transport.isMetronomeEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isMetronomeEnabled().set(boolean)"
  }, {
    "method": "transport.isMetronomeEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeEnabled().toggle()"
  }, {
    "method": "transport.isMetronomeEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isMetronomeEnabled().get()"
  }, {
    "method": "transport.isMetronomeEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isMetronomeEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isMetronomeEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isMetronomeEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isMetronomeEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isMetronomeEnabled().isSubscribed()"
  }, {
    "method": "transport.isMetronomeEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeEnabled().subscribe()"
  }, {
    "method": "transport.isMetronomeEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isMetronomeEnabled().unsubscribe()"
  }, {
    "method": "transport.isPlaying",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isPlaying()"
  }, {
    "method": "transport.isPlaying.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isPlaying().set(boolean)"
  }, {
    "method": "transport.isPlaying.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isPlaying().toggle()"
  }, {
    "method": "transport.isPlaying.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isPlaying().get()"
  }, {
    "method": "transport.isPlaying.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isPlaying().addValueObserver(Object)"
  }, {
    "method": "transport.isPlaying.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isPlaying().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isPlaying.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isPlaying().isSubscribed()"
  }, {
    "method": "transport.isPlaying.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isPlaying().subscribe()"
  }, {
    "method": "transport.isPlaying.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isPlaying().unsubscribe()"
  }, {
    "method": "transport.tapTempo",
    "params": [],
    "result": "void",
    "expression": "void transport.tapTempo()"
  }, {
    "method": "transport.togglePlay",
    "params": [],
    "result": "void",
    "expression": "void transport.togglePlay()"
  }, {
    "method": "transport.fastForward",
    "params": [],
    "result": "void",
    "expression": "void transport.fastForward()"
  }, {
    "method": "transport.getInPosition",
    "params": [],
    "result": "Object",
    "expression": "Object transport.getInPosition()"
  }, {
    "method": "transport.getInPosition.getFormatted",
    "params": [],
    "result": "String",
    "expression": "String transport.getInPosition().getFormatted()"
  }, {
    "method": "transport.getInPosition.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.getInPosition().get()"
  }, {
    "method": "transport.getInPosition.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.getInPosition().addValueObserver(Object)"
  }, {
    "method": "transport.getInPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.getInPosition().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getInPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.getInPosition().isSubscribed()"
  }, {
    "method": "transport.getInPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getInPosition().subscribe()"
  }, {
    "method": "transport.getInPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getInPosition().unsubscribe()"
  }, {
    "method": "transport.getInPosition.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getInPosition().set(Number)"
  }, {
    "method": "transport.getInPosition.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getInPosition().inc(Number)"
  }, {
    "method": "transport.getOutPosition",
    "params": [],
    "result": "Object",
    "expression": "Object transport.getOutPosition()"
  }, {
    "method": "transport.getOutPosition.getFormatted",
    "params": [],
    "result": "String",
    "expression": "String transport.getOutPosition().getFormatted()"
  }, {
    "method": "transport.getOutPosition.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.getOutPosition().get()"
  }, {
    "method": "transport.getOutPosition.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.getOutPosition().addValueObserver(Object)"
  }, {
    "method": "transport.getOutPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.getOutPosition().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getOutPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.getOutPosition().isSubscribed()"
  }, {
    "method": "transport.getOutPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getOutPosition().subscribe()"
  }, {
    "method": "transport.getOutPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getOutPosition().unsubscribe()"
  }, {
    "method": "transport.getOutPosition.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getOutPosition().set(Number)"
  }, {
    "method": "transport.getOutPosition.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getOutPosition().inc(Number)"
  }, {
    "method": "transport.incPosition",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void transport.incPosition(Number, boolean)"
  }, {
    "method": "transport.increaseTempo",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void transport.increaseTempo(Number, Number)"
  }, {
    "method": "transport.isArrangerLoopEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object transport.isArrangerLoopEnabled()"
  }, {
    "method": "transport.isArrangerLoopEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerLoopEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerLoopEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerLoopEnabled().toggle()"
  }, {
    "method": "transport.isArrangerLoopEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerLoopEnabled().get()"
  }, {
    "method": "transport.isArrangerLoopEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.isArrangerLoopEnabled().addValueObserver(Object)"
  }, {
    "method": "transport.isArrangerLoopEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.isArrangerLoopEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerLoopEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isArrangerLoopEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerLoopEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerLoopEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerLoopEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.isArrangerLoopEnabled().unsubscribe()"
  }, {
    "method": "transport.getPosition",
    "params": [],
    "result": "Object",
    "expression": "Object transport.getPosition()"
  }, {
    "method": "transport.getPosition.getFormatted",
    "params": [],
    "result": "String",
    "expression": "String transport.getPosition().getFormatted()"
  }, {
    "method": "transport.getPosition.get",
    "params": [],
    "result": "Number",
    "expression": "Number transport.getPosition().get()"
  }, {
    "method": "transport.getPosition.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void transport.getPosition().addValueObserver(Object)"
  }, {
    "method": "transport.getPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.getPosition().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.getPosition().isSubscribed()"
  }, {
    "method": "transport.getPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getPosition().subscribe()"
  }, {
    "method": "transport.getPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.getPosition().unsubscribe()"
  }, {
    "method": "transport.getPosition.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getPosition().set(Number)"
  }, {
    "method": "transport.getPosition.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void transport.getPosition().inc(Number)"
  }, {
    "method": "transport.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void transport.setIsSubscribed(boolean)"
  }, {
    "method": "transport.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean transport.isSubscribed()"
  }, {
    "method": "transport.subscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.subscribe()"
  }, {
    "method": "transport.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void transport.unsubscribe()"
  }, {
    "method": "cursorTrack.selectFirstChild",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectFirstChild()"
  }, {
    "method": "cursorTrack.setCursorNavigationMode",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.setCursorNavigationMode(String)"
  }, {
    "method": "cursorTrack.selectParent",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectParent()"
  }, {
    "method": "cursorTrack.duplicate",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.duplicate()"
  }, {
    "method": "cursorTrack.makeVisibleInArranger",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.makeVisibleInArranger()"
  }, {
    "method": "cursorTrack.makeVisibleInMixer",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.makeVisibleInMixer()"
  }, {
    "method": "cursorTrack.color",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.color()"
  }, {
    "method": "cursorTrack.color.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.color().set(Number, Number, Number)"
  }, {
    "method": "cursorTrack.color.set",
    "params": ["Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.color().set(Number, Number, Number, Number)"
  }, {
    "method": "cursorTrack.color.red",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.color().red()"
  }, {
    "method": "cursorTrack.color.green",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.color().green()"
  }, {
    "method": "cursorTrack.color.alpha",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.color().alpha()"
  }, {
    "method": "cursorTrack.color.blue",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.color().blue()"
  }, {
    "method": "cursorTrack.color.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.color().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.color.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.color().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.color.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.color().isSubscribed()"
  }, {
    "method": "cursorTrack.color.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.color().subscribe()"
  }, {
    "method": "cursorTrack.color.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.color().unsubscribe()"
  }, {
    "method": "cursorTrack.addIsSelectedInMixerObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.addIsSelectedInMixerObserver(Object)"
  }, {
    "method": "cursorTrack.addVuMeterObserver",
    "params": ["Number", "Number", "boolean", "Object"],
    "result": "void",
    "expression": "void cursorTrack.addVuMeterObserver(Number, Number, boolean, Object)"
  }, {
    "method": "cursorTrack.isActivated",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.isActivated()"
  }, {
    "method": "cursorTrack.isActivated.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.isActivated().set(boolean)"
  }, {
    "method": "cursorTrack.isActivated.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isActivated().toggle()"
  }, {
    "method": "cursorTrack.isActivated.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isActivated().get()"
  }, {
    "method": "cursorTrack.isActivated.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.isActivated().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.isActivated.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.isActivated().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.isActivated.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isActivated().isSubscribed()"
  }, {
    "method": "cursorTrack.isActivated.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isActivated().subscribe()"
  }, {
    "method": "cursorTrack.isActivated.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isActivated().unsubscribe()"
  }, {
    "method": "cursorTrack.pan",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.pan()"
  }, {
    "method": "cursorTrack.pan.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.pan().name()"
  }, {
    "method": "cursorTrack.pan.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.pan().name().get()"
  }, {
    "method": "cursorTrack.pan.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.pan().name().getLimited(Number)"
  }, {
    "method": "cursorTrack.pan.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().name().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.pan.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.pan().name().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().name().subscribe()"
  }, {
    "method": "cursorTrack.pan.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().name().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.value",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.pan().value()"
  }, {
    "method": "cursorTrack.pan.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().set(Number, Number)"
  }, {
    "method": "cursorTrack.pan.value.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().set(Number)"
  }, {
    "method": "cursorTrack.pan.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().inc(Number, Number)"
  }, {
    "method": "cursorTrack.pan.value.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().inc(Number)"
  }, {
    "method": "cursorTrack.pan.value.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().incRaw(Number)"
  }, {
    "method": "cursorTrack.pan.value.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().setImmediately(Number)"
  }, {
    "method": "cursorTrack.pan.value.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().setRaw(Number)"
  }, {
    "method": "cursorTrack.pan.value.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.pan().value().get()"
  }, {
    "method": "cursorTrack.pan.value.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.value.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.pan().value().getRaw()"
  }, {
    "method": "cursorTrack.pan.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.pan.value.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.pan().value().displayedValue()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.pan().value().displayedValue().get()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.pan().value().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.pan().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().value().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.value.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().value().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.pan.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.pan().value().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().value().subscribe()"
  }, {
    "method": "cursorTrack.pan.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().value().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.reset",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().reset()"
  }, {
    "method": "cursorTrack.pan.modulatedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.pan().modulatedValue()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.pan().modulatedValue().get()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.pan().modulatedValue().getRaw()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.pan().modulatedValue().displayedValue()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.pan().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.pan().modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.pan().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.pan.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.pan().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().restoreAutomationControl()"
  }, {
    "method": "cursorTrack.pan.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().touch(boolean)"
  }, {
    "method": "cursorTrack.pan.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().setIndication(boolean)"
  }, {
    "method": "cursorTrack.pan.setLabel",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.pan().setLabel(String)"
  }, {
    "method": "cursorTrack.pan.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.pan.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.pan().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().subscribe()"
  }, {
    "method": "cursorTrack.pan.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().set(Number, Number)"
  }, {
    "method": "cursorTrack.pan.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().set(Number)"
  }, {
    "method": "cursorTrack.pan.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().inc(Number, Number)"
  }, {
    "method": "cursorTrack.pan.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().inc(Number)"
  }, {
    "method": "cursorTrack.pan.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().incRaw(Number)"
  }, {
    "method": "cursorTrack.pan.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().setImmediately(Number)"
  }, {
    "method": "cursorTrack.pan.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.pan().setRaw(Number)"
  }, {
    "method": "cursorTrack.pan.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.pan().get()"
  }, {
    "method": "cursorTrack.pan.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.pan().getRaw()"
  }, {
    "method": "cursorTrack.pan.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.pan.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.pan().displayedValue()"
  }, {
    "method": "cursorTrack.pan.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.pan().displayedValue().get()"
  }, {
    "method": "cursorTrack.pan.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.pan().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.pan.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.pan.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.pan().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.pan.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.pan().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.pan.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.pan.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.pan().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.pan.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.pan().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.solo",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.solo()"
  }, {
    "method": "cursorTrack.solo.toggle",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.solo().toggle(boolean)"
  }, {
    "method": "cursorTrack.solo.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.solo().set(boolean)"
  }, {
    "method": "cursorTrack.solo.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.solo().toggle()"
  }, {
    "method": "cursorTrack.solo.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.solo().get()"
  }, {
    "method": "cursorTrack.solo.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.solo().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.solo.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.solo().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.solo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.solo().isSubscribed()"
  }, {
    "method": "cursorTrack.solo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.solo().subscribe()"
  }, {
    "method": "cursorTrack.solo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.solo().unsubscribe()"
  }, {
    "method": "cursorTrack.mute",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.mute()"
  }, {
    "method": "cursorTrack.mute.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.mute().set(boolean)"
  }, {
    "method": "cursorTrack.mute.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.mute().toggle()"
  }, {
    "method": "cursorTrack.mute.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.mute().get()"
  }, {
    "method": "cursorTrack.mute.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.mute().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.mute.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.mute().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.mute.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.mute().isSubscribed()"
  }, {
    "method": "cursorTrack.mute.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.mute().subscribe()"
  }, {
    "method": "cursorTrack.mute.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.mute().unsubscribe()"
  }, {
    "method": "cursorTrack.volume",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.volume()"
  }, {
    "method": "cursorTrack.volume.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.volume().name()"
  }, {
    "method": "cursorTrack.volume.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.volume().name().get()"
  }, {
    "method": "cursorTrack.volume.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.volume().name().getLimited(Number)"
  }, {
    "method": "cursorTrack.volume.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().name().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.volume.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.volume().name().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().name().subscribe()"
  }, {
    "method": "cursorTrack.volume.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().name().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.value",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.volume().value()"
  }, {
    "method": "cursorTrack.volume.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().set(Number, Number)"
  }, {
    "method": "cursorTrack.volume.value.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().set(Number)"
  }, {
    "method": "cursorTrack.volume.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().inc(Number, Number)"
  }, {
    "method": "cursorTrack.volume.value.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().inc(Number)"
  }, {
    "method": "cursorTrack.volume.value.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().incRaw(Number)"
  }, {
    "method": "cursorTrack.volume.value.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().setImmediately(Number)"
  }, {
    "method": "cursorTrack.volume.value.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().setRaw(Number)"
  }, {
    "method": "cursorTrack.volume.value.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.volume().value().get()"
  }, {
    "method": "cursorTrack.volume.value.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.value.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.volume().value().getRaw()"
  }, {
    "method": "cursorTrack.volume.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.volume.value.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.volume().value().displayedValue()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.volume().value().displayedValue().get()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.volume().value().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.volume().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().value().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.value.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().value().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.volume.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.volume().value().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().value().subscribe()"
  }, {
    "method": "cursorTrack.volume.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().value().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.reset",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().reset()"
  }, {
    "method": "cursorTrack.volume.modulatedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.volume().modulatedValue()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.volume().modulatedValue().get()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.volume().modulatedValue().getRaw()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.volume().modulatedValue().displayedValue()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.volume().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.volume().modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.volume().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.volume.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.volume().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().restoreAutomationControl()"
  }, {
    "method": "cursorTrack.volume.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().touch(boolean)"
  }, {
    "method": "cursorTrack.volume.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().setIndication(boolean)"
  }, {
    "method": "cursorTrack.volume.setLabel",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.volume().setLabel(String)"
  }, {
    "method": "cursorTrack.volume.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.volume.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.volume().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().subscribe()"
  }, {
    "method": "cursorTrack.volume.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().set(Number, Number)"
  }, {
    "method": "cursorTrack.volume.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().set(Number)"
  }, {
    "method": "cursorTrack.volume.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().inc(Number, Number)"
  }, {
    "method": "cursorTrack.volume.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().inc(Number)"
  }, {
    "method": "cursorTrack.volume.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().incRaw(Number)"
  }, {
    "method": "cursorTrack.volume.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().setImmediately(Number)"
  }, {
    "method": "cursorTrack.volume.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.volume().setRaw(Number)"
  }, {
    "method": "cursorTrack.volume.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.volume().get()"
  }, {
    "method": "cursorTrack.volume.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.volume().getRaw()"
  }, {
    "method": "cursorTrack.volume.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.volume.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.volume().displayedValue()"
  }, {
    "method": "cursorTrack.volume.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.volume().displayedValue().get()"
  }, {
    "method": "cursorTrack.volume.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.volume().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.volume.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.volume.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.volume().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.volume.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.volume().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.volume.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.volume.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.volume().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.volume.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.volume().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.selectInMixer",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectInMixer()"
  }, {
    "method": "cursorTrack.sendBank.getCapacityOfBank",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getCapacityOfBank()"
  }, {
    "method": "cursorTrack.sendBank.getSizeOfBank",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getSizeOfBank()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().cursorIndex()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().cursorIndex().set(Number)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().cursorIndex().inc(Number)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().cursorIndex().get()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().cursorIndex().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().cursorIndex().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().cursorIndex().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().cursorIndex().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().cursorIndex().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.cursorIndex.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().cursorIndex().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number).sendChannelColor()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.set",
    "params": ["Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).sendChannelColor().set(Number, Number, Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.set",
    "params": ["Number", "Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).sendChannelColor().set(Number, Number, Number, Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.red",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).sendChannelColor().red()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.green",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).sendChannelColor().green()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.alpha",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).sendChannelColor().alpha()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.blue",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).sendChannelColor().blue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).sendChannelColor().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).sendChannelColor().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).sendChannelColor().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).sendChannelColor().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.sendChannelColor.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).sendChannelColor().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number).name()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).name().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).name().getLimited(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).name().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).name().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).name().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.name.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).name().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number).value()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().set(Number, Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().set(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.inc",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().inc(Number, Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().inc(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.incRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().incRaw(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.setImmediately",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().setImmediately(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.setRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().setRaw(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).value().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).value().getRaw()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number).value().displayedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).value().displayedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).value().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).value().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.value.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).value().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.reset",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).reset()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number).modulatedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).modulatedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).modulatedValue().getRaw()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).modulatedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.modulatedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).modulatedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.restoreAutomationControl",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).restoreAutomationControl()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.touch",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).touch(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setIndication",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).setIndication(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setLabel",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).setLabel(String)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).set(Number, Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).set(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.inc",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).inc(Number, Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).inc(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.incRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).incRaw(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setImmediately",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).setImmediately(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.setRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).setRaw(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).addRawValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().getItemAt(Number).getRaw()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).addValueObserver(Number, Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().getItemAt(Number).displayedValue()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).displayedValue().get()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorTrack.sendBank().getItemAt(Number).displayedValue().getLimited(Number)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().getItemAt(Number).displayedValue().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).displayedValue().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).displayedValue().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.getItemAt.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().getItemAt(Number).addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.scrollPageBackwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPageBackwards()"
  }, {
    "method": "cursorTrack.sendBank.scrollPageForwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPageForwards()"
  }, {
    "method": "cursorTrack.sendBank.setSizeOfBank",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().setSizeOfBank(Number)"
  }, {
    "method": "cursorTrack.sendBank.itemCount",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().itemCount()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().itemCount().get()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().itemCount().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.sendBank.itemCount.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().itemCount().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.itemCount.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().itemCount().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.itemCount.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().itemCount().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().itemCount().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.itemCount.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().itemCount().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.scrollBy",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollBy(Number)"
  }, {
    "method": "cursorTrack.sendBank.scrollByPages",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollByPages(Number)"
  }, {
    "method": "cursorTrack.sendBank.scrollIntoView",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollIntoView(Number)"
  }, {
    "method": "cursorTrack.sendBank.scrollBackwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollBackwards()"
  }, {
    "method": "cursorTrack.sendBank.scrollForwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollForwards()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().scrollPosition()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPosition().set(Number)"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPosition().inc(Number)"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.sendBank().scrollPosition().get()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPosition().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPosition().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPosition().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().scrollPosition().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPosition().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.scrollPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().scrollPosition().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().canScrollBackwards()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().canScrollBackwards().get()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollBackwards().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollBackwards().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().canScrollBackwards().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollBackwards().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollBackwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollBackwards().unsubscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.sendBank().canScrollForwards()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().canScrollForwards().get()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollForwards().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollForwards().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sendBank().canScrollForwards().isSubscribed()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollForwards().subscribe()"
  }, {
    "method": "cursorTrack.sendBank.canScrollForwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sendBank().canScrollForwards().unsubscribe()"
  }, {
    "method": "cursorTrack.playingNotes.isNotePlaying",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.playingNotes().isNotePlaying(Number)"
  }, {
    "method": "cursorTrack.playingNotes.get",
    "params": [],
    "result": "Object[]",
    "expression": "Object[] cursorTrack.playingNotes().get()"
  }, {
    "method": "cursorTrack.playingNotes.get",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.playingNotes().get(Number)"
  }, {
    "method": "cursorTrack.playingNotes.isEmpty",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.playingNotes().isEmpty()"
  }, {
    "method": "cursorTrack.playingNotes.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.playingNotes().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.playingNotes.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.playingNotes().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.playingNotes.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.playingNotes().isSubscribed()"
  }, {
    "method": "cursorTrack.playingNotes.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.playingNotes().subscribe()"
  }, {
    "method": "cursorTrack.playingNotes.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.playingNotes().unsubscribe()"
  }, {
    "method": "cursorTrack.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.name()"
  }, {
    "method": "cursorTrack.name.set",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.name().set(String)"
  }, {
    "method": "cursorTrack.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.name().get()"
  }, {
    "method": "cursorTrack.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.name().getLimited(Number)"
  }, {
    "method": "cursorTrack.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.name().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.name().isSubscribed()"
  }, {
    "method": "cursorTrack.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.name().subscribe()"
  }, {
    "method": "cursorTrack.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.name().unsubscribe()"
  }, {
    "method": "cursorTrack.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectInEditor()"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.addIsSelectedInEditorObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.addIsSelectedInEditorObserver(Object)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isSubscribed()"
  }, {
    "method": "cursorTrack.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.subscribe()"
  }, {
    "method": "cursorTrack.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.unsubscribe()"
  }, {
    "method": "cursorTrack.hasNext",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.hasNext()"
  }, {
    "method": "cursorTrack.hasNext.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.hasNext().get()"
  }, {
    "method": "cursorTrack.hasNext.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.hasNext().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.hasNext.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.hasNext().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.hasNext.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.hasNext().isSubscribed()"
  }, {
    "method": "cursorTrack.hasNext.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.hasNext().subscribe()"
  }, {
    "method": "cursorTrack.hasNext.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.hasNext().unsubscribe()"
  }, {
    "method": "cursorTrack.hasPrevious",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.hasPrevious()"
  }, {
    "method": "cursorTrack.hasPrevious.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.hasPrevious().get()"
  }, {
    "method": "cursorTrack.hasPrevious.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.hasPrevious().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.hasPrevious.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.hasPrevious().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.hasPrevious.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.hasPrevious().isSubscribed()"
  }, {
    "method": "cursorTrack.hasPrevious.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.hasPrevious().subscribe()"
  }, {
    "method": "cursorTrack.hasPrevious.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.hasPrevious().unsubscribe()"
  }, {
    "method": "cursorTrack.selectNext",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectNext()"
  }, {
    "method": "cursorTrack.selectPrevious",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectPrevious()"
  }, {
    "method": "cursorTrack.selectFirst",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectFirst()"
  }, {
    "method": "cursorTrack.selectLast",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.selectLast()"
  }, {
    "method": "cursorTrack.isPinned",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.isPinned()"
  }, {
    "method": "cursorTrack.isPinned.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.isPinned().set(boolean)"
  }, {
    "method": "cursorTrack.isPinned.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isPinned().toggle()"
  }, {
    "method": "cursorTrack.isPinned.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isPinned().get()"
  }, {
    "method": "cursorTrack.isPinned.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.isPinned().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.isPinned.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.isPinned().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.isPinned.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isPinned().isSubscribed()"
  }, {
    "method": "cursorTrack.isPinned.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isPinned().subscribe()"
  }, {
    "method": "cursorTrack.isPinned.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isPinned().unsubscribe()"
  }, {
    "method": "cursorTrack.position",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.position()"
  }, {
    "method": "cursorTrack.position.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.position().get()"
  }, {
    "method": "cursorTrack.position.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.position().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.position.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.position().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.position.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.position().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.position.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.position().isSubscribed()"
  }, {
    "method": "cursorTrack.position.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.position().subscribe()"
  }, {
    "method": "cursorTrack.position.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.position().unsubscribe()"
  }, {
    "method": "cursorTrack.stop",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.stop()"
  }, {
    "method": "cursorTrack.setName",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.setName(String)"
  }, {
    "method": "cursorTrack.stopNote",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.stopNote(Number, Number)"
  }, {
    "method": "cursorTrack.playNote",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.playNote(Number, Number)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.afterTrackInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.afterTrackInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.beforeTrackInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.beforeTrackInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.returnToArrangement",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.returnToArrangement()"
  }, {
    "method": "cursorTrack.startNote",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.startNote(Number, Number)"
  }, {
    "method": "cursorTrack.monitor",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.monitor()"
  }, {
    "method": "cursorTrack.monitor.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.monitor().set(boolean)"
  }, {
    "method": "cursorTrack.monitor.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.monitor().toggle()"
  }, {
    "method": "cursorTrack.monitor.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.monitor().get()"
  }, {
    "method": "cursorTrack.monitor.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.monitor().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.monitor.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.monitor().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.monitor.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.monitor().isSubscribed()"
  }, {
    "method": "cursorTrack.monitor.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.monitor().subscribe()"
  }, {
    "method": "cursorTrack.monitor.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.monitor().unsubscribe()"
  }, {
    "method": "cursorTrack.addPitchNamesObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.addPitchNamesObserver(Object)"
  }, {
    "method": "cursorTrack.autoMonitor",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.autoMonitor()"
  }, {
    "method": "cursorTrack.autoMonitor.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.autoMonitor().set(boolean)"
  }, {
    "method": "cursorTrack.autoMonitor.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.autoMonitor().toggle()"
  }, {
    "method": "cursorTrack.autoMonitor.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.autoMonitor().get()"
  }, {
    "method": "cursorTrack.autoMonitor.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.autoMonitor().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.autoMonitor.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.autoMonitor().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.autoMonitor.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.autoMonitor().isSubscribed()"
  }, {
    "method": "cursorTrack.autoMonitor.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.autoMonitor().subscribe()"
  }, {
    "method": "cursorTrack.autoMonitor.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.autoMonitor().unsubscribe()"
  }, {
    "method": "cursorTrack.canHoldAudioData",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.canHoldAudioData()"
  }, {
    "method": "cursorTrack.canHoldAudioData.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.canHoldAudioData().set(boolean)"
  }, {
    "method": "cursorTrack.canHoldAudioData.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.canHoldAudioData().toggle()"
  }, {
    "method": "cursorTrack.canHoldAudioData.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.canHoldAudioData().get()"
  }, {
    "method": "cursorTrack.canHoldAudioData.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.canHoldAudioData().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.canHoldAudioData.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.canHoldAudioData().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.canHoldAudioData.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.canHoldAudioData().isSubscribed()"
  }, {
    "method": "cursorTrack.canHoldAudioData.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.canHoldAudioData().subscribe()"
  }, {
    "method": "cursorTrack.canHoldAudioData.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.canHoldAudioData().unsubscribe()"
  }, {
    "method": "cursorTrack.canHoldNoteData",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.canHoldNoteData()"
  }, {
    "method": "cursorTrack.canHoldNoteData.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.canHoldNoteData().set(boolean)"
  }, {
    "method": "cursorTrack.canHoldNoteData.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.canHoldNoteData().toggle()"
  }, {
    "method": "cursorTrack.canHoldNoteData.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.canHoldNoteData().get()"
  }, {
    "method": "cursorTrack.canHoldNoteData.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.canHoldNoteData().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.canHoldNoteData.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.canHoldNoteData().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.canHoldNoteData.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.canHoldNoteData().isSubscribed()"
  }, {
    "method": "cursorTrack.canHoldNoteData.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.canHoldNoteData().subscribe()"
  }, {
    "method": "cursorTrack.canHoldNoteData.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.canHoldNoteData().unsubscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.sourceSelector().hasAudioInputSelected()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasAudioInputSelected().set(boolean)"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasAudioInputSelected().toggle()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sourceSelector().hasAudioInputSelected().get()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasAudioInputSelected().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasAudioInputSelected().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sourceSelector().hasAudioInputSelected().isSubscribed()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasAudioInputSelected().subscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.hasAudioInputSelected.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasAudioInputSelected().unsubscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.sourceSelector().hasNoteInputSelected()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasNoteInputSelected().set(boolean)"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasNoteInputSelected().toggle()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sourceSelector().hasNoteInputSelected().get()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasNoteInputSelected().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasNoteInputSelected().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sourceSelector().hasNoteInputSelected().isSubscribed()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasNoteInputSelected().subscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.hasNoteInputSelected.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().hasNoteInputSelected().unsubscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.sourceSelector.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.sourceSelector().isSubscribed()"
  }, {
    "method": "cursorTrack.sourceSelector.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().subscribe()"
  }, {
    "method": "cursorTrack.sourceSelector.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.sourceSelector().unsubscribe()"
  }, {
    "method": "cursorTrack.trackType",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.trackType()"
  }, {
    "method": "cursorTrack.trackType.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.trackType().get()"
  }, {
    "method": "cursorTrack.trackType.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.trackType().getLimited(Number)"
  }, {
    "method": "cursorTrack.trackType.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.trackType().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.trackType.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.trackType().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.trackType.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.trackType().isSubscribed()"
  }, {
    "method": "cursorTrack.trackType.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.trackType().subscribe()"
  }, {
    "method": "cursorTrack.trackType.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.trackType().unsubscribe()"
  }, {
    "method": "cursorTrack.arm",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.arm()"
  }, {
    "method": "cursorTrack.arm.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.arm().set(boolean)"
  }, {
    "method": "cursorTrack.arm.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.arm().toggle()"
  }, {
    "method": "cursorTrack.arm.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.arm().get()"
  }, {
    "method": "cursorTrack.arm.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.arm().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.arm.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.arm().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.arm.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.arm().isSubscribed()"
  }, {
    "method": "cursorTrack.arm.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.arm().subscribe()"
  }, {
    "method": "cursorTrack.arm.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.arm().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.createEmptyClip",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().createEmptyClip(Number, Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.duplicateClip",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().duplicateClip(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.showInEditor",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().showInEditor(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addColorObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addColorObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addHasContentObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addHasContentObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addIsPlaybackQueuedObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addIsPlaybackQueuedObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addIsPlayingObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addIsPlayingObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addIsRecordingObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addIsRecordingObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addIsRecordingQueuedObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addIsRecordingQueuedObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addIsSelectedObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addIsSelectedObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addIsStopQueuedObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addIsStopQueuedObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addPlaybackStateObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addPlaybackStateObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().set(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().toggle()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().isMasterTrackContentShownOnTrackGroups().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.select",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().select(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.record",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().record(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().setIndication(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.deleteClip",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().deleteClip(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.stop",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().stop()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.returnToArrangement",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().returnToArrangement()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.addNameObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().addNameObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.launch",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().launch(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getCapacityOfBank",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().getCapacityOfBank()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getSizeOfBank",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().getSizeOfBank()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().cursorIndex()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().cursorIndex().set(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().cursorIndex().inc(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().cursorIndex().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().cursorIndex().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().cursorIndex().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().cursorIndex().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().cursorIndex().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().cursorIndex().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.cursorIndex.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().cursorIndex().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.browseToInsertClip",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).browseToInsertClip()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).color()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.set",
    "params": ["Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().set(Number, Number, Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.set",
    "params": ["Number", "Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().set(Number, Number, Number, Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.red",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().red()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.green",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().green()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.alpha",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().alpha()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.blue",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().blue()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.color.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).color().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).hasContent()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.get",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).hasContent().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).hasContent().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).hasContent().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).hasContent().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).hasContent().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).hasContent().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaybackQueued()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.get",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaybackQueued().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaybackQueued().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaybackQueued().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaybackQueued().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaybackQueued().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaybackQueued().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaying()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.get",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaying().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaying().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaying().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaying().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaying().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isPlaying().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecording()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.get",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecording().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecording().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecording().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecording().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecording().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecording().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecordingQueued()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.get",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecordingQueued().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecordingQueued().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecordingQueued().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecordingQueued().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecordingQueued().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isRecordingQueued().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).isStopQueued()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.get",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isStopQueued().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isStopQueued().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isStopQueued().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isStopQueued().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isStopQueued().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isStopQueued().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSelected()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.get",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSelected().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSelected().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSelected().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSelected().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSelected().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSelected().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).name()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorTrack.clipLauncherSlotBank().getItemAt(Number).name().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorTrack.clipLauncherSlotBank().getItemAt(Number).name().getLimited(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).name().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).name().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).name().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.name.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).name().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.copyTracks",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.copySlotsOrScenes",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.insertFile",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.insertVST2Device",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.insertVST3Device",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.moveDevices",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.moveSlotsOrScenes",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.moveTracks",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.copyDevices",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.paste",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.nextSceneInsertionPoint.browse",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).nextSceneInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.copyTracks",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.copySlotsOrScenes",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.insertFile",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.insertVST2Device",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.insertVST3Device",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.moveDevices",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.moveSlotsOrScenes",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.moveTracks",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.copyDevices",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.paste",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.previousSceneInsertionPoint.browse",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).previousSceneInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.copyTracks",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.copySlotsOrScenes",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.insertFile",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.insertVST2Device",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.insertVST3Device",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.moveDevices",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.moveSlotsOrScenes",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.moveTracks",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.copyDevices",
    "params": ["Number", "Object[]"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.paste",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().paste()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.replaceInsertionPoint.browse",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).replaceInsertionPoint().browse()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.addValueObserver",
    "params": ["Number", "Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).sceneIndex().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.launch",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).launch()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().getItemAt(Number).isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.getItemAt.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().getItemAt(Number).unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPageBackwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPageBackwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPageForwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPageForwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.setSizeOfBank",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().setSizeOfBank(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().itemCount()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().itemCount().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().itemCount().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().itemCount().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().itemCount().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().itemCount().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().itemCount().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.itemCount.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().itemCount().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollBy",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollBy(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollByPages",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollByPages(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollIntoView",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollIntoView(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollBackwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollBackwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollForwards",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollForwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().scrollPosition()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPosition().set(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPosition().inc(Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorTrack.clipLauncherSlotBank().scrollPosition().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPosition().addValueObserver(Object, Number)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPosition().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPosition().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().scrollPosition().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPosition().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.scrollPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().scrollPosition().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().canScrollBackwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().canScrollBackwards().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollBackwards().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollBackwards().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().canScrollBackwards().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollBackwards().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollBackwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollBackwards().unsubscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.clipLauncherSlotBank().canScrollForwards()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().canScrollForwards().get()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollForwards().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollForwards().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.clipLauncherSlotBank().canScrollForwards().isSubscribed()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollForwards().subscribe()"
  }, {
    "method": "cursorTrack.clipLauncherSlotBank.canScrollForwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.clipLauncherSlotBank().canScrollForwards().unsubscribe()"
  }, {
    "method": "cursorTrack.crossFadeMode",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.crossFadeMode()"
  }, {
    "method": "cursorTrack.crossFadeMode.set",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorTrack.crossFadeMode().set(String)"
  }, {
    "method": "cursorTrack.crossFadeMode.get",
    "params": [],
    "result": "String",
    "expression": "String cursorTrack.crossFadeMode().get()"
  }, {
    "method": "cursorTrack.crossFadeMode.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.crossFadeMode().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.crossFadeMode.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.crossFadeMode().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.crossFadeMode.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.crossFadeMode().isSubscribed()"
  }, {
    "method": "cursorTrack.crossFadeMode.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.crossFadeMode().subscribe()"
  }, {
    "method": "cursorTrack.crossFadeMode.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.crossFadeMode().unsubscribe()"
  }, {
    "method": "cursorTrack.isGroup",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.isGroup()"
  }, {
    "method": "cursorTrack.isGroup.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isGroup().get()"
  }, {
    "method": "cursorTrack.isGroup.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.isGroup().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.isGroup.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.isGroup().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.isGroup.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isGroup().isSubscribed()"
  }, {
    "method": "cursorTrack.isGroup.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isGroup().subscribe()"
  }, {
    "method": "cursorTrack.isGroup.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isGroup().unsubscribe()"
  }, {
    "method": "cursorTrack.isStopped",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.isStopped()"
  }, {
    "method": "cursorTrack.isStopped.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isStopped().get()"
  }, {
    "method": "cursorTrack.isStopped.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.isStopped().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.isStopped.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.isStopped().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.isStopped.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isStopped().isSubscribed()"
  }, {
    "method": "cursorTrack.isStopped.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isStopped().subscribe()"
  }, {
    "method": "cursorTrack.isStopped.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isStopped().unsubscribe()"
  }, {
    "method": "cursorTrack.sendMidi",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorTrack.sendMidi(Number, Number, Number)"
  }, {
    "method": "cursorTrack.isQueuedForStop",
    "params": [],
    "result": "Object",
    "expression": "Object cursorTrack.isQueuedForStop()"
  }, {
    "method": "cursorTrack.isQueuedForStop.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isQueuedForStop().get()"
  }, {
    "method": "cursorTrack.isQueuedForStop.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorTrack.isQueuedForStop().addValueObserver(Object)"
  }, {
    "method": "cursorTrack.isQueuedForStop.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorTrack.isQueuedForStop().setIsSubscribed(boolean)"
  }, {
    "method": "cursorTrack.isQueuedForStop.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorTrack.isQueuedForStop().isSubscribed()"
  }, {
    "method": "cursorTrack.isQueuedForStop.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isQueuedForStop().subscribe()"
  }, {
    "method": "cursorTrack.isQueuedForStop.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorTrack.isQueuedForStop().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.duplicate",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().duplicate()"
  }, {
    "method": "cursorDevice.channel.makeVisibleInArranger",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().makeVisibleInArranger()"
  }, {
    "method": "cursorDevice.channel.makeVisibleInMixer",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().makeVisibleInMixer()"
  }, {
    "method": "cursorDevice.channel.color",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().color()"
  }, {
    "method": "cursorDevice.channel.color.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().color().set(Number, Number, Number)"
  }, {
    "method": "cursorDevice.channel.color.set",
    "params": ["Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().color().set(Number, Number, Number, Number)"
  }, {
    "method": "cursorDevice.channel.color.red",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().color().red()"
  }, {
    "method": "cursorDevice.channel.color.green",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().color().green()"
  }, {
    "method": "cursorDevice.channel.color.alpha",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().color().alpha()"
  }, {
    "method": "cursorDevice.channel.color.blue",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().color().blue()"
  }, {
    "method": "cursorDevice.channel.color.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().color().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.color.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().color().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.color.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().color().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.color.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().color().subscribe()"
  }, {
    "method": "cursorDevice.channel.color.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().color().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.addIsSelectedInMixerObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().addIsSelectedInMixerObserver(Object)"
  }, {
    "method": "cursorDevice.channel.addVuMeterObserver",
    "params": ["Number", "Number", "boolean", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().addVuMeterObserver(Number, Number, boolean, Object)"
  }, {
    "method": "cursorDevice.channel.isActivated",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().isActivated()"
  }, {
    "method": "cursorDevice.channel.isActivated.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().isActivated().set(boolean)"
  }, {
    "method": "cursorDevice.channel.isActivated.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().isActivated().toggle()"
  }, {
    "method": "cursorDevice.channel.isActivated.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().isActivated().get()"
  }, {
    "method": "cursorDevice.channel.isActivated.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().isActivated().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.isActivated.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().isActivated().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.isActivated.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().isActivated().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.isActivated.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().isActivated().subscribe()"
  }, {
    "method": "cursorDevice.channel.isActivated.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().isActivated().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().pan()"
  }, {
    "method": "cursorDevice.channel.pan.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().pan().name()"
  }, {
    "method": "cursorDevice.channel.pan.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().name().get()"
  }, {
    "method": "cursorDevice.channel.pan.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().name().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.pan.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().name().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().pan().name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().name().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().pan().value()"
  }, {
    "method": "cursorDevice.channel.pan.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().set(Number, Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().set(Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().inc(Number, Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().inc(Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().incRaw(Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().setImmediately(Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().setRaw(Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().pan().value().get()"
  }, {
    "method": "cursorDevice.channel.pan.value.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.value.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().pan().value().getRaw()"
  }, {
    "method": "cursorDevice.channel.pan.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().pan().value().displayedValue()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().value().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().value().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().pan().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().pan().value().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().value().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.reset",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().reset()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().pan().modulatedValue()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().pan().modulatedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().pan().modulatedValue().getRaw()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().pan().modulatedValue().displayedValue()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().pan().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().pan().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().restoreAutomationControl()"
  }, {
    "method": "cursorDevice.channel.pan.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().touch(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().setIndication(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.setLabel",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().setLabel(String)"
  }, {
    "method": "cursorDevice.channel.pan.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().pan().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().set(Number, Number)"
  }, {
    "method": "cursorDevice.channel.pan.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().set(Number)"
  }, {
    "method": "cursorDevice.channel.pan.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().inc(Number, Number)"
  }, {
    "method": "cursorDevice.channel.pan.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().inc(Number)"
  }, {
    "method": "cursorDevice.channel.pan.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().incRaw(Number)"
  }, {
    "method": "cursorDevice.channel.pan.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().setImmediately(Number)"
  }, {
    "method": "cursorDevice.channel.pan.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().setRaw(Number)"
  }, {
    "method": "cursorDevice.channel.pan.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().pan().get()"
  }, {
    "method": "cursorDevice.channel.pan.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().pan().getRaw()"
  }, {
    "method": "cursorDevice.channel.pan.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().pan().displayedValue()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().pan().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().pan().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.pan.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.pan.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().pan().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.solo",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().solo()"
  }, {
    "method": "cursorDevice.channel.solo.toggle",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().solo().toggle(boolean)"
  }, {
    "method": "cursorDevice.channel.solo.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().solo().set(boolean)"
  }, {
    "method": "cursorDevice.channel.solo.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().solo().toggle()"
  }, {
    "method": "cursorDevice.channel.solo.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().solo().get()"
  }, {
    "method": "cursorDevice.channel.solo.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().solo().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.solo.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().solo().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.solo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().solo().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.solo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().solo().subscribe()"
  }, {
    "method": "cursorDevice.channel.solo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().solo().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.mute",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().mute()"
  }, {
    "method": "cursorDevice.channel.mute.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().mute().set(boolean)"
  }, {
    "method": "cursorDevice.channel.mute.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().mute().toggle()"
  }, {
    "method": "cursorDevice.channel.mute.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().mute().get()"
  }, {
    "method": "cursorDevice.channel.mute.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().mute().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.mute.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().mute().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.mute.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().mute().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.mute.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().mute().subscribe()"
  }, {
    "method": "cursorDevice.channel.mute.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().mute().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().volume()"
  }, {
    "method": "cursorDevice.channel.volume.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().volume().name()"
  }, {
    "method": "cursorDevice.channel.volume.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().name().get()"
  }, {
    "method": "cursorDevice.channel.volume.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().name().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.volume.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().name().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().volume().name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().name().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().volume().value()"
  }, {
    "method": "cursorDevice.channel.volume.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().set(Number, Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().set(Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().inc(Number, Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().inc(Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().incRaw(Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().setImmediately(Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().setRaw(Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().volume().value().get()"
  }, {
    "method": "cursorDevice.channel.volume.value.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.value.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().volume().value().getRaw()"
  }, {
    "method": "cursorDevice.channel.volume.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().volume().value().displayedValue()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().value().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().value().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().volume().value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().volume().value().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().value().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.reset",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().reset()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().volume().modulatedValue()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().volume().modulatedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().volume().modulatedValue().getRaw()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().volume().modulatedValue().displayedValue()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().volume().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().volume().modulatedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().modulatedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().restoreAutomationControl()"
  }, {
    "method": "cursorDevice.channel.volume.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().touch(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().setIndication(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.setLabel",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().setLabel(String)"
  }, {
    "method": "cursorDevice.channel.volume.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().volume().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().set(Number, Number)"
  }, {
    "method": "cursorDevice.channel.volume.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().set(Number)"
  }, {
    "method": "cursorDevice.channel.volume.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().inc(Number, Number)"
  }, {
    "method": "cursorDevice.channel.volume.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().inc(Number)"
  }, {
    "method": "cursorDevice.channel.volume.incRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().incRaw(Number)"
  }, {
    "method": "cursorDevice.channel.volume.setImmediately",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().setImmediately(Number)"
  }, {
    "method": "cursorDevice.channel.volume.setRaw",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().setRaw(Number)"
  }, {
    "method": "cursorDevice.channel.volume.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().volume().get()"
  }, {
    "method": "cursorDevice.channel.volume.addRawValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.getRaw",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().volume().getRaw()"
  }, {
    "method": "cursorDevice.channel.volume.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().volume().displayedValue()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().volume().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().volume().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.volume.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.volume.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().volume().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.selectInMixer",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().selectInMixer()"
  }, {
    "method": "cursorDevice.channel.sendBank.getCapacityOfBank",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getCapacityOfBank()"
  }, {
    "method": "cursorDevice.channel.sendBank.getSizeOfBank",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getSizeOfBank()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().cursorIndex()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().cursorIndex().set(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().cursorIndex().inc(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().cursorIndex().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().cursorIndex().addValueObserver(Object, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().cursorIndex().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().cursorIndex().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().cursorIndex().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().cursorIndex().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.cursorIndex.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().cursorIndex().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.set",
    "params": ["Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().set(Number, Number, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.set",
    "params": ["Number", "Number", "Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().set(Number, Number, Number, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.red",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().red()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.green",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().green()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.alpha",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().alpha()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.blue",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().blue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).sendChannelColor().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number).name()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).name().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).name().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).name().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).name().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.name.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number).value()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().set(Number, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().set(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.inc",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().inc(Number, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().inc(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.incRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().incRaw(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.setImmediately",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().setImmediately(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.setRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().setRaw(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).value().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).value().getRaw()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).value().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.value.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).value().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.reset",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).reset()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().getRaw()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).modulatedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.restoreAutomationControl",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).restoreAutomationControl()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.touch",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).touch(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setIndication",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).setIndication(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setLabel",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).setLabel(String)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).set(Number, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).set(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.inc",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).inc(Number, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).inc(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.incRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).incRaw(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setImmediately",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).setImmediately(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.setRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).setRaw(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).addRawValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().getItemAt(Number).getRaw()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).addValueObserver(Number, Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().getItemAt(Number).displayedValue()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).displayedValue().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().sendBank().getItemAt(Number).displayedValue().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().getItemAt(Number).displayedValue().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).displayedValue().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).displayedValue().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.getItemAt.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().getItemAt(Number).addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPageBackwards",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPageBackwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPageForwards",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPageForwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.setSizeOfBank",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().setSizeOfBank(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().itemCount()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().itemCount().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().itemCount().addValueObserver(Object, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().itemCount().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().itemCount().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().itemCount().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().itemCount().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.itemCount.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().itemCount().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollBy",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollBy(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollByPages",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollByPages(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollIntoView",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollIntoView(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollBackwards",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollBackwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollForwards",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollForwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().scrollPosition()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPosition().set(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPosition().inc(Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.channel().sendBank().scrollPosition().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPosition().addValueObserver(Object, Number)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPosition().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPosition().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().scrollPosition().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPosition().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.scrollPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().scrollPosition().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().canScrollBackwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().canScrollBackwards().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollBackwards().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollBackwards().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().canScrollBackwards().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollBackwards().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollBackwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollBackwards().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().sendBank().canScrollForwards()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().canScrollForwards().get()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollForwards().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollForwards().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().sendBank().canScrollForwards().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollForwards().subscribe()"
  }, {
    "method": "cursorDevice.channel.sendBank.canScrollForwards.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().sendBank().canScrollForwards().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.playingNotes.isNotePlaying",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().playingNotes().isNotePlaying(Number)"
  }, {
    "method": "cursorDevice.channel.playingNotes.get",
    "params": [],
    "result": "Object[]",
    "expression": "Object[] cursorDevice.channel().playingNotes().get()"
  }, {
    "method": "cursorDevice.channel.playingNotes.get",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.channel().playingNotes().get(Number)"
  }, {
    "method": "cursorDevice.channel.playingNotes.isEmpty",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().playingNotes().isEmpty()"
  }, {
    "method": "cursorDevice.channel.playingNotes.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().playingNotes().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.playingNotes.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().playingNotes().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.playingNotes.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().playingNotes().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.playingNotes.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().playingNotes().subscribe()"
  }, {
    "method": "cursorDevice.channel.playingNotes.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().playingNotes().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.channel().name()"
  }, {
    "method": "cursorDevice.channel.name.set",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.channel().name().set(String)"
  }, {
    "method": "cursorDevice.channel.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.channel().name().get()"
  }, {
    "method": "cursorDevice.channel.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.channel().name().getLimited(Number)"
  }, {
    "method": "cursorDevice.channel.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().name().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.channel.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().name().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().name().subscribe()"
  }, {
    "method": "cursorDevice.channel.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().name().unsubscribe()"
  }, {
    "method": "cursorDevice.channel.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().selectInEditor()"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.channel.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.channel.addIsSelectedInEditorObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.channel().addIsSelectedInEditorObserver(Object)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.channel.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.channel.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.channel().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.channel.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.channel().isSubscribed()"
  }, {
    "method": "cursorDevice.channel.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().subscribe()"
  }, {
    "method": "cursorDevice.channel.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.channel().unsubscribe()"
  }, {
    "method": "cursorDevice.selectFirstInKeyPad",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.selectFirstInKeyPad(Number)"
  }, {
    "method": "cursorDevice.selectFirstInLayer",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.selectFirstInLayer(Number)"
  }, {
    "method": "cursorDevice.selectFirstInLayer",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.selectFirstInLayer(String)"
  }, {
    "method": "cursorDevice.selectParent",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.selectParent()"
  }, {
    "method": "cursorDevice.selectLastInKeyPad",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.selectLastInKeyPad(Number)"
  }, {
    "method": "cursorDevice.selectLastInLayer",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.selectLastInLayer(Number)"
  }, {
    "method": "cursorDevice.selectLastInLayer",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.selectLastInLayer(String)"
  }, {
    "method": "cursorDevice.selectFirstInSlot",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.selectFirstInSlot(String)"
  }, {
    "method": "cursorDevice.selectLastInSlot",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.selectLastInSlot(String)"
  }, {
    "method": "cursorDevice.hasNext",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.hasNext()"
  }, {
    "method": "cursorDevice.hasNext.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasNext().get()"
  }, {
    "method": "cursorDevice.hasNext.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.hasNext().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.hasNext.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.hasNext().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.hasNext.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasNext().isSubscribed()"
  }, {
    "method": "cursorDevice.hasNext.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasNext().subscribe()"
  }, {
    "method": "cursorDevice.hasNext.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasNext().unsubscribe()"
  }, {
    "method": "cursorDevice.hasPrevious",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.hasPrevious()"
  }, {
    "method": "cursorDevice.hasPrevious.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasPrevious().get()"
  }, {
    "method": "cursorDevice.hasPrevious.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.hasPrevious().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.hasPrevious.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.hasPrevious().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.hasPrevious.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasPrevious().isSubscribed()"
  }, {
    "method": "cursorDevice.hasPrevious.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasPrevious().subscribe()"
  }, {
    "method": "cursorDevice.hasPrevious.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasPrevious().unsubscribe()"
  }, {
    "method": "cursorDevice.selectNext",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.selectNext()"
  }, {
    "method": "cursorDevice.selectPrevious",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.selectPrevious()"
  }, {
    "method": "cursorDevice.selectFirst",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.selectFirst()"
  }, {
    "method": "cursorDevice.selectLast",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.selectLast()"
  }, {
    "method": "cursorDevice.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.name()"
  }, {
    "method": "cursorDevice.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.name().get()"
  }, {
    "method": "cursorDevice.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.name().getLimited(Number)"
  }, {
    "method": "cursorDevice.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.name().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.name().isSubscribed()"
  }, {
    "method": "cursorDevice.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.name().subscribe()"
  }, {
    "method": "cursorDevice.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.name().unsubscribe()"
  }, {
    "method": "cursorDevice.position",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.position()"
  }, {
    "method": "cursorDevice.position.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorDevice.position().get()"
  }, {
    "method": "cursorDevice.position.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorDevice.position().addValueObserver(Object, Number)"
  }, {
    "method": "cursorDevice.position.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.position().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.position.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.position().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.position.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.position().isSubscribed()"
  }, {
    "method": "cursorDevice.position.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.position().subscribe()"
  }, {
    "method": "cursorDevice.position.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.position().unsubscribe()"
  }, {
    "method": "cursorDevice.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.selectInEditor()"
  }, {
    "method": "cursorDevice.addNextParameterPageEnabledObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.addNextParameterPageEnabledObserver(Object)"
  }, {
    "method": "cursorDevice.addPreviousParameterPageEnabledObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.addPreviousParameterPageEnabledObserver(Object)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.afterDeviceInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.afterDeviceInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.incDirectParameterValueNormalized",
    "params": ["String", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.incDirectParameterValueNormalized(String, Number, Number)"
  }, {
    "method": "cursorDevice.nextParameterPage",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.nextParameterPage()"
  }, {
    "method": "cursorDevice.previousParameterPage",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.previousParameterPage()"
  }, {
    "method": "cursorDevice.setDirectParameterValueNormalized",
    "params": ["String", "Number", "Number"],
    "result": "void",
    "expression": "void cursorDevice.setDirectParameterValueNormalized(String, Number, Number)"
  }, {
    "method": "cursorDevice.setParameterPage",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.setParameterPage(Number)"
  }, {
    "method": "cursorDevice.addDirectParameterIdObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.addDirectParameterIdObserver(Object)"
  }, {
    "method": "cursorDevice.addDirectParameterNameObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorDevice.addDirectParameterNameObserver(Number, Object)"
  }, {
    "method": "cursorDevice.addDirectParameterNormalizedValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.addDirectParameterNormalizedValueObserver(Object)"
  }, {
    "method": "cursorDevice.addDirectParameterValueDisplayObserver.setObservedParameterIds",
    "params": ["Number", "Object", "String[]"],
    "result": "void",
    "expression": "void cursorDevice.addDirectParameterValueDisplayObserver(Number, Object).setObservedParameterIds(String[])"
  }, {
    "method": "cursorDevice.getCursorSlot.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.getCursorSlot().name()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.set",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().name().set(String)"
  }, {
    "method": "cursorDevice.getCursorSlot.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.getCursorSlot().name().get()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.getCursorSlot().name().getLimited(Number)"
  }, {
    "method": "cursorDevice.getCursorSlot.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().name().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.getCursorSlot.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.getCursorSlot.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.getCursorSlot().name().isSubscribed()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().name().subscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().name().unsubscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().selectInEditor()"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.getCursorSlot.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.getCursorSlot.addIsSelectedInEditorObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().addIsSelectedInEditorObserver(Object)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.getCursorSlot.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.getCursorSlot.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.getCursorSlot.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.getCursorSlot().isSubscribed()"
  }, {
    "method": "cursorDevice.getCursorSlot.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().subscribe()"
  }, {
    "method": "cursorDevice.getCursorSlot.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.getCursorSlot().unsubscribe()"
  }, {
    "method": "cursorDevice.hasDrumPads",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.hasDrumPads()"
  }, {
    "method": "cursorDevice.hasDrumPads.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasDrumPads().get()"
  }, {
    "method": "cursorDevice.hasDrumPads.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.hasDrumPads().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.hasDrumPads.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.hasDrumPads().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.hasDrumPads.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasDrumPads().isSubscribed()"
  }, {
    "method": "cursorDevice.hasDrumPads.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasDrumPads().subscribe()"
  }, {
    "method": "cursorDevice.hasDrumPads.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasDrumPads().unsubscribe()"
  }, {
    "method": "cursorDevice.hasLayers",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.hasLayers()"
  }, {
    "method": "cursorDevice.hasLayers.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasLayers().get()"
  }, {
    "method": "cursorDevice.hasLayers.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.hasLayers().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.hasLayers.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.hasLayers().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.hasLayers.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasLayers().isSubscribed()"
  }, {
    "method": "cursorDevice.hasLayers.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasLayers().subscribe()"
  }, {
    "method": "cursorDevice.hasLayers.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasLayers().unsubscribe()"
  }, {
    "method": "cursorDevice.hasSlots",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.hasSlots()"
  }, {
    "method": "cursorDevice.hasSlots.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasSlots().get()"
  }, {
    "method": "cursorDevice.hasSlots.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.hasSlots().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.hasSlots.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.hasSlots().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.hasSlots.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.hasSlots().isSubscribed()"
  }, {
    "method": "cursorDevice.hasSlots.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasSlots().subscribe()"
  }, {
    "method": "cursorDevice.hasSlots.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.hasSlots().unsubscribe()"
  }, {
    "method": "cursorDevice.isExpanded",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.isExpanded()"
  }, {
    "method": "cursorDevice.isExpanded.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isExpanded().set(boolean)"
  }, {
    "method": "cursorDevice.isExpanded.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isExpanded().toggle()"
  }, {
    "method": "cursorDevice.isExpanded.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isExpanded().get()"
  }, {
    "method": "cursorDevice.isExpanded.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.isExpanded().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.isExpanded.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isExpanded().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isExpanded.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isExpanded().isSubscribed()"
  }, {
    "method": "cursorDevice.isExpanded.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isExpanded().subscribe()"
  }, {
    "method": "cursorDevice.isExpanded.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isExpanded().unsubscribe()"
  }, {
    "method": "cursorDevice.isNested",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.isNested()"
  }, {
    "method": "cursorDevice.isNested.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isNested().get()"
  }, {
    "method": "cursorDevice.isNested.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.isNested().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.isNested.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isNested().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isNested.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isNested().isSubscribed()"
  }, {
    "method": "cursorDevice.isNested.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isNested().subscribe()"
  }, {
    "method": "cursorDevice.isNested.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isNested().unsubscribe()"
  }, {
    "method": "cursorDevice.isPlugin",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.isPlugin()"
  }, {
    "method": "cursorDevice.isPlugin.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isPlugin().get()"
  }, {
    "method": "cursorDevice.isPlugin.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.isPlugin().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.isPlugin.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isPlugin().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isPlugin.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isPlugin().isSubscribed()"
  }, {
    "method": "cursorDevice.isPlugin.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isPlugin().subscribe()"
  }, {
    "method": "cursorDevice.isPlugin.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isPlugin().unsubscribe()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.isRemoteControlsSectionVisible()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isRemoteControlsSectionVisible().set(boolean)"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isRemoteControlsSectionVisible().toggle()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isRemoteControlsSectionVisible().get()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.isRemoteControlsSectionVisible().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isRemoteControlsSectionVisible().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isRemoteControlsSectionVisible().isSubscribed()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isRemoteControlsSectionVisible().subscribe()"
  }, {
    "method": "cursorDevice.isRemoteControlsSectionVisible.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isRemoteControlsSectionVisible().unsubscribe()"
  }, {
    "method": "cursorDevice.sampleName",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.sampleName()"
  }, {
    "method": "cursorDevice.sampleName.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.sampleName().get()"
  }, {
    "method": "cursorDevice.sampleName.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.sampleName().getLimited(Number)"
  }, {
    "method": "cursorDevice.sampleName.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.sampleName().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.sampleName.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.sampleName().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.sampleName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.sampleName().isSubscribed()"
  }, {
    "method": "cursorDevice.sampleName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.sampleName().subscribe()"
  }, {
    "method": "cursorDevice.sampleName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.sampleName().unsubscribe()"
  }, {
    "method": "cursorDevice.slotNames",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.slotNames()"
  }, {
    "method": "cursorDevice.slotNames.get",
    "params": [],
    "result": "String[]",
    "expression": "String[] cursorDevice.slotNames().get()"
  }, {
    "method": "cursorDevice.slotNames.get",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorDevice.slotNames().get(Number)"
  }, {
    "method": "cursorDevice.slotNames.isEmpty",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.slotNames().isEmpty()"
  }, {
    "method": "cursorDevice.slotNames.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.slotNames().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.slotNames.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.slotNames().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.slotNames.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.slotNames().isSubscribed()"
  }, {
    "method": "cursorDevice.slotNames.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.slotNames().subscribe()"
  }, {
    "method": "cursorDevice.slotNames.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.slotNames().unsubscribe()"
  }, {
    "method": "cursorDevice.isEnabled",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.isEnabled()"
  }, {
    "method": "cursorDevice.isEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isEnabled().set(boolean)"
  }, {
    "method": "cursorDevice.isEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isEnabled().toggle()"
  }, {
    "method": "cursorDevice.isEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isEnabled().get()"
  }, {
    "method": "cursorDevice.isEnabled.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.isEnabled().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.isEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isEnabled().isSubscribed()"
  }, {
    "method": "cursorDevice.isEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isEnabled().subscribe()"
  }, {
    "method": "cursorDevice.isEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isEnabled().unsubscribe()"
  }, {
    "method": "cursorDevice.isWindowOpen",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.isWindowOpen()"
  }, {
    "method": "cursorDevice.isWindowOpen.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isWindowOpen().set(boolean)"
  }, {
    "method": "cursorDevice.isWindowOpen.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isWindowOpen().toggle()"
  }, {
    "method": "cursorDevice.isWindowOpen.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isWindowOpen().get()"
  }, {
    "method": "cursorDevice.isWindowOpen.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.isWindowOpen().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.isWindowOpen.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isWindowOpen().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isWindowOpen.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isWindowOpen().isSubscribed()"
  }, {
    "method": "cursorDevice.isWindowOpen.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isWindowOpen().subscribe()"
  }, {
    "method": "cursorDevice.isWindowOpen.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isWindowOpen().unsubscribe()"
  }, {
    "method": "cursorDevice.deviceChain.name",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.deviceChain().name()"
  }, {
    "method": "cursorDevice.deviceChain.name.set",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().name().set(String)"
  }, {
    "method": "cursorDevice.deviceChain.name.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.deviceChain().name().get()"
  }, {
    "method": "cursorDevice.deviceChain.name.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.deviceChain().name().getLimited(Number)"
  }, {
    "method": "cursorDevice.deviceChain.name.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().name().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.deviceChain.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.deviceChain.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.deviceChain().name().isSubscribed()"
  }, {
    "method": "cursorDevice.deviceChain.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().name().subscribe()"
  }, {
    "method": "cursorDevice.deviceChain.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().name().unsubscribe()"
  }, {
    "method": "cursorDevice.deviceChain.selectInEditor",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().selectInEditor()"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.deviceChain.startOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().startOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.deviceChain.addIsSelectedInEditorObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().addIsSelectedInEditorObserver(Object)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.deviceChain.endOfDeviceChainInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().endOfDeviceChainInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.deviceChain.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.deviceChain.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.deviceChain().isSubscribed()"
  }, {
    "method": "cursorDevice.deviceChain.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().subscribe()"
  }, {
    "method": "cursorDevice.deviceChain.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.deviceChain().unsubscribe()"
  }, {
    "method": "cursorDevice.presetCategory",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.presetCategory()"
  }, {
    "method": "cursorDevice.presetCategory.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.presetCategory().get()"
  }, {
    "method": "cursorDevice.presetCategory.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.presetCategory().getLimited(Number)"
  }, {
    "method": "cursorDevice.presetCategory.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.presetCategory().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.presetCategory.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.presetCategory().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.presetCategory.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.presetCategory().isSubscribed()"
  }, {
    "method": "cursorDevice.presetCategory.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.presetCategory().subscribe()"
  }, {
    "method": "cursorDevice.presetCategory.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.presetCategory().unsubscribe()"
  }, {
    "method": "cursorDevice.presetCreator",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.presetCreator()"
  }, {
    "method": "cursorDevice.presetCreator.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.presetCreator().get()"
  }, {
    "method": "cursorDevice.presetCreator.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.presetCreator().getLimited(Number)"
  }, {
    "method": "cursorDevice.presetCreator.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.presetCreator().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.presetCreator.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.presetCreator().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.presetCreator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.presetCreator().isSubscribed()"
  }, {
    "method": "cursorDevice.presetCreator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.presetCreator().subscribe()"
  }, {
    "method": "cursorDevice.presetCreator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.presetCreator().unsubscribe()"
  }, {
    "method": "cursorDevice.presetName",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.presetName()"
  }, {
    "method": "cursorDevice.presetName.get",
    "params": [],
    "result": "String",
    "expression": "String cursorDevice.presetName().get()"
  }, {
    "method": "cursorDevice.presetName.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorDevice.presetName().getLimited(Number)"
  }, {
    "method": "cursorDevice.presetName.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.presetName().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.presetName.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.presetName().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.presetName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.presetName().isSubscribed()"
  }, {
    "method": "cursorDevice.presetName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.presetName().subscribe()"
  }, {
    "method": "cursorDevice.presetName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.presetName().unsubscribe()"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.replaceDeviceInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.replaceDeviceInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.copyTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().copyTracks(Object[])"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.copySlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().copySlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.insertFile",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().insertFile(String)"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.insertVST2Device",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().insertVST2Device(Number)"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.insertVST3Device",
    "params": ["String"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().insertVST3Device(String)"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.moveDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().moveDevices(Object[])"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.moveSlotsOrScenes",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().moveSlotsOrScenes(Object[])"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.moveTracks",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().moveTracks(Object[])"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.copyDevices",
    "params": ["Object[]"],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().copyDevices(Object[])"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.paste",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().paste()"
  }, {
    "method": "cursorDevice.beforeDeviceInsertionPoint.browse",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.beforeDeviceInsertionPoint().browse()"
  }, {
    "method": "cursorDevice.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isSubscribed()"
  }, {
    "method": "cursorDevice.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.subscribe()"
  }, {
    "method": "cursorDevice.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.unsubscribe()"
  }, {
    "method": "cursorDevice.isPinned",
    "params": [],
    "result": "Object",
    "expression": "Object cursorDevice.isPinned()"
  }, {
    "method": "cursorDevice.isPinned.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isPinned().set(boolean)"
  }, {
    "method": "cursorDevice.isPinned.toggle",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isPinned().toggle()"
  }, {
    "method": "cursorDevice.isPinned.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isPinned().get()"
  }, {
    "method": "cursorDevice.isPinned.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorDevice.isPinned().addValueObserver(Object)"
  }, {
    "method": "cursorDevice.isPinned.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorDevice.isPinned().setIsSubscribed(boolean)"
  }, {
    "method": "cursorDevice.isPinned.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorDevice.isPinned().isSubscribed()"
  }, {
    "method": "cursorDevice.isPinned.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isPinned().subscribe()"
  }, {
    "method": "cursorDevice.isPinned.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorDevice.isPinned().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.pageCount",
    "params": [],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.pageCount()"
  }, {
    "method": "cursorRemoteControlsPage.pageCount.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.pageCount().get()"
  }, {
    "method": "cursorRemoteControlsPage.pageCount.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageCount().addValueObserver(Object, Number)"
  }, {
    "method": "cursorRemoteControlsPage.pageCount.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageCount().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.pageCount.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageCount().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.pageCount.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.pageCount().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.pageCount.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageCount().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.pageCount.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageCount().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.selectNextPage",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectNextPage(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.selectPreviousPage",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectPreviousPage(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.pageNames",
    "params": [],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.pageNames()"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.get",
    "params": [],
    "result": "String[]",
    "expression": "String[] cursorRemoteControlsPage.pageNames().get()"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.get",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.pageNames().get(Number)"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.isEmpty",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.pageNames().isEmpty()"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageNames().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageNames().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.pageNames().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageNames().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.pageNames.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.pageNames().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex",
    "params": [],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.selectedPageIndex()"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.set",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectedPageIndex().set(Number)"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.inc",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectedPageIndex().inc(Number)"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.get",
    "params": [],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.selectedPageIndex().get()"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.addValueObserver",
    "params": ["Object", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectedPageIndex().addValueObserver(Object, Number)"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectedPageIndex().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectedPageIndex().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.selectedPageIndex().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectedPageIndex().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.selectedPageIndex.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectedPageIndex().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.selectNextPageMatching",
    "params": ["String", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectNextPageMatching(String, boolean)"
  }, {
    "method": "cursorRemoteControlsPage.selectPreviousPageMatching",
    "params": ["String", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectPreviousPageMatching(String, boolean)"
  }, {
    "method": "cursorRemoteControlsPage.hasNext",
    "params": [],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.hasNext()"
  }, {
    "method": "cursorRemoteControlsPage.hasNext.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.hasNext().get()"
  }, {
    "method": "cursorRemoteControlsPage.hasNext.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasNext().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.hasNext.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasNext().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.hasNext.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.hasNext().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.hasNext.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasNext().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.hasNext.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasNext().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.hasPrevious",
    "params": [],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.hasPrevious()"
  }, {
    "method": "cursorRemoteControlsPage.hasPrevious.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.hasPrevious().get()"
  }, {
    "method": "cursorRemoteControlsPage.hasPrevious.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasPrevious().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.hasPrevious.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasPrevious().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.hasPrevious.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.hasPrevious().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.hasPrevious.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasPrevious().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.hasPrevious.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.hasPrevious().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.selectNext",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectNext()"
  }, {
    "method": "cursorRemoteControlsPage.selectPrevious",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectPrevious()"
  }, {
    "method": "cursorRemoteControlsPage.selectFirst",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectFirst()"
  }, {
    "method": "cursorRemoteControlsPage.selectLast",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.selectLast()"
  }, {
    "method": "cursorRemoteControlsPage.getName",
    "params": [],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getName()"
  }, {
    "method": "cursorRemoteControlsPage.getName.get",
    "params": [],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getName().get()"
  }, {
    "method": "cursorRemoteControlsPage.getName.getLimited",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getName().getLimited(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getName.addValueObserver",
    "params": ["Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getName().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getName.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getName().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getName().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getName().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getName().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getParameter(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getParameter(Number).name()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.set",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).name().set(String)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).name().get()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).name().getLimited(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).name().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).name().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getParameter(Number).name().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).name().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.name.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).name().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getParameter(Number).value()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().set(Number, Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().set(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.inc",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().inc(Number, Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().inc(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.incRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().incRaw(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.setImmediately",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().setImmediately(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.setRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().setRaw(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.getParameter(Number).value().get()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().addRawValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.getParameter(Number).value().getRaw()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().addValueObserver(Number, Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getParameter(Number).value().displayedValue()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).value().displayedValue().get()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).value().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getParameter(Number).value().displayedValue().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().displayedValue().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().displayedValue().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getParameter(Number).value().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.value.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).value().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.reset",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).reset()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getParameter(Number).modulatedValue()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.getParameter(Number).modulatedValue().get()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().addRawValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.getParameter(Number).modulatedValue().getRaw()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().addValueObserver(Number, Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue().get()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue().getLimited(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getParameter(Number).modulatedValue().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.modulatedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).modulatedValue().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.restoreAutomationControl",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).restoreAutomationControl()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.touch",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).touch(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.setIndication",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).setIndication(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.setLabel",
    "params": ["Number", "String"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).setLabel(String)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getParameter(Number).isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.set",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).set(Number, Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.set",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).set(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.inc",
    "params": ["Number", "Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).inc(Number, Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.inc",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).inc(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.incRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).incRaw(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.setImmediately",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).setImmediately(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.setRaw",
    "params": ["Number", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).setRaw(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.get",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.getParameter(Number).get()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.addRawValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).addRawValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.getRaw",
    "params": ["Number"],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.getParameter(Number).getRaw()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.addValueObserver",
    "params": ["Number", "Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).addValueObserver(Number, Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue",
    "params": ["Number"],
    "result": "Object",
    "expression": "Object cursorRemoteControlsPage.getParameter(Number).displayedValue()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue.get",
    "params": ["Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).displayedValue().get()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue.getLimited",
    "params": ["Number", "Number"],
    "result": "String",
    "expression": "String cursorRemoteControlsPage.getParameter(Number).displayedValue().getLimited(Number)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).displayedValue().addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue.setIsSubscribed",
    "params": ["Number", "boolean"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue.isSubscribed",
    "params": ["Number"],
    "result": "boolean",
    "expression": "boolean cursorRemoteControlsPage.getParameter(Number).displayedValue().isSubscribed()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue.subscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).displayedValue().subscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.displayedValue.unsubscribe",
    "params": ["Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).displayedValue().unsubscribe()"
  }, {
    "method": "cursorRemoteControlsPage.getParameter.addValueObserver",
    "params": ["Number", "Object"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.getParameter(Number).addValueObserver(Object)"
  }, {
    "method": "cursorRemoteControlsPage.getParameterCount",
    "params": [],
    "result": "Number",
    "expression": "Number cursorRemoteControlsPage.getParameterCount()"
  }, {
    "method": "cursorRemoteControlsPage.setHardwareLayout",
    "params": ["String", "Number"],
    "result": "void",
    "expression": "void cursorRemoteControlsPage.setHardwareLayout(String, Number)"
  }],
  "events": [{
    "event": "rpc.log"
  }, {
    "event": "application.displayProfile"
  }, {
    "event": "application.hasActiveEngine"
  }, {
    "event": "application.panelLayout"
  }, {
    "event": "application.projectName"
  }, {
    "event": "transport.automationWriteMode"
  }, {
    "event": "transport.clipLauncherPostRecordingAction"
  }, {
    "event": "transport.getClipLauncherPostRecordingTimeOffset"
  }, {
    "event": "transport.isArrangerAutomationWriteEnabled"
  }, {
    "event": "transport.isArrangerOverdubEnabled"
  }, {
    "event": "transport.isAutomationOverrideActive"
  }, {
    "event": "transport.isMetronomeAudibleDuringPreRoll"
  }, {
    "event": "transport.isMetronomeTickPlaybackEnabled"
  }, {
    "event": "transport.isPunchInEnabled"
  }, {
    "event": "transport.isPunchOutEnabled"
  }, {
    "event": "transport.metronomeVolume"
  }, {
    "event": "transport.metronomeVolume.displayedValue"
  }, {
    "event": "transport.preRoll"
  }, {
    "event": "transport.timeSignature"
  }, {
    "event": "transport.timeSignature.denominator"
  }, {
    "event": "transport.timeSignature.numerator"
  }, {
    "event": "transport.timeSignature.ticks"
  }, {
    "event": "transport.tempo.name"
  }, {
    "event": "transport.tempo.value"
  }, {
    "event": "transport.tempo.value.displayedValue"
  }, {
    "event": "transport.tempo.modulatedValue"
  }, {
    "event": "transport.tempo.modulatedValue.displayedValue"
  }, {
    "event": "transport.tempo.displayedValue"
  }, {
    "event": "transport.crossfade.name"
  }, {
    "event": "transport.crossfade.value"
  }, {
    "event": "transport.crossfade.value.displayedValue"
  }, {
    "event": "transport.crossfade.modulatedValue"
  }, {
    "event": "transport.crossfade.modulatedValue.displayedValue"
  }, {
    "event": "transport.crossfade.displayedValue"
  }, {
    "event": "transport.isArrangerRecordEnabled"
  }, {
    "event": "transport.isClipLauncherAutomationWriteEnabled"
  }, {
    "event": "transport.isClipLauncherOverdubEnabled"
  }, {
    "event": "transport.isMetronomeEnabled"
  }, {
    "event": "transport.isPlaying"
  }, {
    "event": "transport.getInPosition"
  }, {
    "event": "transport.getOutPosition"
  }, {
    "event": "transport.isArrangerLoopEnabled"
  }, {
    "event": "transport.getPosition"
  }, {
    "event": "cursorTrack.color"
  }, {
    "event": "cursorTrack.isActivated"
  }, {
    "event": "cursorTrack.pan.name"
  }, {
    "event": "cursorTrack.pan.value"
  }, {
    "event": "cursorTrack.pan.value.displayedValue"
  }, {
    "event": "cursorTrack.pan.modulatedValue"
  }, {
    "event": "cursorTrack.pan.modulatedValue.displayedValue"
  }, {
    "event": "cursorTrack.pan.displayedValue"
  }, {
    "event": "cursorTrack.solo"
  }, {
    "event": "cursorTrack.mute"
  }, {
    "event": "cursorTrack.volume.name"
  }, {
    "event": "cursorTrack.volume.value"
  }, {
    "event": "cursorTrack.volume.value.displayedValue"
  }, {
    "event": "cursorTrack.volume.modulatedValue"
  }, {
    "event": "cursorTrack.volume.modulatedValue.displayedValue"
  }, {
    "event": "cursorTrack.volume.displayedValue"
  }, {
    "event": "cursorTrack.sendBank.cursorIndex"
  }, {
    "event": "cursorTrack.sendBank.getItemAt.sendChannelColor",
    "bankDimension": [4]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.name",
    "bankDimension": [4]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.value",
    "bankDimension": [4]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.value.displayedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.modulatedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.modulatedValue.displayedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorTrack.sendBank.getItemAt.displayedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorTrack.sendBank.itemCount"
  }, {
    "event": "cursorTrack.sendBank.scrollPosition"
  }, {
    "event": "cursorTrack.sendBank.canScrollBackwards"
  }, {
    "event": "cursorTrack.sendBank.canScrollForwards"
  }, {
    "event": "cursorTrack.playingNotes"
  }, {
    "event": "cursorTrack.name"
  }, {
    "event": "cursorTrack.hasNext"
  }, {
    "event": "cursorTrack.hasPrevious"
  }, {
    "event": "cursorTrack.isPinned"
  }, {
    "event": "cursorTrack.position"
  }, {
    "event": "cursorTrack.monitor"
  }, {
    "event": "cursorTrack.autoMonitor"
  }, {
    "event": "cursorTrack.canHoldAudioData"
  }, {
    "event": "cursorTrack.canHoldNoteData"
  }, {
    "event": "cursorTrack.sourceSelector.hasAudioInputSelected"
  }, {
    "event": "cursorTrack.sourceSelector.hasNoteInputSelected"
  }, {
    "event": "cursorTrack.trackType"
  }, {
    "event": "cursorTrack.arm"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.isMasterTrackContentShownOnTrackGroups"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.cursorIndex"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.color",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.hasContent",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaybackQueued",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isPlaying",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecording",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isRecordingQueued",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isStopQueued",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.isSelected",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.name",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.getItemAt.sceneIndex",
    "bankDimension": [8]
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.itemCount"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.scrollPosition"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.canScrollBackwards"
  }, {
    "event": "cursorTrack.clipLauncherSlotBank.canScrollForwards"
  }, {
    "event": "cursorTrack.crossFadeMode"
  }, {
    "event": "cursorTrack.isGroup"
  }, {
    "event": "cursorTrack.isStopped"
  }, {
    "event": "cursorTrack.isQueuedForStop"
  }, {
    "event": "cursorDevice.channel.color"
  }, {
    "event": "cursorDevice.channel.isActivated"
  }, {
    "event": "cursorDevice.channel.pan.name"
  }, {
    "event": "cursorDevice.channel.pan.value"
  }, {
    "event": "cursorDevice.channel.pan.value.displayedValue"
  }, {
    "event": "cursorDevice.channel.pan.modulatedValue"
  }, {
    "event": "cursorDevice.channel.pan.modulatedValue.displayedValue"
  }, {
    "event": "cursorDevice.channel.pan.displayedValue"
  }, {
    "event": "cursorDevice.channel.solo"
  }, {
    "event": "cursorDevice.channel.mute"
  }, {
    "event": "cursorDevice.channel.volume.name"
  }, {
    "event": "cursorDevice.channel.volume.value"
  }, {
    "event": "cursorDevice.channel.volume.value.displayedValue"
  }, {
    "event": "cursorDevice.channel.volume.modulatedValue"
  }, {
    "event": "cursorDevice.channel.volume.modulatedValue.displayedValue"
  }, {
    "event": "cursorDevice.channel.volume.displayedValue"
  }, {
    "event": "cursorDevice.channel.sendBank.cursorIndex"
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.sendChannelColor",
    "bankDimension": [4]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.name",
    "bankDimension": [4]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.value",
    "bankDimension": [4]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.value.displayedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.modulatedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.modulatedValue.displayedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorDevice.channel.sendBank.getItemAt.displayedValue",
    "bankDimension": [4]
  }, {
    "event": "cursorDevice.channel.sendBank.itemCount"
  }, {
    "event": "cursorDevice.channel.sendBank.scrollPosition"
  }, {
    "event": "cursorDevice.channel.sendBank.canScrollBackwards"
  }, {
    "event": "cursorDevice.channel.sendBank.canScrollForwards"
  }, {
    "event": "cursorDevice.channel.playingNotes"
  }, {
    "event": "cursorDevice.channel.name"
  }, {
    "event": "cursorDevice.hasNext"
  }, {
    "event": "cursorDevice.hasPrevious"
  }, {
    "event": "cursorDevice.name"
  }, {
    "event": "cursorDevice.position"
  }, {
    "event": "cursorDevice.getCursorSlot.name"
  }, {
    "event": "cursorDevice.hasDrumPads"
  }, {
    "event": "cursorDevice.hasLayers"
  }, {
    "event": "cursorDevice.hasSlots"
  }, {
    "event": "cursorDevice.isExpanded"
  }, {
    "event": "cursorDevice.isNested"
  }, {
    "event": "cursorDevice.isPlugin"
  }, {
    "event": "cursorDevice.isRemoteControlsSectionVisible"
  }, {
    "event": "cursorDevice.sampleName"
  }, {
    "event": "cursorDevice.slotNames"
  }, {
    "event": "cursorDevice.isEnabled"
  }, {
    "event": "cursorDevice.isWindowOpen"
  }, {
    "event": "cursorDevice.deviceChain.name"
  }, {
    "event": "cursorDevice.presetCategory"
  }, {
    "event": "cursorDevice.presetCreator"
  }, {
    "event": "cursorDevice.presetName"
  }, {
    "event": "cursorDevice.isPinned"
  }, {
    "event": "cursorRemoteControlsPage.pageCount"
  }, {
    "event": "cursorRemoteControlsPage.pageNames"
  }, {
    "event": "cursorRemoteControlsPage.selectedPageIndex"
  }, {
    "event": "cursorRemoteControlsPage.hasNext"
  }, {
    "event": "cursorRemoteControlsPage.hasPrevious"
  }, {
    "event": "cursorRemoteControlsPage.getName"
  }, {
    "event": "cursorRemoteControlsPage.getParameter.name",
    "bankDimension": [8]
  }, {
    "event": "cursorRemoteControlsPage.getParameter.value",
    "bankDimension": [8]
  }, {
    "event": "cursorRemoteControlsPage.getParameter.value.displayedValue",
    "bankDimension": [8]
  }, {
    "event": "cursorRemoteControlsPage.getParameter.modulatedValue",
    "bankDimension": [8]
  }, {
    "event": "cursorRemoteControlsPage.getParameter.modulatedValue.displayedValue",
    "bankDimension": [8]
  }, {
    "event": "cursorRemoteControlsPage.getParameter.displayedValue",
    "bankDimension": [8]
  }]
}