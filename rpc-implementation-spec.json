{
  "reportedOn": "Jul 29, 2018 2:01:22 PM",
  "host": {
    "apiVersion": 7,
    "product": "Bitwig Studio",
    "vendor": "Bitwig",
    "version": "2.4 Beta 2",
    "platformType": "MAC"
  },
  "extension": {
    "name": "WebSocket RPC",
    "author": "hogehoge",
    "version": "snapshot",
    "requiredApiVersion": 7
  },
  "modules": [{
    "name": "test",
    "methods": [{
      "method": "test.concat",
      "params": ["Object"],
      "result": "String",
      "expression": "String test.concat(Object)"
    }, {
      "method": "test.concat",
      "params": ["String[]"],
      "result": "String",
      "expression": "String test.concat(String[])"
    }, {
      "method": "test.concat",
      "params": ["String", "String"],
      "result": "String",
      "expression": "String test.concat(String, String)"
    }, {
      "method": "test.consume",
      "params": ["Number"],
      "result": "void",
      "expression": "void test.consume(Number)"
    }, {
      "method": "test.consume",
      "params": ["Number[]"],
      "result": "void",
      "expression": "void test.consume(Number[])"
    }, {
      "method": "test.consume",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void test.consume(Number, Number)"
    }, {
      "method": "test.consume",
      "params": ["Number", "Number", "Number"],
      "result": "void",
      "expression": "void test.consume(Number, Number, Number)"
    }, {
      "method": "test.echo",
      "params": ["String"],
      "result": "String",
      "expression": "String test.echo(String)"
    }, {
      "method": "test.hello",
      "params": [],
      "result": "String",
      "expression": "String test.hello()"
    }, {
      "method": "test.nop",
      "params": [],
      "result": "void",
      "expression": "void test.nop()"
    }, {
      "method": "test.repeat",
      "params": ["Object"],
      "result": "String",
      "expression": "String test.repeat(Object)"
    }, {
      "method": "test.repeat",
      "params": ["String", "Number"],
      "result": "String",
      "expression": "String test.repeat(String, Number)"
    }, {
      "method": "test.sum",
      "params": ["Object"],
      "result": "Number",
      "expression": "Number test.sum(Object)"
    }, {
      "method": "test.sum",
      "params": ["Number[]"],
      "result": "Number",
      "expression": "Number test.sum(Number[])"
    }, {
      "method": "test.sum",
      "params": ["Number", "Number"],
      "result": "Number",
      "expression": "Number test.sum(Number, Number)"
    }, {
      "method": "test.sum",
      "params": ["Number", "Number", "Number"],
      "result": "Number",
      "expression": "Number test.sum(Number, Number, Number)"
    }],
    "events": []
  }, {
    "name": "rpc",
    "methods": [{
      "method": "rpc.broadcast",
      "params": ["String", "Object[]"],
      "result": "void",
      "expression": "void rpc.broadcast(String, Object[])"
    }, {
      "method": "rpc.echo",
      "params": ["String"],
      "result": "String",
      "expression": "String rpc.echo(String)"
    }, {
      "method": "rpc.log",
      "params": [],
      "result": "Object",
      "expression": "Object rpc.log()"
    }, {
      "method": "rpc.log.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean rpc.log().isSubscribed()"
    }, {
      "method": "rpc.log.markInterested",
      "params": [],
      "result": "void",
      "expression": "void rpc.log().markInterested()"
    }, {
      "method": "rpc.log.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void rpc.log().setIsSubscribed(boolean)"
    }, {
      "method": "rpc.log.subscribe",
      "params": [],
      "result": "void",
      "expression": "void rpc.log().subscribe()"
    }, {
      "method": "rpc.log.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void rpc.log().unsubscribe()"
    }, {
      "method": "rpc.nextTick",
      "params": [],
      "result": "void",
      "expression": "void rpc.nextTick()"
    }, {
      "method": "rpc.nextTick",
      "params": ["Number"],
      "result": "void",
      "expression": "void rpc.nextTick(Number)"
    }, {
      "method": "rpc.off",
      "params": ["String[]"],
      "result": "Object",
      "expression": "Object rpc.off(String[])"
    }, {
      "method": "rpc.on",
      "params": ["String[]"],
      "result": "Object",
      "expression": "Object rpc.on(String[])"
    }, {
      "method": "rpc.once",
      "params": ["String[]"],
      "result": "Object",
      "expression": "Object rpc.once(String[])"
    }, {
      "method": "rpc.report",
      "params": [],
      "result": "Object",
      "expression": "Object rpc.report()"
    }],
    "events": [{
      "event": "rpc.log"
    }]
  }, {
    "name": "transport",
    "methods": [{
      "method": "transport.automationWriteMode",
      "params": [],
      "result": "Object",
      "expression": "Object transport.automationWriteMode()"
    }, {
      "method": "transport.automationWriteMode.get",
      "params": [],
      "result": "String",
      "expression": "String transport.automationWriteMode().get()"
    }, {
      "method": "transport.automationWriteMode.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.automationWriteMode().isSubscribed()"
    }, {
      "method": "transport.automationWriteMode.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.automationWriteMode().markInterested()"
    }, {
      "method": "transport.automationWriteMode.set",
      "params": ["String"],
      "result": "void",
      "expression": "void transport.automationWriteMode().set(String)"
    }, {
      "method": "transport.automationWriteMode.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.automationWriteMode().setIsSubscribed(boolean)"
    }, {
      "method": "transport.automationWriteMode.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.automationWriteMode().subscribe()"
    }, {
      "method": "transport.automationWriteMode.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.automationWriteMode().unsubscribe()"
    }, {
      "method": "transport.clipLauncherPostRecordingAction",
      "params": [],
      "result": "Object",
      "expression": "Object transport.clipLauncherPostRecordingAction()"
    }, {
      "method": "transport.clipLauncherPostRecordingAction.get",
      "params": [],
      "result": "String",
      "expression": "String transport.clipLauncherPostRecordingAction().get()"
    }, {
      "method": "transport.clipLauncherPostRecordingAction.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.clipLauncherPostRecordingAction().isSubscribed()"
    }, {
      "method": "transport.clipLauncherPostRecordingAction.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.clipLauncherPostRecordingAction().markInterested()"
    }, {
      "method": "transport.clipLauncherPostRecordingAction.set",
      "params": ["String"],
      "result": "void",
      "expression": "void transport.clipLauncherPostRecordingAction().set(String)"
    }, {
      "method": "transport.clipLauncherPostRecordingAction.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.clipLauncherPostRecordingAction().setIsSubscribed(boolean)"
    }, {
      "method": "transport.clipLauncherPostRecordingAction.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.clipLauncherPostRecordingAction().subscribe()"
    }, {
      "method": "transport.clipLauncherPostRecordingAction.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.clipLauncherPostRecordingAction().unsubscribe()"
    }, {
      "method": "transport.crossfade",
      "params": [],
      "result": "Object",
      "expression": "Object transport.crossfade()"
    }, {
      "method": "transport.crossfade.displayedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.crossfade().displayedValue()"
    }, {
      "method": "transport.crossfade.displayedValue.get",
      "params": [],
      "result": "String",
      "expression": "String transport.crossfade().displayedValue().get()"
    }, {
      "method": "transport.crossfade.displayedValue.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.crossfade().displayedValue().getLimited(Number)"
    }, {
      "method": "transport.crossfade.displayedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.crossfade().displayedValue().isSubscribed()"
    }, {
      "method": "transport.crossfade.displayedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().displayedValue().markInterested()"
    }, {
      "method": "transport.crossfade.displayedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().displayedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.crossfade.displayedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().displayedValue().subscribe()"
    }, {
      "method": "transport.crossfade.displayedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().displayedValue().unsubscribe()"
    }, {
      "method": "transport.crossfade.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.crossfade().get()"
    }, {
      "method": "transport.crossfade.getRaw",
      "params": [],
      "result": "Number",
      "expression": "Number transport.crossfade().getRaw()"
    }, {
      "method": "transport.crossfade.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().inc(Number)"
    }, {
      "method": "transport.crossfade.inc",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.crossfade().inc(Number, Number)"
    }, {
      "method": "transport.crossfade.incRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().incRaw(Number)"
    }, {
      "method": "transport.crossfade.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.crossfade().isSubscribed()"
    }, {
      "method": "transport.crossfade.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().markInterested()"
    }, {
      "method": "transport.crossfade.modulatedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.crossfade().modulatedValue()"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.crossfade().modulatedValue().displayedValue()"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue.get",
      "params": [],
      "result": "String",
      "expression": "String transport.crossfade().modulatedValue().displayedValue().get()"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.crossfade().modulatedValue().displayedValue().getLimited(Number)"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.crossfade().modulatedValue().displayedValue().isSubscribed()"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().displayedValue().markInterested()"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().displayedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().displayedValue().subscribe()"
    }, {
      "method": "transport.crossfade.modulatedValue.displayedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().displayedValue().unsubscribe()"
    }, {
      "method": "transport.crossfade.modulatedValue.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.crossfade().modulatedValue().get()"
    }, {
      "method": "transport.crossfade.modulatedValue.getRaw",
      "params": [],
      "result": "Number",
      "expression": "Number transport.crossfade().modulatedValue().getRaw()"
    }, {
      "method": "transport.crossfade.modulatedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.crossfade().modulatedValue().isSubscribed()"
    }, {
      "method": "transport.crossfade.modulatedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().markInterested()"
    }, {
      "method": "transport.crossfade.modulatedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.crossfade.modulatedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().subscribe()"
    }, {
      "method": "transport.crossfade.modulatedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().modulatedValue().unsubscribe()"
    }, {
      "method": "transport.crossfade.name",
      "params": [],
      "result": "Object",
      "expression": "Object transport.crossfade().name()"
    }, {
      "method": "transport.crossfade.name.get",
      "params": [],
      "result": "String",
      "expression": "String transport.crossfade().name().get()"
    }, {
      "method": "transport.crossfade.name.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.crossfade().name().getLimited(Number)"
    }, {
      "method": "transport.crossfade.name.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.crossfade().name().isSubscribed()"
    }, {
      "method": "transport.crossfade.name.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().name().markInterested()"
    }, {
      "method": "transport.crossfade.name.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().name().setIsSubscribed(boolean)"
    }, {
      "method": "transport.crossfade.name.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().name().subscribe()"
    }, {
      "method": "transport.crossfade.name.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().name().unsubscribe()"
    }, {
      "method": "transport.crossfade.reset",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().reset()"
    }, {
      "method": "transport.crossfade.restoreAutomationControl",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().restoreAutomationControl()"
    }, {
      "method": "transport.crossfade.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().set(Number)"
    }, {
      "method": "transport.crossfade.set",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.crossfade().set(Number, Number)"
    }, {
      "method": "transport.crossfade.setImmediately",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().setImmediately(Number)"
    }, {
      "method": "transport.crossfade.setIndication",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().setIndication(boolean)"
    }, {
      "method": "transport.crossfade.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().setIsSubscribed(boolean)"
    }, {
      "method": "transport.crossfade.setLabel",
      "params": ["String"],
      "result": "void",
      "expression": "void transport.crossfade().setLabel(String)"
    }, {
      "method": "transport.crossfade.setRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().setRaw(Number)"
    }, {
      "method": "transport.crossfade.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().subscribe()"
    }, {
      "method": "transport.crossfade.touch",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().touch(boolean)"
    }, {
      "method": "transport.crossfade.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().unsubscribe()"
    }, {
      "method": "transport.crossfade.value",
      "params": [],
      "result": "Object",
      "expression": "Object transport.crossfade().value()"
    }, {
      "method": "transport.crossfade.value.displayedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.crossfade().value().displayedValue()"
    }, {
      "method": "transport.crossfade.value.displayedValue.get",
      "params": [],
      "result": "String",
      "expression": "String transport.crossfade().value().displayedValue().get()"
    }, {
      "method": "transport.crossfade.value.displayedValue.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.crossfade().value().displayedValue().getLimited(Number)"
    }, {
      "method": "transport.crossfade.value.displayedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.crossfade().value().displayedValue().isSubscribed()"
    }, {
      "method": "transport.crossfade.value.displayedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().value().displayedValue().markInterested()"
    }, {
      "method": "transport.crossfade.value.displayedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().value().displayedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.crossfade.value.displayedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().value().displayedValue().subscribe()"
    }, {
      "method": "transport.crossfade.value.displayedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().value().displayedValue().unsubscribe()"
    }, {
      "method": "transport.crossfade.value.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.crossfade().value().get()"
    }, {
      "method": "transport.crossfade.value.getRaw",
      "params": [],
      "result": "Number",
      "expression": "Number transport.crossfade().value().getRaw()"
    }, {
      "method": "transport.crossfade.value.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().value().inc(Number)"
    }, {
      "method": "transport.crossfade.value.inc",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.crossfade().value().inc(Number, Number)"
    }, {
      "method": "transport.crossfade.value.incRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().value().incRaw(Number)"
    }, {
      "method": "transport.crossfade.value.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.crossfade().value().isSubscribed()"
    }, {
      "method": "transport.crossfade.value.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().value().markInterested()"
    }, {
      "method": "transport.crossfade.value.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().value().set(Number)"
    }, {
      "method": "transport.crossfade.value.set",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.crossfade().value().set(Number, Number)"
    }, {
      "method": "transport.crossfade.value.setImmediately",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().value().setImmediately(Number)"
    }, {
      "method": "transport.crossfade.value.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.crossfade().value().setIsSubscribed(boolean)"
    }, {
      "method": "transport.crossfade.value.setRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.crossfade().value().setRaw(Number)"
    }, {
      "method": "transport.crossfade.value.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().value().subscribe()"
    }, {
      "method": "transport.crossfade.value.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.crossfade().value().unsubscribe()"
    }, {
      "method": "transport.fastForward",
      "params": [],
      "result": "void",
      "expression": "void transport.fastForward()"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset",
      "params": [],
      "result": "Object",
      "expression": "Object transport.getClipLauncherPostRecordingTimeOffset()"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.getClipLauncherPostRecordingTimeOffset().get()"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.getFormatted",
      "params": [],
      "result": "String",
      "expression": "String transport.getClipLauncherPostRecordingTimeOffset().getFormatted()"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.getFormatted",
      "params": ["Object"],
      "result": "String",
      "expression": "String transport.getClipLauncherPostRecordingTimeOffset().getFormatted(Object)"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getClipLauncherPostRecordingTimeOffset().inc(Number)"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.getClipLauncherPostRecordingTimeOffset().isSubscribed()"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.getClipLauncherPostRecordingTimeOffset().markInterested()"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getClipLauncherPostRecordingTimeOffset().set(Number)"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.getClipLauncherPostRecordingTimeOffset().setIsSubscribed(boolean)"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getClipLauncherPostRecordingTimeOffset().subscribe()"
    }, {
      "method": "transport.getClipLauncherPostRecordingTimeOffset.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getClipLauncherPostRecordingTimeOffset().unsubscribe()"
    }, {
      "method": "transport.getInPosition",
      "params": [],
      "result": "Object",
      "expression": "Object transport.getInPosition()"
    }, {
      "method": "transport.getInPosition.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.getInPosition().get()"
    }, {
      "method": "transport.getInPosition.getFormatted",
      "params": [],
      "result": "String",
      "expression": "String transport.getInPosition().getFormatted()"
    }, {
      "method": "transport.getInPosition.getFormatted",
      "params": ["Object"],
      "result": "String",
      "expression": "String transport.getInPosition().getFormatted(Object)"
    }, {
      "method": "transport.getInPosition.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getInPosition().inc(Number)"
    }, {
      "method": "transport.getInPosition.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.getInPosition().isSubscribed()"
    }, {
      "method": "transport.getInPosition.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.getInPosition().markInterested()"
    }, {
      "method": "transport.getInPosition.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getInPosition().set(Number)"
    }, {
      "method": "transport.getInPosition.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.getInPosition().setIsSubscribed(boolean)"
    }, {
      "method": "transport.getInPosition.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getInPosition().subscribe()"
    }, {
      "method": "transport.getInPosition.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getInPosition().unsubscribe()"
    }, {
      "method": "transport.getOutPosition",
      "params": [],
      "result": "Object",
      "expression": "Object transport.getOutPosition()"
    }, {
      "method": "transport.getOutPosition.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.getOutPosition().get()"
    }, {
      "method": "transport.getOutPosition.getFormatted",
      "params": [],
      "result": "String",
      "expression": "String transport.getOutPosition().getFormatted()"
    }, {
      "method": "transport.getOutPosition.getFormatted",
      "params": ["Object"],
      "result": "String",
      "expression": "String transport.getOutPosition().getFormatted(Object)"
    }, {
      "method": "transport.getOutPosition.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getOutPosition().inc(Number)"
    }, {
      "method": "transport.getOutPosition.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.getOutPosition().isSubscribed()"
    }, {
      "method": "transport.getOutPosition.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.getOutPosition().markInterested()"
    }, {
      "method": "transport.getOutPosition.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getOutPosition().set(Number)"
    }, {
      "method": "transport.getOutPosition.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.getOutPosition().setIsSubscribed(boolean)"
    }, {
      "method": "transport.getOutPosition.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getOutPosition().subscribe()"
    }, {
      "method": "transport.getOutPosition.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getOutPosition().unsubscribe()"
    }, {
      "method": "transport.getPosition",
      "params": [],
      "result": "Object",
      "expression": "Object transport.getPosition()"
    }, {
      "method": "transport.getPosition.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.getPosition().get()"
    }, {
      "method": "transport.getPosition.getFormatted",
      "params": [],
      "result": "String",
      "expression": "String transport.getPosition().getFormatted()"
    }, {
      "method": "transport.getPosition.getFormatted",
      "params": ["Object"],
      "result": "String",
      "expression": "String transport.getPosition().getFormatted(Object)"
    }, {
      "method": "transport.getPosition.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getPosition().inc(Number)"
    }, {
      "method": "transport.getPosition.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.getPosition().isSubscribed()"
    }, {
      "method": "transport.getPosition.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.getPosition().markInterested()"
    }, {
      "method": "transport.getPosition.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.getPosition().set(Number)"
    }, {
      "method": "transport.getPosition.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.getPosition().setIsSubscribed(boolean)"
    }, {
      "method": "transport.getPosition.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getPosition().subscribe()"
    }, {
      "method": "transport.getPosition.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.getPosition().unsubscribe()"
    }, {
      "method": "transport.incPosition",
      "params": ["Number", "boolean"],
      "result": "void",
      "expression": "void transport.incPosition(Number, boolean)"
    }, {
      "method": "transport.increaseTempo",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.increaseTempo(Number, Number)"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isArrangerAutomationWriteEnabled()"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerAutomationWriteEnabled().get()"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerAutomationWriteEnabled().isSubscribed()"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerAutomationWriteEnabled().markInterested()"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerAutomationWriteEnabled().set(boolean)"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerAutomationWriteEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerAutomationWriteEnabled().subscribe()"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerAutomationWriteEnabled().toggle()"
    }, {
      "method": "transport.isArrangerAutomationWriteEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerAutomationWriteEnabled().unsubscribe()"
    }, {
      "method": "transport.isArrangerLoopEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isArrangerLoopEnabled()"
    }, {
      "method": "transport.isArrangerLoopEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerLoopEnabled().get()"
    }, {
      "method": "transport.isArrangerLoopEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerLoopEnabled().isSubscribed()"
    }, {
      "method": "transport.isArrangerLoopEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerLoopEnabled().markInterested()"
    }, {
      "method": "transport.isArrangerLoopEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerLoopEnabled().set(boolean)"
    }, {
      "method": "transport.isArrangerLoopEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerLoopEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isArrangerLoopEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerLoopEnabled().subscribe()"
    }, {
      "method": "transport.isArrangerLoopEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerLoopEnabled().toggle()"
    }, {
      "method": "transport.isArrangerLoopEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerLoopEnabled().unsubscribe()"
    }, {
      "method": "transport.isArrangerOverdubEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isArrangerOverdubEnabled()"
    }, {
      "method": "transport.isArrangerOverdubEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerOverdubEnabled().get()"
    }, {
      "method": "transport.isArrangerOverdubEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerOverdubEnabled().isSubscribed()"
    }, {
      "method": "transport.isArrangerOverdubEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerOverdubEnabled().markInterested()"
    }, {
      "method": "transport.isArrangerOverdubEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerOverdubEnabled().set(boolean)"
    }, {
      "method": "transport.isArrangerOverdubEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerOverdubEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isArrangerOverdubEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerOverdubEnabled().subscribe()"
    }, {
      "method": "transport.isArrangerOverdubEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerOverdubEnabled().toggle()"
    }, {
      "method": "transport.isArrangerOverdubEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerOverdubEnabled().unsubscribe()"
    }, {
      "method": "transport.isArrangerRecordEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isArrangerRecordEnabled()"
    }, {
      "method": "transport.isArrangerRecordEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerRecordEnabled().get()"
    }, {
      "method": "transport.isArrangerRecordEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isArrangerRecordEnabled().isSubscribed()"
    }, {
      "method": "transport.isArrangerRecordEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerRecordEnabled().markInterested()"
    }, {
      "method": "transport.isArrangerRecordEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerRecordEnabled().set(boolean)"
    }, {
      "method": "transport.isArrangerRecordEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isArrangerRecordEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isArrangerRecordEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerRecordEnabled().subscribe()"
    }, {
      "method": "transport.isArrangerRecordEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerRecordEnabled().toggle()"
    }, {
      "method": "transport.isArrangerRecordEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isArrangerRecordEnabled().unsubscribe()"
    }, {
      "method": "transport.isAutomationOverrideActive",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isAutomationOverrideActive()"
    }, {
      "method": "transport.isAutomationOverrideActive.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isAutomationOverrideActive().get()"
    }, {
      "method": "transport.isAutomationOverrideActive.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isAutomationOverrideActive().isSubscribed()"
    }, {
      "method": "transport.isAutomationOverrideActive.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isAutomationOverrideActive().markInterested()"
    }, {
      "method": "transport.isAutomationOverrideActive.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isAutomationOverrideActive().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isAutomationOverrideActive.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isAutomationOverrideActive().subscribe()"
    }, {
      "method": "transport.isAutomationOverrideActive.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isAutomationOverrideActive().unsubscribe()"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isClipLauncherAutomationWriteEnabled()"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isClipLauncherAutomationWriteEnabled().get()"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isClipLauncherAutomationWriteEnabled().isSubscribed()"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherAutomationWriteEnabled().markInterested()"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isClipLauncherAutomationWriteEnabled().set(boolean)"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isClipLauncherAutomationWriteEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherAutomationWriteEnabled().subscribe()"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherAutomationWriteEnabled().toggle()"
    }, {
      "method": "transport.isClipLauncherAutomationWriteEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherAutomationWriteEnabled().unsubscribe()"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isClipLauncherOverdubEnabled()"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isClipLauncherOverdubEnabled().get()"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isClipLauncherOverdubEnabled().isSubscribed()"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherOverdubEnabled().markInterested()"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isClipLauncherOverdubEnabled().set(boolean)"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isClipLauncherOverdubEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherOverdubEnabled().subscribe()"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherOverdubEnabled().toggle()"
    }, {
      "method": "transport.isClipLauncherOverdubEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isClipLauncherOverdubEnabled().unsubscribe()"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isMetronomeAudibleDuringPreRoll()"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isMetronomeAudibleDuringPreRoll().get()"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isMetronomeAudibleDuringPreRoll().isSubscribed()"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeAudibleDuringPreRoll().markInterested()"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isMetronomeAudibleDuringPreRoll().set(boolean)"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isMetronomeAudibleDuringPreRoll().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeAudibleDuringPreRoll().subscribe()"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeAudibleDuringPreRoll().toggle()"
    }, {
      "method": "transport.isMetronomeAudibleDuringPreRoll.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeAudibleDuringPreRoll().unsubscribe()"
    }, {
      "method": "transport.isMetronomeEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isMetronomeEnabled()"
    }, {
      "method": "transport.isMetronomeEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isMetronomeEnabled().get()"
    }, {
      "method": "transport.isMetronomeEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isMetronomeEnabled().isSubscribed()"
    }, {
      "method": "transport.isMetronomeEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeEnabled().markInterested()"
    }, {
      "method": "transport.isMetronomeEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isMetronomeEnabled().set(boolean)"
    }, {
      "method": "transport.isMetronomeEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isMetronomeEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isMetronomeEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeEnabled().subscribe()"
    }, {
      "method": "transport.isMetronomeEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeEnabled().toggle()"
    }, {
      "method": "transport.isMetronomeEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeEnabled().unsubscribe()"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isMetronomeTickPlaybackEnabled()"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isMetronomeTickPlaybackEnabled().get()"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isMetronomeTickPlaybackEnabled().isSubscribed()"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeTickPlaybackEnabled().markInterested()"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isMetronomeTickPlaybackEnabled().set(boolean)"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isMetronomeTickPlaybackEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeTickPlaybackEnabled().subscribe()"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeTickPlaybackEnabled().toggle()"
    }, {
      "method": "transport.isMetronomeTickPlaybackEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isMetronomeTickPlaybackEnabled().unsubscribe()"
    }, {
      "method": "transport.isPlaying",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isPlaying()"
    }, {
      "method": "transport.isPlaying.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isPlaying().get()"
    }, {
      "method": "transport.isPlaying.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isPlaying().isSubscribed()"
    }, {
      "method": "transport.isPlaying.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isPlaying().markInterested()"
    }, {
      "method": "transport.isPlaying.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isPlaying().set(boolean)"
    }, {
      "method": "transport.isPlaying.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isPlaying().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isPlaying.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isPlaying().subscribe()"
    }, {
      "method": "transport.isPlaying.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isPlaying().toggle()"
    }, {
      "method": "transport.isPlaying.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isPlaying().unsubscribe()"
    }, {
      "method": "transport.isPunchInEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isPunchInEnabled()"
    }, {
      "method": "transport.isPunchInEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isPunchInEnabled().get()"
    }, {
      "method": "transport.isPunchInEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isPunchInEnabled().isSubscribed()"
    }, {
      "method": "transport.isPunchInEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchInEnabled().markInterested()"
    }, {
      "method": "transport.isPunchInEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isPunchInEnabled().set(boolean)"
    }, {
      "method": "transport.isPunchInEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isPunchInEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isPunchInEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchInEnabled().subscribe()"
    }, {
      "method": "transport.isPunchInEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchInEnabled().toggle()"
    }, {
      "method": "transport.isPunchInEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchInEnabled().unsubscribe()"
    }, {
      "method": "transport.isPunchOutEnabled",
      "params": [],
      "result": "Object",
      "expression": "Object transport.isPunchOutEnabled()"
    }, {
      "method": "transport.isPunchOutEnabled.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isPunchOutEnabled().get()"
    }, {
      "method": "transport.isPunchOutEnabled.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isPunchOutEnabled().isSubscribed()"
    }, {
      "method": "transport.isPunchOutEnabled.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchOutEnabled().markInterested()"
    }, {
      "method": "transport.isPunchOutEnabled.set",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isPunchOutEnabled().set(boolean)"
    }, {
      "method": "transport.isPunchOutEnabled.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.isPunchOutEnabled().setIsSubscribed(boolean)"
    }, {
      "method": "transport.isPunchOutEnabled.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchOutEnabled().subscribe()"
    }, {
      "method": "transport.isPunchOutEnabled.toggle",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchOutEnabled().toggle()"
    }, {
      "method": "transport.isPunchOutEnabled.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.isPunchOutEnabled().unsubscribe()"
    }, {
      "method": "transport.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.isSubscribed()"
    }, {
      "method": "transport.metronomeVolume",
      "params": [],
      "result": "Object",
      "expression": "Object transport.metronomeVolume()"
    }, {
      "method": "transport.metronomeVolume.displayedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.metronomeVolume().displayedValue()"
    }, {
      "method": "transport.metronomeVolume.displayedValue.get",
      "params": [],
      "result": "String",
      "expression": "String transport.metronomeVolume().displayedValue().get()"
    }, {
      "method": "transport.metronomeVolume.displayedValue.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.metronomeVolume().displayedValue().getLimited(Number)"
    }, {
      "method": "transport.metronomeVolume.displayedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.metronomeVolume().displayedValue().isSubscribed()"
    }, {
      "method": "transport.metronomeVolume.displayedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.metronomeVolume().displayedValue().markInterested()"
    }, {
      "method": "transport.metronomeVolume.displayedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.metronomeVolume().displayedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.metronomeVolume.displayedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.metronomeVolume().displayedValue().subscribe()"
    }, {
      "method": "transport.metronomeVolume.displayedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.metronomeVolume().displayedValue().unsubscribe()"
    }, {
      "method": "transport.metronomeVolume.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.metronomeVolume().get()"
    }, {
      "method": "transport.metronomeVolume.getRaw",
      "params": [],
      "result": "Number",
      "expression": "Number transport.metronomeVolume().getRaw()"
    }, {
      "method": "transport.metronomeVolume.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.metronomeVolume().inc(Number)"
    }, {
      "method": "transport.metronomeVolume.inc",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.metronomeVolume().inc(Number, Number)"
    }, {
      "method": "transport.metronomeVolume.incRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.metronomeVolume().incRaw(Number)"
    }, {
      "method": "transport.metronomeVolume.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.metronomeVolume().isSubscribed()"
    }, {
      "method": "transport.metronomeVolume.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.metronomeVolume().markInterested()"
    }, {
      "method": "transport.metronomeVolume.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.metronomeVolume().set(Number)"
    }, {
      "method": "transport.metronomeVolume.set",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.metronomeVolume().set(Number, Number)"
    }, {
      "method": "transport.metronomeVolume.setImmediately",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.metronomeVolume().setImmediately(Number)"
    }, {
      "method": "transport.metronomeVolume.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.metronomeVolume().setIsSubscribed(boolean)"
    }, {
      "method": "transport.metronomeVolume.setRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.metronomeVolume().setRaw(Number)"
    }, {
      "method": "transport.metronomeVolume.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.metronomeVolume().subscribe()"
    }, {
      "method": "transport.metronomeVolume.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.metronomeVolume().unsubscribe()"
    }, {
      "method": "transport.play",
      "params": [],
      "result": "void",
      "expression": "void transport.play()"
    }, {
      "method": "transport.preRoll",
      "params": [],
      "result": "Object",
      "expression": "Object transport.preRoll()"
    }, {
      "method": "transport.preRoll.get",
      "params": [],
      "result": "String",
      "expression": "String transport.preRoll().get()"
    }, {
      "method": "transport.preRoll.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.preRoll().isSubscribed()"
    }, {
      "method": "transport.preRoll.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.preRoll().markInterested()"
    }, {
      "method": "transport.preRoll.set",
      "params": ["String"],
      "result": "void",
      "expression": "void transport.preRoll().set(String)"
    }, {
      "method": "transport.preRoll.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.preRoll().setIsSubscribed(boolean)"
    }, {
      "method": "transport.preRoll.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.preRoll().subscribe()"
    }, {
      "method": "transport.preRoll.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.preRoll().unsubscribe()"
    }, {
      "method": "transport.record",
      "params": [],
      "result": "void",
      "expression": "void transport.record()"
    }, {
      "method": "transport.resetAutomationOverrides",
      "params": [],
      "result": "void",
      "expression": "void transport.resetAutomationOverrides()"
    }, {
      "method": "transport.restart",
      "params": [],
      "result": "void",
      "expression": "void transport.restart()"
    }, {
      "method": "transport.returnToArrangement",
      "params": [],
      "result": "void",
      "expression": "void transport.returnToArrangement()"
    }, {
      "method": "transport.rewind",
      "params": [],
      "result": "void",
      "expression": "void transport.rewind()"
    }, {
      "method": "transport.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.setIsSubscribed(boolean)"
    }, {
      "method": "transport.setPosition",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.setPosition(Number)"
    }, {
      "method": "transport.stop",
      "params": [],
      "result": "void",
      "expression": "void transport.stop()"
    }, {
      "method": "transport.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.subscribe()"
    }, {
      "method": "transport.tapTempo",
      "params": [],
      "result": "void",
      "expression": "void transport.tapTempo()"
    }, {
      "method": "transport.tempo",
      "params": [],
      "result": "Object",
      "expression": "Object transport.tempo()"
    }, {
      "method": "transport.tempo.displayedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.tempo().displayedValue()"
    }, {
      "method": "transport.tempo.displayedValue.get",
      "params": [],
      "result": "String",
      "expression": "String transport.tempo().displayedValue().get()"
    }, {
      "method": "transport.tempo.displayedValue.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.tempo().displayedValue().getLimited(Number)"
    }, {
      "method": "transport.tempo.displayedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.tempo().displayedValue().isSubscribed()"
    }, {
      "method": "transport.tempo.displayedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().displayedValue().markInterested()"
    }, {
      "method": "transport.tempo.displayedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().displayedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.tempo.displayedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().displayedValue().subscribe()"
    }, {
      "method": "transport.tempo.displayedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().displayedValue().unsubscribe()"
    }, {
      "method": "transport.tempo.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.tempo().get()"
    }, {
      "method": "transport.tempo.getRaw",
      "params": [],
      "result": "Number",
      "expression": "Number transport.tempo().getRaw()"
    }, {
      "method": "transport.tempo.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().inc(Number)"
    }, {
      "method": "transport.tempo.inc",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.tempo().inc(Number, Number)"
    }, {
      "method": "transport.tempo.incRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().incRaw(Number)"
    }, {
      "method": "transport.tempo.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.tempo().isSubscribed()"
    }, {
      "method": "transport.tempo.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().markInterested()"
    }, {
      "method": "transport.tempo.modulatedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.tempo().modulatedValue()"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.tempo().modulatedValue().displayedValue()"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue.get",
      "params": [],
      "result": "String",
      "expression": "String transport.tempo().modulatedValue().displayedValue().get()"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.tempo().modulatedValue().displayedValue().getLimited(Number)"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.tempo().modulatedValue().displayedValue().isSubscribed()"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().displayedValue().markInterested()"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().displayedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().displayedValue().subscribe()"
    }, {
      "method": "transport.tempo.modulatedValue.displayedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().displayedValue().unsubscribe()"
    }, {
      "method": "transport.tempo.modulatedValue.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.tempo().modulatedValue().get()"
    }, {
      "method": "transport.tempo.modulatedValue.getRaw",
      "params": [],
      "result": "Number",
      "expression": "Number transport.tempo().modulatedValue().getRaw()"
    }, {
      "method": "transport.tempo.modulatedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.tempo().modulatedValue().isSubscribed()"
    }, {
      "method": "transport.tempo.modulatedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().markInterested()"
    }, {
      "method": "transport.tempo.modulatedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.tempo.modulatedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().subscribe()"
    }, {
      "method": "transport.tempo.modulatedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().modulatedValue().unsubscribe()"
    }, {
      "method": "transport.tempo.name",
      "params": [],
      "result": "Object",
      "expression": "Object transport.tempo().name()"
    }, {
      "method": "transport.tempo.name.get",
      "params": [],
      "result": "String",
      "expression": "String transport.tempo().name().get()"
    }, {
      "method": "transport.tempo.name.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.tempo().name().getLimited(Number)"
    }, {
      "method": "transport.tempo.name.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.tempo().name().isSubscribed()"
    }, {
      "method": "transport.tempo.name.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().name().markInterested()"
    }, {
      "method": "transport.tempo.name.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().name().setIsSubscribed(boolean)"
    }, {
      "method": "transport.tempo.name.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().name().subscribe()"
    }, {
      "method": "transport.tempo.name.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().name().unsubscribe()"
    }, {
      "method": "transport.tempo.reset",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().reset()"
    }, {
      "method": "transport.tempo.restoreAutomationControl",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().restoreAutomationControl()"
    }, {
      "method": "transport.tempo.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().set(Number)"
    }, {
      "method": "transport.tempo.set",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.tempo().set(Number, Number)"
    }, {
      "method": "transport.tempo.setImmediately",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().setImmediately(Number)"
    }, {
      "method": "transport.tempo.setIndication",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().setIndication(boolean)"
    }, {
      "method": "transport.tempo.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().setIsSubscribed(boolean)"
    }, {
      "method": "transport.tempo.setLabel",
      "params": ["String"],
      "result": "void",
      "expression": "void transport.tempo().setLabel(String)"
    }, {
      "method": "transport.tempo.setRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().setRaw(Number)"
    }, {
      "method": "transport.tempo.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().subscribe()"
    }, {
      "method": "transport.tempo.touch",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().touch(boolean)"
    }, {
      "method": "transport.tempo.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().unsubscribe()"
    }, {
      "method": "transport.tempo.value",
      "params": [],
      "result": "Object",
      "expression": "Object transport.tempo().value()"
    }, {
      "method": "transport.tempo.value.displayedValue",
      "params": [],
      "result": "Object",
      "expression": "Object transport.tempo().value().displayedValue()"
    }, {
      "method": "transport.tempo.value.displayedValue.get",
      "params": [],
      "result": "String",
      "expression": "String transport.tempo().value().displayedValue().get()"
    }, {
      "method": "transport.tempo.value.displayedValue.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String transport.tempo().value().displayedValue().getLimited(Number)"
    }, {
      "method": "transport.tempo.value.displayedValue.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.tempo().value().displayedValue().isSubscribed()"
    }, {
      "method": "transport.tempo.value.displayedValue.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().value().displayedValue().markInterested()"
    }, {
      "method": "transport.tempo.value.displayedValue.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().value().displayedValue().setIsSubscribed(boolean)"
    }, {
      "method": "transport.tempo.value.displayedValue.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().value().displayedValue().subscribe()"
    }, {
      "method": "transport.tempo.value.displayedValue.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().value().displayedValue().unsubscribe()"
    }, {
      "method": "transport.tempo.value.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.tempo().value().get()"
    }, {
      "method": "transport.tempo.value.getRaw",
      "params": [],
      "result": "Number",
      "expression": "Number transport.tempo().value().getRaw()"
    }, {
      "method": "transport.tempo.value.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().value().inc(Number)"
    }, {
      "method": "transport.tempo.value.inc",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.tempo().value().inc(Number, Number)"
    }, {
      "method": "transport.tempo.value.incRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().value().incRaw(Number)"
    }, {
      "method": "transport.tempo.value.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.tempo().value().isSubscribed()"
    }, {
      "method": "transport.tempo.value.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().value().markInterested()"
    }, {
      "method": "transport.tempo.value.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().value().set(Number)"
    }, {
      "method": "transport.tempo.value.set",
      "params": ["Number", "Number"],
      "result": "void",
      "expression": "void transport.tempo().value().set(Number, Number)"
    }, {
      "method": "transport.tempo.value.setImmediately",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().value().setImmediately(Number)"
    }, {
      "method": "transport.tempo.value.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.tempo().value().setIsSubscribed(boolean)"
    }, {
      "method": "transport.tempo.value.setRaw",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.tempo().value().setRaw(Number)"
    }, {
      "method": "transport.tempo.value.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().value().subscribe()"
    }, {
      "method": "transport.tempo.value.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.tempo().value().unsubscribe()"
    }, {
      "method": "transport.timeSignature",
      "params": [],
      "result": "Object",
      "expression": "Object transport.timeSignature()"
    }, {
      "method": "transport.timeSignature.denominator",
      "params": [],
      "result": "Object",
      "expression": "Object transport.timeSignature().denominator()"
    }, {
      "method": "transport.timeSignature.denominator.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.timeSignature().denominator().get()"
    }, {
      "method": "transport.timeSignature.denominator.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.timeSignature().denominator().inc(Number)"
    }, {
      "method": "transport.timeSignature.denominator.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.timeSignature().denominator().isSubscribed()"
    }, {
      "method": "transport.timeSignature.denominator.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().denominator().markInterested()"
    }, {
      "method": "transport.timeSignature.denominator.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.timeSignature().denominator().set(Number)"
    }, {
      "method": "transport.timeSignature.denominator.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.timeSignature().denominator().setIsSubscribed(boolean)"
    }, {
      "method": "transport.timeSignature.denominator.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().denominator().subscribe()"
    }, {
      "method": "transport.timeSignature.denominator.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().denominator().unsubscribe()"
    }, {
      "method": "transport.timeSignature.get",
      "params": [],
      "result": "String",
      "expression": "String transport.timeSignature().get()"
    }, {
      "method": "transport.timeSignature.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.timeSignature().isSubscribed()"
    }, {
      "method": "transport.timeSignature.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().markInterested()"
    }, {
      "method": "transport.timeSignature.numerator",
      "params": [],
      "result": "Object",
      "expression": "Object transport.timeSignature().numerator()"
    }, {
      "method": "transport.timeSignature.numerator.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.timeSignature().numerator().get()"
    }, {
      "method": "transport.timeSignature.numerator.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.timeSignature().numerator().inc(Number)"
    }, {
      "method": "transport.timeSignature.numerator.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.timeSignature().numerator().isSubscribed()"
    }, {
      "method": "transport.timeSignature.numerator.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().numerator().markInterested()"
    }, {
      "method": "transport.timeSignature.numerator.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.timeSignature().numerator().set(Number)"
    }, {
      "method": "transport.timeSignature.numerator.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.timeSignature().numerator().setIsSubscribed(boolean)"
    }, {
      "method": "transport.timeSignature.numerator.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().numerator().subscribe()"
    }, {
      "method": "transport.timeSignature.numerator.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().numerator().unsubscribe()"
    }, {
      "method": "transport.timeSignature.set",
      "params": ["String"],
      "result": "void",
      "expression": "void transport.timeSignature().set(String)"
    }, {
      "method": "transport.timeSignature.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.timeSignature().setIsSubscribed(boolean)"
    }, {
      "method": "transport.timeSignature.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().subscribe()"
    }, {
      "method": "transport.timeSignature.ticks",
      "params": [],
      "result": "Object",
      "expression": "Object transport.timeSignature().ticks()"
    }, {
      "method": "transport.timeSignature.ticks.get",
      "params": [],
      "result": "Number",
      "expression": "Number transport.timeSignature().ticks().get()"
    }, {
      "method": "transport.timeSignature.ticks.inc",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.timeSignature().ticks().inc(Number)"
    }, {
      "method": "transport.timeSignature.ticks.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean transport.timeSignature().ticks().isSubscribed()"
    }, {
      "method": "transport.timeSignature.ticks.markInterested",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().ticks().markInterested()"
    }, {
      "method": "transport.timeSignature.ticks.set",
      "params": ["Number"],
      "result": "void",
      "expression": "void transport.timeSignature().ticks().set(Number)"
    }, {
      "method": "transport.timeSignature.ticks.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void transport.timeSignature().ticks().setIsSubscribed(boolean)"
    }, {
      "method": "transport.timeSignature.ticks.subscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().ticks().subscribe()"
    }, {
      "method": "transport.timeSignature.ticks.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().ticks().unsubscribe()"
    }, {
      "method": "transport.timeSignature.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.timeSignature().unsubscribe()"
    }, {
      "method": "transport.toggleLatchAutomationWriteMode",
      "params": [],
      "result": "void",
      "expression": "void transport.toggleLatchAutomationWriteMode()"
    }, {
      "method": "transport.togglePlay",
      "params": [],
      "result": "void",
      "expression": "void transport.togglePlay()"
    }, {
      "method": "transport.toggleWriteArrangerAutomation",
      "params": [],
      "result": "void",
      "expression": "void transport.toggleWriteArrangerAutomation()"
    }, {
      "method": "transport.toggleWriteClipLauncherAutomation",
      "params": [],
      "result": "void",
      "expression": "void transport.toggleWriteClipLauncherAutomation()"
    }, {
      "method": "transport.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void transport.unsubscribe()"
    }],
    "events": [{
      "event": "transport.automationWriteMode"
    }, {
      "event": "transport.clipLauncherPostRecordingAction"
    }, {
      "event": "transport.crossfade",
      "error": "This has been deprecated since API version 2: Use value().addValueObserver(callback) instead"
    }, {
      "event": "transport.crossfade.displayedValue"
    }, {
      "event": "transport.crossfade.modulatedValue"
    }, {
      "event": "transport.crossfade.modulatedValue.displayedValue"
    }, {
      "event": "transport.crossfade.name"
    }, {
      "event": "transport.crossfade.value"
    }, {
      "event": "transport.crossfade.value.displayedValue"
    }, {
      "event": "transport.getClipLauncherPostRecordingTimeOffset"
    }, {
      "event": "transport.getInPosition"
    }, {
      "event": "transport.getOutPosition"
    }, {
      "event": "transport.getPosition"
    }, {
      "event": "transport.isArrangerAutomationWriteEnabled"
    }, {
      "event": "transport.isArrangerLoopEnabled"
    }, {
      "event": "transport.isArrangerOverdubEnabled"
    }, {
      "event": "transport.isArrangerRecordEnabled"
    }, {
      "event": "transport.isAutomationOverrideActive"
    }, {
      "event": "transport.isClipLauncherAutomationWriteEnabled"
    }, {
      "event": "transport.isClipLauncherOverdubEnabled"
    }, {
      "event": "transport.isMetronomeAudibleDuringPreRoll"
    }, {
      "event": "transport.isMetronomeEnabled"
    }, {
      "event": "transport.isMetronomeTickPlaybackEnabled"
    }, {
      "event": "transport.isPlaying"
    }, {
      "event": "transport.isPunchInEnabled"
    }, {
      "event": "transport.isPunchOutEnabled"
    }, {
      "event": "transport.metronomeVolume"
    }, {
      "event": "transport.metronomeVolume.displayedValue"
    }, {
      "event": "transport.preRoll"
    }, {
      "event": "transport.tempo",
      "error": "This has been deprecated since API version 2: Use value().addValueObserver(callback) instead"
    }, {
      "event": "transport.tempo.displayedValue"
    }, {
      "event": "transport.tempo.modulatedValue"
    }, {
      "event": "transport.tempo.modulatedValue.displayedValue"
    }, {
      "event": "transport.tempo.name"
    }, {
      "event": "transport.tempo.value"
    }, {
      "event": "transport.tempo.value.displayedValue"
    }, {
      "event": "transport.timeSignature"
    }, {
      "event": "transport.timeSignature.denominator"
    }, {
      "event": "transport.timeSignature.numerator"
    }, {
      "event": "transport.timeSignature.ticks"
    }]
  }, {
    "name": "application",
    "methods": [{
      "method": "application.activateEngine",
      "params": [],
      "result": "void",
      "expression": "void application.activateEngine()"
    }, {
      "method": "application.arrowKeyDown",
      "params": [],
      "result": "void",
      "expression": "void application.arrowKeyDown()"
    }, {
      "method": "application.arrowKeyLeft",
      "params": [],
      "result": "void",
      "expression": "void application.arrowKeyLeft()"
    }, {
      "method": "application.arrowKeyRight",
      "params": [],
      "result": "void",
      "expression": "void application.arrowKeyRight()"
    }, {
      "method": "application.arrowKeyUp",
      "params": [],
      "result": "void",
      "expression": "void application.arrowKeyUp()"
    }, {
      "method": "application.copy",
      "params": [],
      "result": "void",
      "expression": "void application.copy()"
    }, {
      "method": "application.createAudioTrack",
      "params": ["Number"],
      "result": "void",
      "expression": "void application.createAudioTrack(Number)"
    }, {
      "method": "application.createEffectTrack",
      "params": ["Number"],
      "result": "void",
      "expression": "void application.createEffectTrack(Number)"
    }, {
      "method": "application.createInstrumentTrack",
      "params": ["Number"],
      "result": "void",
      "expression": "void application.createInstrumentTrack(Number)"
    }, {
      "method": "application.cut",
      "params": [],
      "result": "void",
      "expression": "void application.cut()"
    }, {
      "method": "application.deactivateEngine",
      "params": [],
      "result": "void",
      "expression": "void application.deactivateEngine()"
    }, {
      "method": "application.displayProfile",
      "params": [],
      "result": "Object",
      "expression": "Object application.displayProfile()"
    }, {
      "method": "application.displayProfile.get",
      "params": [],
      "result": "String",
      "expression": "String application.displayProfile().get()"
    }, {
      "method": "application.displayProfile.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String application.displayProfile().getLimited(Number)"
    }, {
      "method": "application.displayProfile.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean application.displayProfile().isSubscribed()"
    }, {
      "method": "application.displayProfile.markInterested",
      "params": [],
      "result": "void",
      "expression": "void application.displayProfile().markInterested()"
    }, {
      "method": "application.displayProfile.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void application.displayProfile().setIsSubscribed(boolean)"
    }, {
      "method": "application.displayProfile.subscribe",
      "params": [],
      "result": "void",
      "expression": "void application.displayProfile().subscribe()"
    }, {
      "method": "application.displayProfile.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void application.displayProfile().unsubscribe()"
    }, {
      "method": "application.duplicate",
      "params": [],
      "result": "void",
      "expression": "void application.duplicate()"
    }, {
      "method": "application.enter",
      "params": [],
      "result": "void",
      "expression": "void application.enter()"
    }, {
      "method": "application.escape",
      "params": [],
      "result": "void",
      "expression": "void application.escape()"
    }, {
      "method": "application.focusPanelAbove",
      "params": [],
      "result": "void",
      "expression": "void application.focusPanelAbove()"
    }, {
      "method": "application.focusPanelBelow",
      "params": [],
      "result": "void",
      "expression": "void application.focusPanelBelow()"
    }, {
      "method": "application.focusPanelToLeft",
      "params": [],
      "result": "void",
      "expression": "void application.focusPanelToLeft()"
    }, {
      "method": "application.focusPanelToRight",
      "params": [],
      "result": "void",
      "expression": "void application.focusPanelToRight()"
    }, {
      "method": "application.getAction",
      "params": ["String"],
      "result": "Object",
      "expression": "Object application.getAction(String)"
    }, {
      "method": "application.getAction.getCategory",
      "params": ["String"],
      "result": "Object",
      "expression": "Object application.getAction(String).getCategory()"
    }, {
      "method": "application.getAction.getCategory.getActions",
      "params": ["String"],
      "result": "Object[]",
      "expression": "Object[] application.getAction(String).getCategory().getActions()"
    }, {
      "method": "application.getAction.getCategory.getId",
      "params": ["String"],
      "result": "String",
      "expression": "String application.getAction(String).getCategory().getId()"
    }, {
      "method": "application.getAction.getCategory.getName",
      "params": ["String"],
      "result": "String",
      "expression": "String application.getAction(String).getCategory().getName()"
    }, {
      "method": "application.getAction.getId",
      "params": ["String"],
      "result": "String",
      "expression": "String application.getAction(String).getId()"
    }, {
      "method": "application.getAction.getMenuItemText",
      "params": ["String"],
      "result": "String",
      "expression": "String application.getAction(String).getMenuItemText()"
    }, {
      "method": "application.getAction.getName",
      "params": ["String"],
      "result": "String",
      "expression": "String application.getAction(String).getName()"
    }, {
      "method": "application.getAction.invoke",
      "params": ["String"],
      "result": "void",
      "expression": "void application.getAction(String).invoke()"
    }, {
      "method": "application.getActionCategories",
      "params": [],
      "result": "Object[]",
      "expression": "Object[] application.getActionCategories()"
    }, {
      "method": "application.getActionCategory",
      "params": ["String"],
      "result": "Object",
      "expression": "Object application.getActionCategory(String)"
    }, {
      "method": "application.getActionCategory.getActions",
      "params": ["String"],
      "result": "Object[]",
      "expression": "Object[] application.getActionCategory(String).getActions()"
    }, {
      "method": "application.getActionCategory.getId",
      "params": ["String"],
      "result": "String",
      "expression": "String application.getActionCategory(String).getId()"
    }, {
      "method": "application.getActionCategory.getName",
      "params": ["String"],
      "result": "String",
      "expression": "String application.getActionCategory(String).getName()"
    }, {
      "method": "application.getActions",
      "params": [],
      "result": "Object[]",
      "expression": "Object[] application.getActions()"
    }, {
      "method": "application.hasActiveEngine",
      "params": [],
      "result": "Object",
      "expression": "Object application.hasActiveEngine()"
    }, {
      "method": "application.hasActiveEngine.get",
      "params": [],
      "result": "boolean",
      "expression": "boolean application.hasActiveEngine().get()"
    }, {
      "method": "application.hasActiveEngine.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean application.hasActiveEngine().isSubscribed()"
    }, {
      "method": "application.hasActiveEngine.markInterested",
      "params": [],
      "result": "void",
      "expression": "void application.hasActiveEngine().markInterested()"
    }, {
      "method": "application.hasActiveEngine.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void application.hasActiveEngine().setIsSubscribed(boolean)"
    }, {
      "method": "application.hasActiveEngine.subscribe",
      "params": [],
      "result": "void",
      "expression": "void application.hasActiveEngine().subscribe()"
    }, {
      "method": "application.hasActiveEngine.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void application.hasActiveEngine().unsubscribe()"
    }, {
      "method": "application.navigateIntoTrackGroup",
      "params": ["Object"],
      "result": "void",
      "expression": "void application.navigateIntoTrackGroup(Object)"
    }, {
      "method": "application.navigateToParentTrackGroup",
      "params": [],
      "result": "void",
      "expression": "void application.navigateToParentTrackGroup()"
    }, {
      "method": "application.nextPanelLayout",
      "params": [],
      "result": "void",
      "expression": "void application.nextPanelLayout()"
    }, {
      "method": "application.nextProject",
      "params": [],
      "result": "void",
      "expression": "void application.nextProject()"
    }, {
      "method": "application.nextSubPanel",
      "params": [],
      "result": "void",
      "expression": "void application.nextSubPanel()"
    }, {
      "method": "application.panelLayout",
      "params": [],
      "result": "Object",
      "expression": "Object application.panelLayout()"
    }, {
      "method": "application.panelLayout.get",
      "params": [],
      "result": "String",
      "expression": "String application.panelLayout().get()"
    }, {
      "method": "application.panelLayout.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String application.panelLayout().getLimited(Number)"
    }, {
      "method": "application.panelLayout.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean application.panelLayout().isSubscribed()"
    }, {
      "method": "application.panelLayout.markInterested",
      "params": [],
      "result": "void",
      "expression": "void application.panelLayout().markInterested()"
    }, {
      "method": "application.panelLayout.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void application.panelLayout().setIsSubscribed(boolean)"
    }, {
      "method": "application.panelLayout.subscribe",
      "params": [],
      "result": "void",
      "expression": "void application.panelLayout().subscribe()"
    }, {
      "method": "application.panelLayout.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void application.panelLayout().unsubscribe()"
    }, {
      "method": "application.paste",
      "params": [],
      "result": "void",
      "expression": "void application.paste()"
    }, {
      "method": "application.previousPanelLayout",
      "params": [],
      "result": "void",
      "expression": "void application.previousPanelLayout()"
    }, {
      "method": "application.previousProject",
      "params": [],
      "result": "void",
      "expression": "void application.previousProject()"
    }, {
      "method": "application.previousSubPanel",
      "params": [],
      "result": "void",
      "expression": "void application.previousSubPanel()"
    }, {
      "method": "application.projectName",
      "params": [],
      "result": "Object",
      "expression": "Object application.projectName()"
    }, {
      "method": "application.projectName.get",
      "params": [],
      "result": "String",
      "expression": "String application.projectName().get()"
    }, {
      "method": "application.projectName.getLimited",
      "params": ["Number"],
      "result": "String",
      "expression": "String application.projectName().getLimited(Number)"
    }, {
      "method": "application.projectName.isSubscribed",
      "params": [],
      "result": "boolean",
      "expression": "boolean application.projectName().isSubscribed()"
    }, {
      "method": "application.projectName.markInterested",
      "params": [],
      "result": "void",
      "expression": "void application.projectName().markInterested()"
    }, {
      "method": "application.projectName.setIsSubscribed",
      "params": ["boolean"],
      "result": "void",
      "expression": "void application.projectName().setIsSubscribed(boolean)"
    }, {
      "method": "application.projectName.subscribe",
      "params": [],
      "result": "void",
      "expression": "void application.projectName().subscribe()"
    }, {
      "method": "application.projectName.unsubscribe",
      "params": [],
      "result": "void",
      "expression": "void application.projectName().unsubscribe()"
    }, {
      "method": "application.redo",
      "params": [],
      "result": "void",
      "expression": "void application.redo()"
    }, {
      "method": "application.remove",
      "params": [],
      "result": "void",
      "expression": "void application.remove()"
    }, {
      "method": "application.rename",
      "params": [],
      "result": "void",
      "expression": "void application.rename()"
    }, {
      "method": "application.selectAll",
      "params": [],
      "result": "void",
      "expression": "void application.selectAll()"
    }, {
      "method": "application.selectNone",
      "params": [],
      "result": "void",
      "expression": "void application.selectNone()"
    }, {
      "method": "application.setPanelLayout",
      "params": ["String"],
      "result": "void",
      "expression": "void application.setPanelLayout(String)"
    }, {
      "method": "application.toggleAutomationEditor",
      "params": [],
      "result": "void",
      "expression": "void application.toggleAutomationEditor()"
    }, {
      "method": "application.toggleBrowserVisibility",
      "params": [],
      "result": "void",
      "expression": "void application.toggleBrowserVisibility()"
    }, {
      "method": "application.toggleDevices",
      "params": [],
      "result": "void",
      "expression": "void application.toggleDevices()"
    }, {
      "method": "application.toggleFullScreen",
      "params": [],
      "result": "void",
      "expression": "void application.toggleFullScreen()"
    }, {
      "method": "application.toggleInspector",
      "params": [],
      "result": "void",
      "expression": "void application.toggleInspector()"
    }, {
      "method": "application.toggleMixer",
      "params": [],
      "result": "void",
      "expression": "void application.toggleMixer()"
    }, {
      "method": "application.toggleNoteEditor",
      "params": [],
      "result": "void",
      "expression": "void application.toggleNoteEditor()"
    }, {
      "method": "application.undo",
      "params": [],
      "result": "void",
      "expression": "void application.undo()"
    }, {
      "method": "application.zoomIn",
      "params": [],
      "result": "void",
      "expression": "void application.zoomIn()"
    }, {
      "method": "application.zoomOut",
      "params": [],
      "result": "void",
      "expression": "void application.zoomOut()"
    }, {
      "method": "application.zoomToFit",
      "params": [],
      "result": "void",
      "expression": "void application.zoomToFit()"
    }, {
      "method": "application.zoomToSelection",
      "params": [],
      "result": "void",
      "expression": "void application.zoomToSelection()"
    }],
    "events": [{
      "event": "application.displayProfile"
    }, {
      "event": "application.hasActiveEngine"
    }, {
      "event": "application.panelLayout"
    }, {
      "event": "application.projectName"
    }]
  }]
}