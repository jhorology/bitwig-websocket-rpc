{
  "reportedOn": "Dec 2, 2019, 11:01:14 PM",
  "host": {
    "apiVersion": 10,
    "product": "Bitwig Studio",
    "vendor": "Bitwig",
    "version": "3.1 Beta 2",
    "platformType": "WINDOWS"
  },
  "extension": {
    "name": "WebSocket RPC API 10",
    "author": "Masafumi",
    "version": "0.2.0-SNAPSHOT",
    "id": "11797f46-6987-4795-ba94-0a6a0c4e8ac5",
    "requiredApiVersion": 10,
    "hardwareVendor": "WebSocket RPC",
    "hardwareModel": "WebSocket RPC",
    "usingBetaAPI": true,
    "shouldFailOnDeprecatedUse": true
  },
  "system": {
    "sun.desktop": "windows",
    "awt.toolkit": "sun.awt.windows.WToolkit",
    "java.specification.version": "12",
    "sun.cpu.isalist": "amd64",
    "sun.jnu.encoding": "MS932",
    "java.class.path": "bin\\bitwig.jar;bin\\libs.jar;bin\\lwjgl.jar",
    "sun.awt.enableExtraMouseButtons": "true",
    "java.vm.vendor": "Oracle Corporation",
    "sun.arch.data.model": "64",
    "user.variant": "",
    "java.vendor.url": "https://java.oracle.com/",
    "user.timezone": "Asia/Tokyo",
    "java.vm.specification.version": "12",
    "os.name": "Windows 10",
    "executableDir": "C:\\Program Files\\Bitwig Studio 3.1 Beta 2\\bin",
    "user.country": "JP",
    "sun.boot.library.path": "C:\\Program Files\\Bitwig Studio 3.1 Beta 2\\jre\\bin",
    "jdk.debug": "release",
    "sun.cpu.endian": "little",
    "executableDir64": "C:\\Program Files\\Bitwig Studio 3.1 Beta 2\\bin",
    "user.home": "C:\\Users\\masaf",
    "user.language": "ja",
    "java.specification.vendor": "Oracle Corporation",
    "java.version.date": "2019-04-16",
    "java.home": "C:\\Program Files\\Bitwig Studio 3.1 Beta 2\\jre",
    "splashHWND": "0x00000000007d0246",
    "javax.accessibility.assistive_technologies": "",
    "file.separator": "\\",
    "java.vm.compressedOopsMode": "32-bit",
    "line.separator": "\r\n",
    "java.vm.specification.vendor": "Oracle Corporation",
    "java.specification.name": "Java Platform API Specification",
    "java.awt.graphicsenv": "sun.awt.Win32GraphicsEnvironment",
    "java.awt.headless": "true",
    "nitro.include": "resources\\nitro\\std",
    "user.script": "",
    "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers",
    "java.runtime.version": "12.0.1+12",
    "user.name": "masaf",
    "path.separator": ";",
    "os.version": "10.0",
    "java.runtime.name": "OpenJDK Runtime Environment",
    "file.encoding": "MS932",
    "java.vm.name": "OpenJDK 64-Bit Server VM",
    "java.vendor.url.bug": "https://bugreport.java.com/bugreport/",
    "java.io.tmpdir": "C:\\Users\\masaf\\AppData\\Local\\Temp\\",
    "java.version": "12.0.1",
    "user.dir": "C:\\Program Files\\Bitwig Studio 3.1 Beta 2",
    "os.arch": "amd64",
    "factoryLibrary": "library",
    "java.vm.specification.name": "Java Virtual Machine Specification",
    "resourceLocation": "resources",
    "sun.os.patch.level": "",
    "java.library.path": "C:\\Program Files\\Bitwig Studio 3.1 Beta 2\\bin",
    "java.vm.info": "mixed mode",
    "java.vendor": "Oracle Corporation",
    "java.vm.version": "12.0.1+12",
    "sun.io.unicode.encoding": "UnicodeLittle",
    "java.class.version": "56.0",
    "engineExecutable": "C:\\Program Files\\Bitwig Studio 3.1 Beta 2\\bin\\BitwigAudioEngine.exe"
  },
  "env": {
    "USERDOMAIN_ROAMINGPROFILE": "XPS13",
    "OneDriveCommercial": "C:\\Users\\masaf\\OneDrive - 藤丸システム設計事務所",
    "WT_SESSION": "533dff70-2c2b-4f8b-822d-08d8affce084",
    "LOCALAPPDATA": "C:\\Users\\masaf\\AppData\\Local",
    "NVM_SYMLINK": "C:\\Users\\masaf\\scoop\\persist\\nvm\\nodejs\\nodejs",
    "PROCESSOR_LEVEL": "6",
    "USERDOMAIN": "XPS13",
    "LOGONSERVER": "\\\\XPS13",
    "JAVA_HOME": "C:\\Users\\masaf\\scoop\\apps\\adoptopenjdk-openj9\\current",
    "ALLUSERSPROFILE": "C:\\ProgramData",
    "INTEL_DEV_REDIST": "C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\",
    "PROCESSOR_ARCHITECTURE": "AMD64",
    "GIT_INSTALL_ROOT": "C:\\Users\\masaf\\scoop\\apps\\git\\current",
    "PSModulePath": "C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules",
    "SystemDrive": "C:",
    "IPG_Dir": "C:\\Program Files\\Intel\\Power Gadget 3.5",
    "OneDrive": "C:\\Users\\masaf\\OneDrive - 藤丸システム設計事務所",
    "APPDATA": "C:\\Users\\masaf\\AppData\\Roaming",
    "USERNAME": "masaf",
    "ProgramFiles(x86)": "C:\\Program Files (x86)",
    "CommonProgramFiles": "C:\\Program Files\\Common Files",
    "Path": "C:\\Program Files (x86)\\Common Files\\Intel\\Shared Libraries\\redist\\intel64_win\\compiler;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\Google\\Google Apps Sync\\;C:\\Program Files\\Google\\Google Apps Migration\\;C:\\Users\\masaf\\scoop\\apps\\adoptopenjdk-openj9\\current\\bin;C:\\Users\\masaf\\scoop\\apps\\adoptopenjdk-lts-openj9\\current\\bin;C:\\Users\\masaf\\scoop\\apps\\adoptopenjdk-openj9-jre\\current\\bin;C:\\Users\\masaf\\scoop\\apps\\ojdkbuild8-full\\current\\bin;C:\\Users\\masaf\\scoop\\apps\\maven\\current\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Users\\masaf\\scoop\\apps\\nvm\\current\\nodejs\\nodejs;C:\\Users\\masaf\\scoop\\shims;C:\\Users\\masaf\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\masaf\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\masaf\\scoop\\apps\\hyper\\3.0.2\\resources\\bin;C:\\Users\\masaf\\Utilities\\bin;C:\\Users\\masaf\\scoop\\apps\\nvm\\current\\nodejs\\nodejs",
    "PATHEXT": ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC",
    "DriverData": "C:\\Windows\\System32\\Drivers\\DriverData",
    "OS": "Windows_NT",
    "OneDriveConsumer": "C:\\Users\\masaf\\OneDrive",
    "COMPUTERNAME": "XPS13",
    "NVM_HOME": "C:\\Users\\masaf\\scoop\\apps\\nvm\\current",
    "PROCESSOR_REVISION": "7e05",
    "CommonProgramW6432": "C:\\Program Files\\Common Files",
    "ComSpec": "C:\\Windows\\system32\\cmd.exe",
    "ProgramData": "C:\\ProgramData",
    "ProgramW6432": "C:\\Program Files",
    "HOMEPATH": "\\Users\\masaf",
    "SystemRoot": "C:\\Windows",
    "TEMP": "C:\\Users\\masaf\\AppData\\Local\\Temp",
    "HOMEDRIVE": "C:",
    "PROCESSOR_IDENTIFIER": "Intel64 Family 6 Model 126 Stepping 5, GenuineIntel",
    "USERPROFILE": "C:\\Users\\masaf",
    "TMP": "C:\\Users\\masaf\\AppData\\Local\\Temp",
    "WSLENV": "BITWIG_DEBUG_PORT",
    "BITWIG_DEBUG_PORT": "8989",
    "CommonProgramFiles(x86)": "C:\\Program Files (x86)\\Common Files",
    "PUBLIC": "C:\\Users\\Public",
    "ProgramFiles": "C:\\Program Files",
    "NUMBER_OF_PROCESSORS": "8",
    "windir": "C:\\Windows",
    "IPG_Ver": "3.0"
  },
  "methods": [{
    "method": "rpc.log",
    "params": [],
    "result": "object",
    "expression": "StringValue Rpc#log()"
  }, {
    "method": "rpc.log.get",
    "params": [],
    "result": "string",
    "expression": "String Rpc#log().get()"
  }, {
    "method": "rpc.log.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Rpc#log().getLimited(int)"
  }, {
    "method": "rpc.log.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Rpc#log().subscribe()"
  }, {
    "method": "rpc.log.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Rpc#log().unsubscribe()"
  }, {
    "method": "rpc.log.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Rpc#log().isSubscribed()"
  }, {
    "method": "rpc.log.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Rpc#log().setIsSubscribed(boolean)"
  }, {
    "method": "rpc.off",
    "params": ["string[]"],
    "result": "object",
    "expression": "Map Rpc#off(java.lang.String[])"
  }, {
    "method": "rpc.on",
    "params": ["string[]"],
    "result": "object",
    "expression": "Map Rpc#on(java.lang.String[])"
  }, {
    "method": "rpc.broadcast",
    "params": ["string", "any[]"],
    "result": "void",
    "expression": "void Rpc#broadcast(java.lang.String, java.lang.Object[])"
  }, {
    "method": "rpc.config",
    "params": ["object"],
    "result": "void",
    "expression": "void Rpc#config(com.github.jhorology.bitwig.Config)"
  }, {
    "method": "rpc.config",
    "params": [],
    "result": "object",
    "expression": "Config Rpc#config()"
  }, {
    "method": "rpc.report",
    "params": [],
    "result": "any",
    "expression": "Object Rpc#report()"
  }, {
    "method": "rpc.echo",
    "params": ["string"],
    "result": "string",
    "expression": "String Rpc#echo(java.lang.String)"
  }, {
    "method": "test.concat",
    "params": ["string", "string"],
    "result": "string",
    "expression": "String Test#concat(java.lang.String, java.lang.String)"
  }, {
    "method": "test.concat",
    "params": ["string[]"],
    "result": "string",
    "expression": "String Test#concat(java.lang.String[])"
  }, {
    "method": "test.concat",
    "params": ["object"],
    "result": "string",
    "expression": "String Test#concat(com.github.jhorology.bitwig.rpc.test.GenericPair<java.lang.String, java.lang.String>)"
  }, {
    "method": "test.repeat",
    "params": ["object"],
    "result": "string",
    "expression": "String Test#repeat(com.github.jhorology.bitwig.rpc.test.GenericPair<java.lang.String, java.lang.Integer>)"
  }, {
    "method": "test.repeat",
    "params": ["string", "number"],
    "result": "string",
    "expression": "String Test#repeat(java.lang.String, int)"
  }, {
    "method": "test.sum",
    "params": ["number", "number", "number"],
    "result": "number",
    "expression": "int Test#sum(int, int, int)"
  }, {
    "method": "test.sum",
    "params": ["object"],
    "result": "number",
    "expression": "int Test#sum(com.github.jhorology.bitwig.rpc.test.IntPair)"
  }, {
    "method": "test.sum",
    "params": ["number[]"],
    "result": "number",
    "expression": "int Test#sum(int[])"
  }, {
    "method": "test.sum",
    "params": ["number", "number"],
    "result": "number",
    "expression": "int Test#sum(int, int)"
  }, {
    "method": "test.consume",
    "params": ["number"],
    "result": "void",
    "expression": "void Test#consume(int)"
  }, {
    "method": "test.consume",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Test#consume(double, double)"
  }, {
    "method": "test.consume",
    "params": ["number", "number", "number"],
    "result": "void",
    "expression": "void Test#consume(java.lang.Number, java.lang.Number, java.lang.Number)"
  }, {
    "method": "test.consume",
    "params": ["number[]"],
    "result": "void",
    "expression": "void Test#consume(java.lang.Number[])"
  }, {
    "method": "test.hello",
    "params": [],
    "result": "string",
    "expression": "String Test#hello()"
  }, {
    "method": "test.echo",
    "params": ["string"],
    "result": "string",
    "expression": "String Test#echo(java.lang.String)"
  }, {
    "method": "test.nop",
    "params": [],
    "result": "void",
    "expression": "void Test#nop()"
  }, {
    "method": "host.showPopupNotification",
    "params": ["string"],
    "result": "void",
    "expression": "void ControllerHost#showPopupNotification(java.lang.String)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowChannelSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowChannelSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowDeviceLayerSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowDeviceLayerSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowTrackSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowTrackSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowDeviceSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowDeviceSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowSelectionNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowSelectionNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowMappingNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowMappingNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowPresetNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowPresetNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.setShouldShowValueNotifications",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().setShouldShowValueNotifications(boolean)"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue ControllerHost#getNotificationSettings().getUserNotificationsEnabled()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().set(boolean)"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().toggle()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().setToFalseAction().invoke()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().setToTrueAction().invoke()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().toggleAction().invoke()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean ControllerHost#getNotificationSettings().getUserNotificationsEnabled().get()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean ControllerHost#getNotificationSettings().getUserNotificationsEnabled().getAsBoolean()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().subscribe()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().unsubscribe()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean ControllerHost#getNotificationSettings().getUserNotificationsEnabled().isSubscribed()"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "host.getNotificationSettings.getUserNotificationsEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void ControllerHost#getNotificationSettings().getUserNotificationsEnabled().invoke()"
  }, {
    "method": "application.remove",
    "params": [],
    "result": "void",
    "expression": "void Application#remove()"
  }, {
    "method": "application.getActions",
    "params": [],
    "result": "object[]",
    "expression": "Action[] Application#getActions()"
  }, {
    "method": "application.copy",
    "params": [],
    "result": "void",
    "expression": "void Application#copy()"
  }, {
    "method": "application.duplicate",
    "params": [],
    "result": "void",
    "expression": "void Application#duplicate()"
  }, {
    "method": "application.rename",
    "params": [],
    "result": "void",
    "expression": "void Application#rename()"
  }, {
    "method": "application.escape",
    "params": [],
    "result": "void",
    "expression": "void Application#escape()"
  }, {
    "method": "application.undo",
    "params": [],
    "result": "void",
    "expression": "void Application#undo()"
  }, {
    "method": "application.cut",
    "params": [],
    "result": "void",
    "expression": "void Application#cut()"
  }, {
    "method": "application.paste",
    "params": [],
    "result": "void",
    "expression": "void Application#paste()"
  }, {
    "method": "application.redo",
    "params": [],
    "result": "void",
    "expression": "void Application#redo()"
  }, {
    "method": "application.enter",
    "params": [],
    "result": "void",
    "expression": "void Application#enter()"
  }, {
    "method": "application.activateEngine",
    "params": [],
    "result": "void",
    "expression": "void Application#activateEngine()"
  }, {
    "method": "application.arrowKeyDown",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyDown()"
  }, {
    "method": "application.displayProfile",
    "params": [],
    "result": "object",
    "expression": "StringValue Application#displayProfile()"
  }, {
    "method": "application.displayProfile.get",
    "params": [],
    "result": "string",
    "expression": "String Application#displayProfile().get()"
  }, {
    "method": "application.displayProfile.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#displayProfile().getLimited(int)"
  }, {
    "method": "application.displayProfile.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#displayProfile().subscribe()"
  }, {
    "method": "application.displayProfile.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#displayProfile().unsubscribe()"
  }, {
    "method": "application.displayProfile.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#displayProfile().isSubscribed()"
  }, {
    "method": "application.displayProfile.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#displayProfile().setIsSubscribed(boolean)"
  }, {
    "method": "application.hasActiveEngine",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Application#hasActiveEngine()"
  }, {
    "method": "application.hasActiveEngine.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#hasActiveEngine().get()"
  }, {
    "method": "application.hasActiveEngine.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#hasActiveEngine().getAsBoolean()"
  }, {
    "method": "application.hasActiveEngine.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#hasActiveEngine().subscribe()"
  }, {
    "method": "application.hasActiveEngine.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#hasActiveEngine().unsubscribe()"
  }, {
    "method": "application.hasActiveEngine.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#hasActiveEngine().isSubscribed()"
  }, {
    "method": "application.hasActiveEngine.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#hasActiveEngine().setIsSubscribed(boolean)"
  }, {
    "method": "application.previousProject",
    "params": [],
    "result": "void",
    "expression": "void Application#previousProject()"
  }, {
    "method": "application.zoomIn",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomIn()"
  }, {
    "method": "application.zoomOut",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomOut()"
  }, {
    "method": "application.arrowKeyRight",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyRight()"
  }, {
    "method": "application.focusPanelAbove",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelAbove()"
  }, {
    "method": "application.focusPanelBelow",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelBelow()"
  }, {
    "method": "application.selectAll",
    "params": [],
    "result": "void",
    "expression": "void Application#selectAll()"
  }, {
    "method": "application.getActionCategory",
    "params": ["string"],
    "result": "object",
    "expression": "ActionCategory Application#getActionCategory(java.lang.String)"
  }, {
    "method": "application.getActionCategory.getName",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getActionCategory(java.lang.String).getName()"
  }, {
    "method": "application.getActionCategory.getActions",
    "params": ["string"],
    "result": "object[]",
    "expression": "Action[] Application#getActionCategory(java.lang.String).getActions()"
  }, {
    "method": "application.getActionCategory.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getActionCategory(java.lang.String).getId()"
  }, {
    "method": "application.createAudioTrack",
    "params": ["number"],
    "result": "void",
    "expression": "void Application#createAudioTrack(int)"
  }, {
    "method": "application.arrowKeyLeft",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyLeft()"
  }, {
    "method": "application.projectName",
    "params": [],
    "result": "object",
    "expression": "StringValue Application#projectName()"
  }, {
    "method": "application.projectName.get",
    "params": [],
    "result": "string",
    "expression": "String Application#projectName().get()"
  }, {
    "method": "application.projectName.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#projectName().getLimited(int)"
  }, {
    "method": "application.projectName.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#projectName().subscribe()"
  }, {
    "method": "application.projectName.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#projectName().unsubscribe()"
  }, {
    "method": "application.projectName.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#projectName().isSubscribed()"
  }, {
    "method": "application.projectName.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#projectName().setIsSubscribed(boolean)"
  }, {
    "method": "application.selectNone",
    "params": [],
    "result": "void",
    "expression": "void Application#selectNone()"
  }, {
    "method": "application.setPanelLayout",
    "params": ["string"],
    "result": "void",
    "expression": "void Application#setPanelLayout(java.lang.String)"
  }, {
    "method": "application.deactivateEngine",
    "params": [],
    "result": "void",
    "expression": "void Application#deactivateEngine()"
  }, {
    "method": "application.arrowKeyUp",
    "params": [],
    "result": "void",
    "expression": "void Application#arrowKeyUp()"
  }, {
    "method": "application.createEffectTrack",
    "params": ["number"],
    "result": "void",
    "expression": "void Application#createEffectTrack(int)"
  }, {
    "method": "application.panelLayout",
    "params": [],
    "result": "object",
    "expression": "StringValue Application#panelLayout()"
  }, {
    "method": "application.panelLayout.get",
    "params": [],
    "result": "string",
    "expression": "String Application#panelLayout().get()"
  }, {
    "method": "application.panelLayout.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Application#panelLayout().getLimited(int)"
  }, {
    "method": "application.panelLayout.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#panelLayout().subscribe()"
  }, {
    "method": "application.panelLayout.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#panelLayout().unsubscribe()"
  }, {
    "method": "application.panelLayout.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#panelLayout().isSubscribed()"
  }, {
    "method": "application.panelLayout.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#panelLayout().setIsSubscribed(boolean)"
  }, {
    "method": "application.previousSubPanel",
    "params": [],
    "result": "void",
    "expression": "void Application#previousSubPanel()"
  }, {
    "method": "application.focusPanelToRight",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelToRight()"
  }, {
    "method": "application.duplicateAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#duplicateAction().invoke()"
  }, {
    "method": "application.focusPanelToLeft",
    "params": [],
    "result": "void",
    "expression": "void Application#focusPanelToLeft()"
  }, {
    "method": "application.toggleFullScreen",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleFullScreen()"
  }, {
    "method": "application.zoomToFit",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToFit()"
  }, {
    "method": "application.redoAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#redoAction().invoke()"
  }, {
    "method": "application.zoomToSelection",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToSelection()"
  }, {
    "method": "application.zoomToFitAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToFitAction().invoke()"
  }, {
    "method": "application.zoomOutAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomOutAction().invoke()"
  }, {
    "method": "application.zoomInAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomInAction().invoke()"
  }, {
    "method": "application.getAction",
    "params": ["string"],
    "result": "object",
    "expression": "Action Application#getAction(java.lang.String)"
  }, {
    "method": "application.getAction.getName",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getAction(java.lang.String).getName()"
  }, {
    "method": "application.getAction.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getAction(java.lang.String).getId()"
  }, {
    "method": "application.getAction.getCategory",
    "params": ["string"],
    "result": "object",
    "expression": "ActionCategory Application#getAction(java.lang.String).getCategory()"
  }, {
    "method": "application.getAction.getCategory.getName",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getAction(java.lang.String).getCategory().getName()"
  }, {
    "method": "application.getAction.getCategory.getActions",
    "params": ["string"],
    "result": "object[]",
    "expression": "Action[] Application#getAction(java.lang.String).getCategory().getActions()"
  }, {
    "method": "application.getAction.getCategory.getId",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getAction(java.lang.String).getCategory().getId()"
  }, {
    "method": "application.getAction.getMenuItemText",
    "params": ["string"],
    "result": "string",
    "expression": "String Application#getAction(java.lang.String).getMenuItemText()"
  }, {
    "method": "application.getAction.invoke",
    "params": ["string"],
    "result": "void",
    "expression": "void Application#getAction(java.lang.String).invoke()"
  }, {
    "method": "application.undoAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#undoAction().invoke()"
  }, {
    "method": "application.nextSubPanel",
    "params": [],
    "result": "void",
    "expression": "void Application#nextSubPanel()"
  }, {
    "method": "application.nextPanelLayout",
    "params": [],
    "result": "void",
    "expression": "void Application#nextPanelLayout()"
  }, {
    "method": "application.nextProject",
    "params": [],
    "result": "void",
    "expression": "void Application#nextProject()"
  }, {
    "method": "application.toggleDevices",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleDevices()"
  }, {
    "method": "application.toggleNoteEditor",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleNoteEditor()"
  }, {
    "method": "application.toggleMixer",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleMixer()"
  }, {
    "method": "application.toggleInspector",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleInspector()"
  }, {
    "method": "application.recordQuantizationGrid",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Application#recordQuantizationGrid()"
  }, {
    "method": "application.recordQuantizationGrid.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Application#recordQuantizationGrid().set(java.lang.String)"
  }, {
    "method": "application.recordQuantizationGrid.get",
    "params": [],
    "result": "string",
    "expression": "String Application#recordQuantizationGrid().get()"
  }, {
    "method": "application.recordQuantizationGrid.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizationGrid().subscribe()"
  }, {
    "method": "application.recordQuantizationGrid.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizationGrid().unsubscribe()"
  }, {
    "method": "application.recordQuantizationGrid.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizationGrid().isSubscribed()"
  }, {
    "method": "application.recordQuantizationGrid.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#recordQuantizationGrid().setIsSubscribed(boolean)"
  }, {
    "method": "application.zoomToSelectionAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#zoomToSelectionAction().invoke()"
  }, {
    "method": "application.toggleAutomationEditor",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleAutomationEditor()"
  }, {
    "method": "application.toggleBrowserVisibility",
    "params": [],
    "result": "void",
    "expression": "void Application#toggleBrowserVisibility()"
  }, {
    "method": "application.previousPanelLayout",
    "params": [],
    "result": "void",
    "expression": "void Application#previousPanelLayout()"
  }, {
    "method": "application.navigateToParentTrackGroup",
    "params": [],
    "result": "void",
    "expression": "void Application#navigateToParentTrackGroup()"
  }, {
    "method": "application.getActionCategories",
    "params": [],
    "result": "object[]",
    "expression": "ActionCategory[] Application#getActionCategories()"
  }, {
    "method": "application.recordQuantizeNoteLength",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Application#recordQuantizeNoteLength()"
  }, {
    "method": "application.recordQuantizeNoteLength.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().set(boolean)"
  }, {
    "method": "application.recordQuantizeNoteLength.toggle",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().toggle()"
  }, {
    "method": "application.recordQuantizeNoteLength.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().setToFalseAction().invoke()"
  }, {
    "method": "application.recordQuantizeNoteLength.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().setToTrueAction().invoke()"
  }, {
    "method": "application.recordQuantizeNoteLength.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().toggleAction().invoke()"
  }, {
    "method": "application.recordQuantizeNoteLength.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizeNoteLength().get()"
  }, {
    "method": "application.recordQuantizeNoteLength.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizeNoteLength().getAsBoolean()"
  }, {
    "method": "application.recordQuantizeNoteLength.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().subscribe()"
  }, {
    "method": "application.recordQuantizeNoteLength.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().unsubscribe()"
  }, {
    "method": "application.recordQuantizeNoteLength.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#recordQuantizeNoteLength().isSubscribed()"
  }, {
    "method": "application.recordQuantizeNoteLength.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().setIsSubscribed(boolean)"
  }, {
    "method": "application.recordQuantizeNoteLength.invoke",
    "params": [],
    "result": "void",
    "expression": "void Application#recordQuantizeNoteLength().invoke()"
  }, {
    "method": "application.createInstrumentTrack",
    "params": ["number"],
    "result": "void",
    "expression": "void Application#createInstrumentTrack(int)"
  }, {
    "method": "application.observedAction",
    "params": [],
    "result": "object",
    "expression": "ObservedActionValue Application#observedAction()"
  }, {
    "method": "application.observedAction.setObservedIds",
    "params": ["string[]"],
    "result": "void",
    "expression": "void Application#observedAction().setObservedIds(java.lang.String[])"
  }, {
    "method": "application.observedAction.isEnabled",
    "params": ["string"],
    "result": "boolean",
    "expression": "boolean Application#observedAction().isEnabled(java.lang.String)"
  }, {
    "method": "application.observedAction.values",
    "params": [],
    "result": "object",
    "expression": "Collection Application#observedAction().values()"
  }, {
    "method": "application.observedAction.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#observedAction().subscribe()"
  }, {
    "method": "application.observedAction.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Application#observedAction().unsubscribe()"
  }, {
    "method": "application.observedAction.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Application#observedAction().isSubscribed()"
  }, {
    "method": "application.observedAction.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Application#observedAction().setIsSubscribed(boolean)"
  }, {
    "method": "transport.stop",
    "params": [],
    "result": "void",
    "expression": "void Transport#stop()"
  }, {
    "method": "transport.rewind",
    "params": [],
    "result": "void",
    "expression": "void Transport#rewind()"
  }, {
    "method": "transport.tempo",
    "params": [],
    "result": "object",
    "expression": "Parameter Transport#tempo()"
  }, {
    "method": "transport.tempo.name",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().name()"
  }, {
    "method": "transport.tempo.name.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().name().get()"
  }, {
    "method": "transport.tempo.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().name().getLimited(int)"
  }, {
    "method": "transport.tempo.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().name().subscribe()"
  }, {
    "method": "transport.tempo.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().name().unsubscribe()"
  }, {
    "method": "transport.tempo.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().name().isSubscribed()"
  }, {
    "method": "transport.tempo.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().name().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue Transport#tempo().value()"
  }, {
    "method": "transport.tempo.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().set(double)"
  }, {
    "method": "transport.tempo.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().inc(double)"
  }, {
    "method": "transport.tempo.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().setImmediately(double)"
  }, {
    "method": "transport.tempo.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().setRaw(double)"
  }, {
    "method": "transport.tempo.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().value().incRaw(double)"
  }, {
    "method": "transport.tempo.value.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().value().get()"
  }, {
    "method": "transport.tempo.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().value().getAsDouble()"
  }, {
    "method": "transport.tempo.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().value().displayedValue()"
  }, {
    "method": "transport.tempo.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().value().displayedValue().get()"
  }, {
    "method": "transport.tempo.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().value().displayedValue().getLimited(int)"
  }, {
    "method": "transport.tempo.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().value().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().value().getRaw()"
  }, {
    "method": "transport.tempo.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().subscribe()"
  }, {
    "method": "transport.tempo.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().value().unsubscribe()"
  }, {
    "method": "transport.tempo.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().value().isSubscribed()"
  }, {
    "method": "transport.tempo.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().value().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.reset",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().reset()"
  }, {
    "method": "transport.tempo.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().touch(boolean)"
  }, {
    "method": "transport.tempo.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().restoreAutomationControl()"
  }, {
    "method": "transport.tempo.setLabel",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#tempo().setLabel(java.lang.String)"
  }, {
    "method": "transport.tempo.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().setIndication(boolean)"
  }, {
    "method": "transport.tempo.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue Transport#tempo().modulatedValue()"
  }, {
    "method": "transport.tempo.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().modulatedValue().get()"
  }, {
    "method": "transport.tempo.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().modulatedValue().getAsDouble()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().modulatedValue().displayedValue()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().modulatedValue().displayedValue().get()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().modulatedValue().getRaw()"
  }, {
    "method": "transport.tempo.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().subscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().modulatedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#tempo().exists()"
  }, {
    "method": "transport.tempo.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().exists().get()"
  }, {
    "method": "transport.tempo.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().exists().getAsBoolean()"
  }, {
    "method": "transport.tempo.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().exists().subscribe()"
  }, {
    "method": "transport.tempo.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().exists().unsubscribe()"
  }, {
    "method": "transport.tempo.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().exists().isSubscribed()"
  }, {
    "method": "transport.tempo.exists.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().exists().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().subscribe()"
  }, {
    "method": "transport.tempo.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().unsubscribe()"
  }, {
    "method": "transport.tempo.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().isSubscribed()"
  }, {
    "method": "transport.tempo.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().set(double)"
  }, {
    "method": "transport.tempo.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#tempo().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.tempo.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().inc(double)"
  }, {
    "method": "transport.tempo.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().setImmediately(double)"
  }, {
    "method": "transport.tempo.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().setRaw(double)"
  }, {
    "method": "transport.tempo.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#tempo().incRaw(double)"
  }, {
    "method": "transport.tempo.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().get()"
  }, {
    "method": "transport.tempo.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().getAsDouble()"
  }, {
    "method": "transport.tempo.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#tempo().displayedValue()"
  }, {
    "method": "transport.tempo.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#tempo().displayedValue().get()"
  }, {
    "method": "transport.tempo.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#tempo().displayedValue().getLimited(int)"
  }, {
    "method": "transport.tempo.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().displayedValue().subscribe()"
  }, {
    "method": "transport.tempo.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#tempo().displayedValue().unsubscribe()"
  }, {
    "method": "transport.tempo.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#tempo().displayedValue().isSubscribed()"
  }, {
    "method": "transport.tempo.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#tempo().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.tempo.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#tempo().getRaw()"
  }, {
    "method": "transport.crossfade",
    "params": [],
    "result": "object",
    "expression": "Parameter Transport#crossfade()"
  }, {
    "method": "transport.crossfade.name",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().name()"
  }, {
    "method": "transport.crossfade.name.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().name().get()"
  }, {
    "method": "transport.crossfade.name.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().name().getLimited(int)"
  }, {
    "method": "transport.crossfade.name.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().name().subscribe()"
  }, {
    "method": "transport.crossfade.name.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().name().unsubscribe()"
  }, {
    "method": "transport.crossfade.name.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().name().isSubscribed()"
  }, {
    "method": "transport.crossfade.name.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().name().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.value",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue Transport#crossfade().value()"
  }, {
    "method": "transport.crossfade.value.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.value.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().set(double)"
  }, {
    "method": "transport.crossfade.value.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.value.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().inc(double)"
  }, {
    "method": "transport.crossfade.value.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().setImmediately(double)"
  }, {
    "method": "transport.crossfade.value.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().setRaw(double)"
  }, {
    "method": "transport.crossfade.value.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().value().incRaw(double)"
  }, {
    "method": "transport.crossfade.value.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().value().get()"
  }, {
    "method": "transport.crossfade.value.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().value().getAsDouble()"
  }, {
    "method": "transport.crossfade.value.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().value().displayedValue()"
  }, {
    "method": "transport.crossfade.value.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().value().displayedValue().get()"
  }, {
    "method": "transport.crossfade.value.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().value().displayedValue().getLimited(int)"
  }, {
    "method": "transport.crossfade.value.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.value.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.value.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().value().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.value.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().value().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.value.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().value().getRaw()"
  }, {
    "method": "transport.crossfade.value.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().subscribe()"
  }, {
    "method": "transport.crossfade.value.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().value().unsubscribe()"
  }, {
    "method": "transport.crossfade.value.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().value().isSubscribed()"
  }, {
    "method": "transport.crossfade.value.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().value().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.reset",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().reset()"
  }, {
    "method": "transport.crossfade.touch",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().touch(boolean)"
  }, {
    "method": "transport.crossfade.restoreAutomationControl",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().restoreAutomationControl()"
  }, {
    "method": "transport.crossfade.setLabel",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#crossfade().setLabel(java.lang.String)"
  }, {
    "method": "transport.crossfade.setIndication",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().setIndication(boolean)"
  }, {
    "method": "transport.crossfade.modulatedValue",
    "params": [],
    "result": "object",
    "expression": "RangedValue Transport#crossfade().modulatedValue()"
  }, {
    "method": "transport.crossfade.modulatedValue.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().modulatedValue().get()"
  }, {
    "method": "transport.crossfade.modulatedValue.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().modulatedValue().getAsDouble()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().modulatedValue().displayedValue()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().modulatedValue().displayedValue().get()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().modulatedValue().displayedValue().getLimited(int)"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().modulatedValue().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.modulatedValue.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.modulatedValue.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().modulatedValue().getRaw()"
  }, {
    "method": "transport.crossfade.modulatedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().subscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.modulatedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().modulatedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.modulatedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().modulatedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#crossfade().exists()"
  }, {
    "method": "transport.crossfade.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().exists().get()"
  }, {
    "method": "transport.crossfade.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().exists().getAsBoolean()"
  }, {
    "method": "transport.crossfade.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().exists().subscribe()"
  }, {
    "method": "transport.crossfade.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().exists().unsubscribe()"
  }, {
    "method": "transport.crossfade.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().exists().isSubscribed()"
  }, {
    "method": "transport.crossfade.exists.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().exists().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().subscribe()"
  }, {
    "method": "transport.crossfade.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().unsubscribe()"
  }, {
    "method": "transport.crossfade.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().isSubscribed()"
  }, {
    "method": "transport.crossfade.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().set(double)"
  }, {
    "method": "transport.crossfade.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#crossfade().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.crossfade.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().inc(double)"
  }, {
    "method": "transport.crossfade.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().setImmediately(double)"
  }, {
    "method": "transport.crossfade.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().setRaw(double)"
  }, {
    "method": "transport.crossfade.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#crossfade().incRaw(double)"
  }, {
    "method": "transport.crossfade.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().get()"
  }, {
    "method": "transport.crossfade.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().getAsDouble()"
  }, {
    "method": "transport.crossfade.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#crossfade().displayedValue()"
  }, {
    "method": "transport.crossfade.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#crossfade().displayedValue().get()"
  }, {
    "method": "transport.crossfade.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#crossfade().displayedValue().getLimited(int)"
  }, {
    "method": "transport.crossfade.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().displayedValue().subscribe()"
  }, {
    "method": "transport.crossfade.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#crossfade().displayedValue().unsubscribe()"
  }, {
    "method": "transport.crossfade.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#crossfade().displayedValue().isSubscribed()"
  }, {
    "method": "transport.crossfade.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#crossfade().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.crossfade.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#crossfade().getRaw()"
  }, {
    "method": "transport.record",
    "params": [],
    "result": "void",
    "expression": "void Transport#record()"
  }, {
    "method": "transport.play",
    "params": [],
    "result": "void",
    "expression": "void Transport#play()"
  }, {
    "method": "transport.restart",
    "params": [],
    "result": "void",
    "expression": "void Transport#restart()"
  }, {
    "method": "transport.getPosition",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getPosition()"
  }, {
    "method": "transport.getPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getPosition().getFormatted()"
  }, {
    "method": "transport.getPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getPosition().get()"
  }, {
    "method": "transport.getPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getPosition().getAsDouble()"
  }, {
    "method": "transport.getPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getPosition().subscribe()"
  }, {
    "method": "transport.getPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getPosition().unsubscribe()"
  }, {
    "method": "transport.getPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getPosition().isSubscribed()"
  }, {
    "method": "transport.getPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#getPosition().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getPosition().set(double)"
  }, {
    "method": "transport.getPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getPosition().inc(double)"
  }, {
    "method": "transport.isArrangerLoopEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerLoopEnabled()"
  }, {
    "method": "transport.isArrangerLoopEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerLoopEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().toggle()"
  }, {
    "method": "transport.isArrangerLoopEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isArrangerLoopEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isArrangerLoopEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isArrangerLoopEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerLoopEnabled().get()"
  }, {
    "method": "transport.isArrangerLoopEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerLoopEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerLoopEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerLoopEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerLoopEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerLoopEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerLoopEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerLoopEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerLoopEnabled().invoke()"
  }, {
    "method": "transport.tapTempo",
    "params": [],
    "result": "void",
    "expression": "void Transport#tapTempo()"
  }, {
    "method": "transport.preRoll",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#preRoll()"
  }, {
    "method": "transport.preRoll.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#preRoll().set(java.lang.String)"
  }, {
    "method": "transport.preRoll.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#preRoll().get()"
  }, {
    "method": "transport.preRoll.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#preRoll().subscribe()"
  }, {
    "method": "transport.preRoll.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#preRoll().unsubscribe()"
  }, {
    "method": "transport.preRoll.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#preRoll().isSubscribed()"
  }, {
    "method": "transport.preRoll.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#preRoll().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#timeSignature().get()"
  }, {
    "method": "transport.timeSignature.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#timeSignature().set(java.lang.String)"
  }, {
    "method": "transport.timeSignature.denominator",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue Transport#timeSignature().denominator()"
  }, {
    "method": "transport.timeSignature.denominator.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().set(int)"
  }, {
    "method": "transport.timeSignature.denominator.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().inc(int)"
  }, {
    "method": "transport.timeSignature.denominator.get",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().denominator().get()"
  }, {
    "method": "transport.timeSignature.denominator.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().denominator().getAsInt()"
  }, {
    "method": "transport.timeSignature.denominator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().subscribe()"
  }, {
    "method": "transport.timeSignature.denominator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().unsubscribe()"
  }, {
    "method": "transport.timeSignature.denominator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().denominator().isSubscribed()"
  }, {
    "method": "transport.timeSignature.denominator.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#timeSignature().denominator().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.numerator",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue Transport#timeSignature().numerator()"
  }, {
    "method": "transport.timeSignature.numerator.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().set(int)"
  }, {
    "method": "transport.timeSignature.numerator.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().inc(int)"
  }, {
    "method": "transport.timeSignature.numerator.get",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().numerator().get()"
  }, {
    "method": "transport.timeSignature.numerator.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().numerator().getAsInt()"
  }, {
    "method": "transport.timeSignature.numerator.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().subscribe()"
  }, {
    "method": "transport.timeSignature.numerator.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().unsubscribe()"
  }, {
    "method": "transport.timeSignature.numerator.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().numerator().isSubscribed()"
  }, {
    "method": "transport.timeSignature.numerator.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#timeSignature().numerator().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.ticks",
    "params": [],
    "result": "object",
    "expression": "SettableIntegerValue Transport#timeSignature().ticks()"
  }, {
    "method": "transport.timeSignature.ticks.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().set(int)"
  }, {
    "method": "transport.timeSignature.ticks.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().inc(int)"
  }, {
    "method": "transport.timeSignature.ticks.get",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().ticks().get()"
  }, {
    "method": "transport.timeSignature.ticks.getAsInt",
    "params": [],
    "result": "number",
    "expression": "int Transport#timeSignature().ticks().getAsInt()"
  }, {
    "method": "transport.timeSignature.ticks.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().subscribe()"
  }, {
    "method": "transport.timeSignature.ticks.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().unsubscribe()"
  }, {
    "method": "transport.timeSignature.ticks.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().ticks().isSubscribed()"
  }, {
    "method": "transport.timeSignature.ticks.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#timeSignature().ticks().setIsSubscribed(boolean)"
  }, {
    "method": "transport.timeSignature.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().subscribe()"
  }, {
    "method": "transport.timeSignature.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#timeSignature().unsubscribe()"
  }, {
    "method": "transport.timeSignature.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#timeSignature().isSubscribed()"
  }, {
    "method": "transport.timeSignature.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#timeSignature().setIsSubscribed(boolean)"
  }, {
    "method": "transport.continuePlayback",
    "params": [],
    "result": "void",
    "expression": "void Transport#continuePlayback()"
  }, {
    "method": "transport.restartAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#restartAction().invoke()"
  }, {
    "method": "transport.setPosition",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#setPosition(double)"
  }, {
    "method": "transport.metronomeVolume",
    "params": [],
    "result": "object",
    "expression": "SettableRangedValue Transport#metronomeVolume()"
  }, {
    "method": "transport.metronomeVolume.set",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().set(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.metronomeVolume.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().set(double)"
  }, {
    "method": "transport.metronomeVolume.inc",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().inc(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.metronomeVolume.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().inc(double)"
  }, {
    "method": "transport.metronomeVolume.setImmediately",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().setImmediately(double)"
  }, {
    "method": "transport.metronomeVolume.setRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().setRaw(double)"
  }, {
    "method": "transport.metronomeVolume.incRaw",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().incRaw(double)"
  }, {
    "method": "transport.metronomeVolume.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#metronomeVolume().get()"
  }, {
    "method": "transport.metronomeVolume.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#metronomeVolume().getAsDouble()"
  }, {
    "method": "transport.metronomeVolume.displayedValue",
    "params": [],
    "result": "object",
    "expression": "StringValue Transport#metronomeVolume().displayedValue()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#metronomeVolume().displayedValue().get()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.getLimited",
    "params": ["number"],
    "result": "string",
    "expression": "String Transport#metronomeVolume().displayedValue().getLimited(int)"
  }, {
    "method": "transport.metronomeVolume.displayedValue.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().displayedValue().subscribe()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().displayedValue().unsubscribe()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#metronomeVolume().displayedValue().isSubscribed()"
  }, {
    "method": "transport.metronomeVolume.displayedValue.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().displayedValue().setIsSubscribed(boolean)"
  }, {
    "method": "transport.metronomeVolume.getRaw",
    "params": [],
    "result": "number",
    "expression": "double Transport#metronomeVolume().getRaw()"
  }, {
    "method": "transport.metronomeVolume.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().subscribe()"
  }, {
    "method": "transport.metronomeVolume.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#metronomeVolume().unsubscribe()"
  }, {
    "method": "transport.metronomeVolume.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#metronomeVolume().isSubscribed()"
  }, {
    "method": "transport.metronomeVolume.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#metronomeVolume().setIsSubscribed(boolean)"
  }, {
    "method": "transport.fastForward",
    "params": [],
    "result": "void",
    "expression": "void Transport#fastForward()"
  }, {
    "method": "transport.isPunchInEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isPunchInEnabled()"
  }, {
    "method": "transport.isPunchInEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().set(boolean)"
  }, {
    "method": "transport.isPunchInEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().toggle()"
  }, {
    "method": "transport.isPunchInEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isPunchInEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isPunchInEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isPunchInEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchInEnabled().get()"
  }, {
    "method": "transport.isPunchInEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchInEnabled().getAsBoolean()"
  }, {
    "method": "transport.isPunchInEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().subscribe()"
  }, {
    "method": "transport.isPunchInEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().unsubscribe()"
  }, {
    "method": "transport.isPunchInEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchInEnabled().isSubscribed()"
  }, {
    "method": "transport.isPunchInEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isPunchInEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchInEnabled().invoke()"
  }, {
    "method": "transport.playAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#playAction().invoke()"
  }, {
    "method": "transport.isPunchOutEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isPunchOutEnabled()"
  }, {
    "method": "transport.isPunchOutEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().set(boolean)"
  }, {
    "method": "transport.isPunchOutEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().toggle()"
  }, {
    "method": "transport.isPunchOutEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isPunchOutEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isPunchOutEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isPunchOutEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchOutEnabled().get()"
  }, {
    "method": "transport.isPunchOutEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchOutEnabled().getAsBoolean()"
  }, {
    "method": "transport.isPunchOutEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().subscribe()"
  }, {
    "method": "transport.isPunchOutEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().unsubscribe()"
  }, {
    "method": "transport.isPunchOutEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPunchOutEnabled().isSubscribed()"
  }, {
    "method": "transport.isPunchOutEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isPunchOutEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPunchOutEnabled().invoke()"
  }, {
    "method": "transport.recordAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#recordAction().invoke()"
  }, {
    "method": "transport.isMetronomeEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isMetronomeEnabled()"
  }, {
    "method": "transport.isMetronomeEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().set(boolean)"
  }, {
    "method": "transport.isMetronomeEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().toggle()"
  }, {
    "method": "transport.isMetronomeEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isMetronomeEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isMetronomeEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isMetronomeEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeEnabled().get()"
  }, {
    "method": "transport.isMetronomeEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeEnabled().getAsBoolean()"
  }, {
    "method": "transport.isMetronomeEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().subscribe()"
  }, {
    "method": "transport.isMetronomeEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().unsubscribe()"
  }, {
    "method": "transport.isMetronomeEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeEnabled().isSubscribed()"
  }, {
    "method": "transport.isMetronomeEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isMetronomeEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeEnabled().invoke()"
  }, {
    "method": "transport.isPlaying",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isPlaying()"
  }, {
    "method": "transport.isPlaying.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPlaying().set(boolean)"
  }, {
    "method": "transport.isPlaying.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().toggle()"
  }, {
    "method": "transport.isPlaying.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().setToFalseAction().invoke()"
  }, {
    "method": "transport.isPlaying.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().setToTrueAction().invoke()"
  }, {
    "method": "transport.isPlaying.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().toggleAction().invoke()"
  }, {
    "method": "transport.isPlaying.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPlaying().get()"
  }, {
    "method": "transport.isPlaying.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPlaying().getAsBoolean()"
  }, {
    "method": "transport.isPlaying.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().subscribe()"
  }, {
    "method": "transport.isPlaying.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().unsubscribe()"
  }, {
    "method": "transport.isPlaying.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isPlaying().isSubscribed()"
  }, {
    "method": "transport.isPlaying.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isPlaying().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isPlaying.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isPlaying().invoke()"
  }, {
    "method": "transport.tapTempoAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#tapTempoAction().invoke()"
  }, {
    "method": "transport.stopAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#stopAction().invoke()"
  }, {
    "method": "transport.increaseTempo",
    "params": ["number", "number"],
    "result": "void",
    "expression": "void Transport#increaseTempo(java.lang.Number, java.lang.Number)"
  }, {
    "method": "transport.getInPosition",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getInPosition()"
  }, {
    "method": "transport.getInPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getInPosition().getFormatted()"
  }, {
    "method": "transport.getInPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getInPosition().get()"
  }, {
    "method": "transport.getInPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getInPosition().getAsDouble()"
  }, {
    "method": "transport.getInPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getInPosition().subscribe()"
  }, {
    "method": "transport.getInPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getInPosition().unsubscribe()"
  }, {
    "method": "transport.getInPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getInPosition().isSubscribed()"
  }, {
    "method": "transport.getInPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#getInPosition().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getInPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getInPosition().set(double)"
  }, {
    "method": "transport.getInPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getInPosition().inc(double)"
  }, {
    "method": "transport.incPosition",
    "params": ["number", "boolean"],
    "result": "void",
    "expression": "void Transport#incPosition(double, boolean)"
  }, {
    "method": "transport.getOutPosition",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getOutPosition()"
  }, {
    "method": "transport.getOutPosition.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getOutPosition().getFormatted()"
  }, {
    "method": "transport.getOutPosition.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getOutPosition().get()"
  }, {
    "method": "transport.getOutPosition.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getOutPosition().getAsDouble()"
  }, {
    "method": "transport.getOutPosition.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getOutPosition().subscribe()"
  }, {
    "method": "transport.getOutPosition.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getOutPosition().unsubscribe()"
  }, {
    "method": "transport.getOutPosition.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getOutPosition().isSubscribed()"
  }, {
    "method": "transport.getOutPosition.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#getOutPosition().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getOutPosition.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getOutPosition().set(double)"
  }, {
    "method": "transport.getOutPosition.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getOutPosition().inc(double)"
  }, {
    "method": "transport.automationWriteMode",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#automationWriteMode()"
  }, {
    "method": "transport.automationWriteMode.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#automationWriteMode().set(java.lang.String)"
  }, {
    "method": "transport.automationWriteMode.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#automationWriteMode().get()"
  }, {
    "method": "transport.automationWriteMode.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#automationWriteMode().subscribe()"
  }, {
    "method": "transport.automationWriteMode.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#automationWriteMode().unsubscribe()"
  }, {
    "method": "transport.automationWriteMode.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#automationWriteMode().isSubscribed()"
  }, {
    "method": "transport.automationWriteMode.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#automationWriteMode().setIsSubscribed(boolean)"
  }, {
    "method": "transport.togglePlay",
    "params": [],
    "result": "void",
    "expression": "void Transport#togglePlay()"
  }, {
    "method": "transport.fastForwardAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#fastForwardAction().invoke()"
  }, {
    "method": "transport.rewindAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#rewindAction().invoke()"
  }, {
    "method": "transport.defaultLaunchQuantization",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#defaultLaunchQuantization()"
  }, {
    "method": "transport.defaultLaunchQuantization.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#defaultLaunchQuantization().set(java.lang.String)"
  }, {
    "method": "transport.defaultLaunchQuantization.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#defaultLaunchQuantization().get()"
  }, {
    "method": "transport.defaultLaunchQuantization.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#defaultLaunchQuantization().subscribe()"
  }, {
    "method": "transport.defaultLaunchQuantization.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#defaultLaunchQuantization().unsubscribe()"
  }, {
    "method": "transport.defaultLaunchQuantization.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#defaultLaunchQuantization().isSubscribed()"
  }, {
    "method": "transport.defaultLaunchQuantization.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#defaultLaunchQuantization().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isClipLauncherOverdubEnabled()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().set(boolean)"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().toggle()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherOverdubEnabled().get()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherOverdubEnabled().getAsBoolean()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().subscribe()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().unsubscribe()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherOverdubEnabled().isSubscribed()"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isClipLauncherOverdubEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherOverdubEnabled().invoke()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerAutomationWriteEnabled()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().toggle()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerAutomationWriteEnabled().get()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerAutomationWriteEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerAutomationWriteEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerAutomationWriteEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerAutomationWriteEnabled().invoke()"
  }, {
    "method": "transport.isArrangerRecordEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerRecordEnabled()"
  }, {
    "method": "transport.isArrangerRecordEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerRecordEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().toggle()"
  }, {
    "method": "transport.isArrangerRecordEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isArrangerRecordEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isArrangerRecordEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isArrangerRecordEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerRecordEnabled().get()"
  }, {
    "method": "transport.isArrangerRecordEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerRecordEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerRecordEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerRecordEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerRecordEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerRecordEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerRecordEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerRecordEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerRecordEnabled().invoke()"
  }, {
    "method": "transport.continuePlaybackAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#continuePlaybackAction().invoke()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isClipLauncherAutomationWriteEnabled()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().set(boolean)"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().toggle()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherAutomationWriteEnabled().get()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherAutomationWriteEnabled().getAsBoolean()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().subscribe()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().unsubscribe()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isClipLauncherAutomationWriteEnabled().isSubscribed()"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isClipLauncherAutomationWriteEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isClipLauncherAutomationWriteEnabled().invoke()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset",
    "params": [],
    "result": "object",
    "expression": "SettableBeatTimeValue Transport#getClipLauncherPostRecordingTimeOffset()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.getFormatted",
    "params": [],
    "result": "string",
    "expression": "String Transport#getClipLauncherPostRecordingTimeOffset().getFormatted()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.get",
    "params": [],
    "result": "number",
    "expression": "double Transport#getClipLauncherPostRecordingTimeOffset().get()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.getAsDouble",
    "params": [],
    "result": "number",
    "expression": "double Transport#getClipLauncherPostRecordingTimeOffset().getAsDouble()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().subscribe()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().unsubscribe()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#getClipLauncherPostRecordingTimeOffset().isSubscribed()"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().setIsSubscribed(boolean)"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.set",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().set(double)"
  }, {
    "method": "transport.getClipLauncherPostRecordingTimeOffset.inc",
    "params": ["number"],
    "result": "void",
    "expression": "void Transport#getClipLauncherPostRecordingTimeOffset().inc(double)"
  }, {
    "method": "transport.returnToArrangement",
    "params": [],
    "result": "void",
    "expression": "void Transport#returnToArrangement()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction",
    "params": [],
    "result": "object",
    "expression": "SettableEnumValue Transport#clipLauncherPostRecordingAction()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.set",
    "params": ["string"],
    "result": "void",
    "expression": "void Transport#clipLauncherPostRecordingAction().set(java.lang.String)"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.get",
    "params": [],
    "result": "string",
    "expression": "String Transport#clipLauncherPostRecordingAction().get()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#clipLauncherPostRecordingAction().subscribe()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#clipLauncherPostRecordingAction().unsubscribe()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#clipLauncherPostRecordingAction().isSubscribed()"
  }, {
    "method": "transport.clipLauncherPostRecordingAction.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#clipLauncherPostRecordingAction().setIsSubscribed(boolean)"
  }, {
    "method": "transport.resetAutomationOverrides",
    "params": [],
    "result": "void",
    "expression": "void Transport#resetAutomationOverrides()"
  }, {
    "method": "transport.isAutomationOverrideActive",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#isAutomationOverrideActive()"
  }, {
    "method": "transport.isAutomationOverrideActive.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isAutomationOverrideActive().get()"
  }, {
    "method": "transport.isAutomationOverrideActive.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isAutomationOverrideActive().getAsBoolean()"
  }, {
    "method": "transport.isAutomationOverrideActive.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isAutomationOverrideActive().subscribe()"
  }, {
    "method": "transport.isAutomationOverrideActive.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isAutomationOverrideActive().unsubscribe()"
  }, {
    "method": "transport.isAutomationOverrideActive.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isAutomationOverrideActive().isSubscribed()"
  }, {
    "method": "transport.isAutomationOverrideActive.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isAutomationOverrideActive().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isMetronomeAudibleDuringPreRoll()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().set(boolean)"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().toggle()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().setToFalseAction().invoke()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().setToTrueAction().invoke()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().toggleAction().invoke()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeAudibleDuringPreRoll().get()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeAudibleDuringPreRoll().getAsBoolean()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().subscribe()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().unsubscribe()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeAudibleDuringPreRoll().isSubscribed()"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isMetronomeAudibleDuringPreRoll.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeAudibleDuringPreRoll().invoke()"
  }, {
    "method": "transport.toggleLatchAutomationWriteMode",
    "params": [],
    "result": "void",
    "expression": "void Transport#toggleLatchAutomationWriteMode()"
  }, {
    "method": "transport.isArrangerOverdubEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isArrangerOverdubEnabled()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().set(boolean)"
  }, {
    "method": "transport.isArrangerOverdubEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().toggle()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerOverdubEnabled().get()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerOverdubEnabled().getAsBoolean()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().subscribe()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().unsubscribe()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isArrangerOverdubEnabled().isSubscribed()"
  }, {
    "method": "transport.isArrangerOverdubEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isArrangerOverdubEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isArrangerOverdubEnabled().invoke()"
  }, {
    "method": "transport.toggleWriteArrangerAutomation",
    "params": [],
    "result": "void",
    "expression": "void Transport#toggleWriteArrangerAutomation()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled",
    "params": [],
    "result": "object",
    "expression": "SettableBooleanValue Transport#isMetronomeTickPlaybackEnabled()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.set",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().set(boolean)"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.toggle",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().toggle()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.setToFalseAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().setToFalseAction().invoke()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.setToTrueAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().setToTrueAction().invoke()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.toggleAction.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().toggleAction().invoke()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeTickPlaybackEnabled().get()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeTickPlaybackEnabled().getAsBoolean()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().subscribe()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().unsubscribe()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isMetronomeTickPlaybackEnabled().isSubscribed()"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().setIsSubscribed(boolean)"
  }, {
    "method": "transport.isMetronomeTickPlaybackEnabled.invoke",
    "params": [],
    "result": "void",
    "expression": "void Transport#isMetronomeTickPlaybackEnabled().invoke()"
  }, {
    "method": "transport.toggleWriteClipLauncherAutomation",
    "params": [],
    "result": "void",
    "expression": "void Transport#toggleWriteClipLauncherAutomation()"
  }, {
    "method": "transport.exists",
    "params": [],
    "result": "object",
    "expression": "BooleanValue Transport#exists()"
  }, {
    "method": "transport.exists.get",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#exists().get()"
  }, {
    "method": "transport.exists.getAsBoolean",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#exists().getAsBoolean()"
  }, {
    "method": "transport.exists.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#exists().subscribe()"
  }, {
    "method": "transport.exists.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#exists().unsubscribe()"
  }, {
    "method": "transport.exists.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#exists().isSubscribed()"
  }, {
    "method": "transport.exists.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#exists().setIsSubscribed(boolean)"
  }, {
    "method": "transport.subscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#subscribe()"
  }, {
    "method": "transport.unsubscribe",
    "params": [],
    "result": "void",
    "expression": "void Transport#unsubscribe()"
  }, {
    "method": "transport.isSubscribed",
    "params": [],
    "result": "boolean",
    "expression": "boolean Transport#isSubscribed()"
  }, {
    "method": "transport.setIsSubscribed",
    "params": ["boolean"],
    "result": "void",
    "expression": "void Transport#setIsSubscribed(boolean)"
  }],
  "events": [{
    "event": "rpc.log"
  }, {
    "event": "host.getNotificationSettings.getUserNotificationsEnabled"
  }, {
    "event": "application.displayProfile"
  }, {
    "event": "application.hasActiveEngine"
  }, {
    "event": "application.projectName"
  }, {
    "event": "application.panelLayout"
  }, {
    "event": "application.recordQuantizationGrid"
  }, {
    "event": "application.recordQuantizeNoteLength"
  }, {
    "event": "application.observedAction"
  }, {
    "event": "transport.tempo.name"
  }, {
    "event": "transport.tempo.value"
  }, {
    "event": "transport.tempo.value.displayedValue"
  }, {
    "event": "transport.tempo.modulatedValue"
  }, {
    "event": "transport.tempo.modulatedValue.displayedValue"
  }, {
    "event": "transport.tempo.exists"
  }, {
    "event": "transport.tempo.displayedValue"
  }, {
    "event": "transport.crossfade.name"
  }, {
    "event": "transport.crossfade.value"
  }, {
    "event": "transport.crossfade.value.displayedValue"
  }, {
    "event": "transport.crossfade.modulatedValue"
  }, {
    "event": "transport.crossfade.modulatedValue.displayedValue"
  }, {
    "event": "transport.crossfade.exists"
  }, {
    "event": "transport.crossfade.displayedValue"
  }, {
    "event": "transport.getPosition"
  }, {
    "event": "transport.isArrangerLoopEnabled"
  }, {
    "event": "transport.preRoll"
  }, {
    "event": "transport.timeSignature"
  }, {
    "event": "transport.timeSignature.denominator"
  }, {
    "event": "transport.timeSignature.numerator"
  }, {
    "event": "transport.timeSignature.ticks"
  }, {
    "event": "transport.metronomeVolume"
  }, {
    "event": "transport.metronomeVolume.displayedValue"
  }, {
    "event": "transport.isPunchInEnabled"
  }, {
    "event": "transport.isPunchOutEnabled"
  }, {
    "event": "transport.isMetronomeEnabled"
  }, {
    "event": "transport.isPlaying"
  }, {
    "event": "transport.getInPosition"
  }, {
    "event": "transport.getOutPosition"
  }, {
    "event": "transport.automationWriteMode"
  }, {
    "event": "transport.defaultLaunchQuantization"
  }, {
    "event": "transport.isClipLauncherOverdubEnabled"
  }, {
    "event": "transport.isArrangerAutomationWriteEnabled"
  }, {
    "event": "transport.isArrangerRecordEnabled"
  }, {
    "event": "transport.isClipLauncherAutomationWriteEnabled"
  }, {
    "event": "transport.getClipLauncherPostRecordingTimeOffset"
  }, {
    "event": "transport.clipLauncherPostRecordingAction"
  }, {
    "event": "transport.isAutomationOverrideActive"
  }, {
    "event": "transport.isMetronomeAudibleDuringPreRoll"
  }, {
    "event": "transport.isArrangerOverdubEnabled"
  }, {
    "event": "transport.isMetronomeTickPlaybackEnabled"
  }, {
    "event": "transport.exists"
  }]
}
