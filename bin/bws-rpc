#!/usr/bin/env node

const path = require('path');
const updateNotifier = require('update-notifier');
const program = require('commander');
const WebSocket = require('rpc-websockets').Client;
const bitwig = require('../lib/bitwig-websocket-rpc');
const pkg = require('../package.json');
const beautify = require('js-beautify');

const defaultUrl = 'ws://localhost:8887';
const enableAllConfig = {
  useProject: true,
  useApplication: true,
  useTransport: true,
  useArranger: true,
  useGroove: true,
  useMixer: true,
  useArrangerCursorClip: true,
  useLauncherCursorClip: true,
  useCursorTrack: true,
  cursorTrackShouldFollowSelection: true,
  useSiblingsTrackBank: true,
  siblingsTrackBankIncludeEffectTracks: false,
  siblingsTrackBankIncludeMasterTrack: false,
  useChildTrackBank: true,
  childTrackBankHasFlatList: false,
  useCursorDevice: true,
  useChainSelector: true,
  useCursorDeviceLayer: true,
  useCursorRemoteControlsPage: true,
  useDeviceLayerBank: true,
  useDrumPadBank: true,
  useSiblingsDeviceBank: true,
  useChainDeviceBank: true,
  useSceneBank: true,
  useMainTrackBank: true,
  mainTrackBankFollowCursorTrack: true,
  useEffectTrackBank: true,
  useMasterTrack: true,
  useBrowser: true
};
const requestTimeoutMillis = 2000;

const getCurrentConfig = url => {
  return new Promise((resolve, reject) =>{
    const ws = new WebSocket(url, {
      autoconnect: true,
      reconnect: false
    });
    ws.on('open', async () => {
      try {
        const config = await ws.call('rpc.config', null, requestTimeoutMillis);
        ws.close();
        resolve(config);
      } catch (err) {
        ws.close();
        reject(err);
      }
    });
    ws.on('error', (err) => {
      ws.close();
      reject(err);
    });
  });
};

const reportMethodsAndEvents = url => {
  const ws = new WebSocket(url, {
    autoconnect: true,
    reconnect: false
  });
  ws.on('open', async () => {
    const report = await ws.call('rpc.report', null, requestTimeoutMillis);
    ws.close();
    print(report);
  });
};

const reportActions = (url, abbrev) => {
  const ws = new WebSocket(url, {
    autoconnect: true,
    reconnect: false
  });
  ws.on('open', async () => {
    const method = abbrev ? 'app.actions' : 'application.getActions';
    const actions = await ws.call(method, null, requestTimeoutMillis);
    ws.close();
    print(actions);
  });
};

const monitorEvents = url => {
  const ws = new WebSocket(url, {
    autoconnect: true,
    reconnect: true
  });
  ws.on('open', async () => {
    report = await ws.call('rpc.report');
    const events = report.events.filter((e) => {
      return ! e.event.startsWith('test.') && ! e.event.startsWith('rpc.');
    }).map((e) => {return e.event;});
    ws.subscribe(events);
    events.forEach((e) => {
      ws.on(e, function() {
        console.log(`${Date.now()} - [${e}]`, arguments);
      });
    });
  });
};

const monitorLogs = url => {
  const ws = new WebSocket(url, {
    autoconnect: true,
    reconnect: true
  });
  ws.on('open', async () => {
    ws.subscribe('rpc.log');
    ws.on('rpc.log', log => {
      console.log(log);
    });
  });
};

const print = obj => {
  console.log(beautify(JSON.stringify(obj), {indent_size: 2}));
};

// check if a new version is available and print an update notification
const notifier = updateNotifier({pkg});
if (notifier.update && notifier.update.latest !== pkg.version) {
  notifier.notify({defer: false});
}

program
  .description('Configuration and helper tools for bitwig-websocket-rpc.')
  .usage('[options]')
  .option('-u, --url <url>', `URL of websockets server. (default: ${defaultUrl})`)
  .option('-c, --config <path>', 'config file(.js|.json) path.')
  .option('-a, --all', 'enable all RPC methods and events. this option is ignored by -c, --config option.')
  .option('-b, --abbrev', 'enable abbreviated method and event name.(experimental) this option is ignored by -c, --config option.')
  .option('-p, --printConfig', 'dry run, print current or intended configuration as JSON.')
  .option('-r, --report', 'report accessible RPC methods and evnets as JSON.')
  .option('-k, --actions', 'report result of Application#getActions() as JSON.')
  .option('-e, --events', 'monitor events.')
  .option('-l, --logs', 'trace control script logs.')
  .option('-v, --version', pkg.version, () => {
    console.log(pkg.version);
    process.exit(0);
  })
  .option('-V', '', () => {
    console.log(pkg.version);
    process.exit(0);
  })
  .parse(process.argv);

const url = program.url ? program.url : defaultUrl;

(async () => {
  try {
    let config, dirty;
    if (program.config) {
      config = require(path.relative(__dirname, path.resolve(program.config)));
      dirty = true;
    } else {
      config = await getCurrentConfig(url);
      if (program.all) {
        Object.keys(enableAllConfig).forEach( key => {
          if (!config[key]) {
            config[key] = true;
            dirty = true;
          }
        });
      }
      if (program.abbrev) {
        if (!config.useAbbreviatedMethodNames) {
          config.useAbbreviatedMethodNames = true;
          dirty = true;
        }
      }
    }
    if (program.actions) {
      if (!config.useApplication) {
        config.useApplication = true;
        dirty = true;
      }
    }
    if (program.printConfig) {
      print(config);
      process.exit(0);
    }

    if (dirty) {
      // console.log("##### configure");
      await bitwig(url, config);
    }
    if (program.report) {
      reportMethodsAndEvents(url);
    } else if (program.actions) {
      reportActions(url, config.abbrev);
    } else if (program.events) {
      monitorEvents(url);
    } else if (program.logs) {
      monitorLogs(url);
    } else {
      // console.log("##### do nothing");
    }
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
