#!/usr/bin/env node
//  bitwig-websocket-rpc
//   (c) 2019 Masaafumi Fujimaru
//    Released under the MIT license.
const path = require('path'),
      fs = require('fs'),
      { isAsyncFunction } = require('util').types,
      updateNotifier = require('update-notifier'),
      program = require('commander'),
      { BitwigClient } = require('..'),
      { installExtension, defaultExtensionDir } = require('../lib/extension-installer'),
      pkg = require('../package.json'),
      beautify = require('js-beautify'),
      DEFAULT_URL = 'ws://localhost:8887'

// check if a new version is available and print an update notification
const notifier = updateNotifier({ pkg })
if (notifier.update && notifier.update.latest !== pkg.version) {
  notifier.notify({
    defer: false,
    isGlobal: false
  })
}

let commandExecuted = false

program
  .description('Configuration and helper tools for bitwig-websocket-rpc.')
  .version(pkg.version)

program
  .command('install')
  .description('Install Bitwig Studio WebSockets RPC server extension.')
  .option('-e, --extension-dir <path>', 'Bitwig Studio Extension directory', defaultExtensionDir())
  .option('-a, --api <version>', 'Bitwig Studio Extension API version. version=8-11', '11')
  .action(_execCommand(installCommand))

/* eslint no-multi-spaces: 0 */
program
  .command('config')
  .description('Configure RPC modules.')
  .option('-u, --url <URL>',      'Bitwig Studio WebSockets URL.', DEFAULT_URL)
  .option('-p --pass <password>', 'password.')
  .option('-r, --reset',          'reset configuration to defaults.')
  .option('-f, --file <path>',    'config file(.js|.json) path. this option is ignored by -r option.')
  .option('-a, --all',            'enable all RPC methods and events. this option is ignored by -r or -f option.')
  .option('-b, --abbrev',         'enable abbreviated method and event name (experimental), this option is ignored by -r, -f or -a option.')
  .option('-r, --print',          'print present configurationn.')
  .action(_execCommand(configCommand))

program
  .command('report')
  .description('Report accessible RPC methods and evnets of current configuration as JSON.')
  .option('-u, --url <URL>',      'Bitwig Studio WebSockets URL.', DEFAULT_URL)
  .option('-p --pass <password>', 'password.')
  .option('-s, --summary',        'report total count of methods and events.')
  .action(_execCommand(reportCommand))

program
  .command('actions')
  .option('-u, --url <URL>',      'Bitwig Studio WebSockets URL', DEFAULT_URL)
  .option('-p --pass <password>', 'password.')
  .option('-c, --categorize',     'Group by category.')
  .description('Report result of Application#getActions() as JSON.')
  .action(_execCommand(actionsCommand))

program
  .command('events')
  .description('Monitor events.')
  .option('-u, --url <URL>',        'Bitwig Studio WebSockets URL.', DEFAULT_URL)
  .option('-p --pass <password>',   'password.')
  .option('-m, --module <modules>', 'filter events with specified modules(comma separated module names).')
  .option('-r, --reconnect',        'keep attempting to reconnect.')
  .action(_execCommand(eventsCommand))

program
  .command('logs')
  .description('Trace controller script logs.')
  .option('-u, --url <URL>',      'Bitwig Studio WebSockets URL.', DEFAULT_URL)
  .option('-p --pass <password>', 'password.')
  .option('-r, --reconnect',      'keep attempting to reconnect.')
  .action(_execCommand(logsCommand))

// error on unknown commands
program
  .on('command:*', function() {
    console.error('Invalid command: %s\nSee --help for a list of available commands.', program.args.join(' '))
    process.exit(1)
  })

program.parse(process.argv)

if (!commandExecuted) {
  console.error('no command given!\nSee --help for a list of available commands.')
  process.exit(1)
}

/**
 * install bitwig studio extension
 */
function installCommand(options) {
  try {
    const results = installExtension(options)
    results.forEach(f => console.info('file:', f))
    console.info('Installation completed successfully.')
  } catch (err) {
    console.error(err.message)
    if (err.code === 'EACCES') {
      console.error('Please close the Bitwig Studio.')
    }
    process.exit(1)
  }
}

/**
 * configure RPC modules
 */
async function configCommand(options) {
  let config, dirty
  const ws = new BitwigClient(options.url, {
    password: options.pass
  })
  await ws.connect()
  if (options.reset) {
    config = null
    dirty = true
  } else if (options.file) {
    _checkFile(options.file)
    config = _checkRequireObject(options.file)
    dirty = true
  } else {
    config = await ws.call('rpc.config')
    if (options.all) {
      Object.keys(config).forEach(key => {
        if (key.match(/^use[A-Z]/) && key !== 'useAbbreviatedMethodNames' && !config[key]) {
          config[key] = true
          dirty = true
        }
      })
    } else if (options.abbrev) {
      if (!config.useAbbreviatedMethodNames) {
        config.useAbbreviatedMethodNames = true
        dirty = true
      }
    }
  }
  if (dirty) {
    // ws.config(settings, merge, reconnect)
    config = await ws.config(config, false, true)
  }
  if (options.print) {
    _print(config)
  }
  ws.close()
}

/**
 * report methods & events
 */
async function reportCommand(options) {
  const ws = new BitwigClient(options.url, {
    password: options.pass
  })
  await ws.connect()
  const report = await ws.call('rpc.report')
  ws.close()
  if (!options.summary) {
    _print(report)
    return
  }
  const summary = new Map()
  report.methods.forEach(m => {
    const moduleName = m.method.split('.')[0]
    let result = summary.get(moduleName)
    if (!result) {
      result = {
        module: moduleName,
        numMethods: 0,
        numEvents: 0,
        numBankedEvents: 0
      }
      summary.set(moduleName, result)
    }
    result.numMethods++
  })
  report.events.forEach(e => {
    const moduleName = e.event.split('.')[0]
    let result = summary.get(moduleName)
    if (!result) {
      result = {
        module: moduleName,
        numMethods: 0,
        numEvents: 0,
        numBankedEvents: 0
      }
      summary.set(moduleName, result)
    }
    result.numEvents++
    if (e.bankDimension) {
      result.numBankedEvents += e.bankDimension.reduce((a, v) => a * v, 1)
    } else {
      result.numBankedEvents++
    }
  })
  const total = {
    module: 'total',
    numMethods: 0,
    numEvents: 0,
    numBankedEvents: 0
  }
  console.log(
    'module'.padEnd(32),
    'method'.padEnd(8),
    'event'.padEnd(8),
    'event * bankDimension')
  console.log(''.padEnd(80, '-'))
  summary.forEach(o => {
    console.log(
      o.module.padEnd(28),
      ('' + o.numMethods).padStart(8),
      ('' + o.numEvents).padStart(8),
      ('' + o.numBankedEvents).padStart(8))
    total.numMethods += o.numMethods
    total.numEvents += o.numEvents
    total.numBankedEvents += o.numBankedEvents
  })
  console.log(''.padEnd(80, '-'))
  console.log(
    'Total'.padEnd(28),
    ('' + total.numMethods).padStart(8),
    ('' + total.numEvents).padStart(8),
    ('' + total.numBankedEvents).padStart(8))
}

/**
 * report actions
 */
async function actionsCommand(options) {
  const ws = new BitwigClient(options.url, {
    password: options.pass
  })
  await ws.connect()
  let config = ws.call('rpc.config')
  if (!config.useApplication) {
    // ws.config(settings, merge, reconnect)
    config = await ws.config({
      useApplication: true
    }, true)
  }
  const method = config.useAbbreviatedMethodNames
    ? 'app.actions'
    : 'application.getActions'
  let actions = await ws.call(method)
  if (options.categorize) {
    actions = actions.reduce((categories, action) => {
      let category = categories.find(category => category.id === action.category.id)
      if (!category) {
        category = {
          id: action.category.id,
          name: action.category.name,
          actions: []
        }
        categories.push(category)
      }
      delete action.category
      category.actions.push(action)
      return categories
    }, [])
  }
  _print(actions)
  ws.close()
}

/**
 * monitor events
 */
async function eventsCommand(options) {
  const ws = new BitwigClient(options.url, {
    password: options.pass
  })
  const modules = options.module ? options.module.split(',') : undefined
  let first = true
  while (options.reconnect || first) {
    first = false
    try {
      await ws.connect(options.reconnect ? -1 : 0)
      const startTime = Date.now()
      const report = await ws.call('rpc.report')
      const events = report.events
        .filter(e => {
          const s = e.event
          if (s.startsWith('test.') || s.startsWith('rpc.')) {
            return false
          }
          if (!modules) {
            return true
          }
          return modules.some(m => s.startsWith(`${m}.`))
        }).map(e => e.event)
      events.forEach((e) => {
        ws.on(e, (params) => console.log(Date.now() - startTime, '|', e, '|', params))
      })
      await ws.subscribe(events, 50000)
      // infinite wait until close
      await ws.promise('close', true, 0)
    } catch (err) {
      if (!options.reconnect) {
        console.log(err)
        ws.close()
      }
    }
  }
}

/**
 * trace controller script logs
 */
async function logsCommand(options) {
  const ws = new BitwigClient(options.url, {
    password: options.pass
  })
  let first = true
  while (options.reconnect || first) {
    first = false
    try {
      await ws.connect(options.reconnect ? -1 : 0)
      ws.on('rpc.log', params => {
        console.log(params[0])
      })
      await ws.subscribe(['rpc.log'])
      // infinite wait until close
      await ws.promise('close', true, 0)
    } catch (err) {
      if (!options.reconnect) {
        console.log(err)
        ws.close()
      }
    }
  }
}

function _execCommand(func) {
  return function(options) {
    commandExecuted = true
    if (isAsyncFunction(func)) {
      func(options).catch((err) => {
        console.error(err)
        process.exit(1)
      })
    } else {
      try {
        func(options)
      } catch (err) {
        console.error(err)
        process.exit(1)
      }
    }
  }
}

function _checkFile(file) {
  if (!fs.existsSync(file)) {
    console.error(`error: no such file, "${file}"`)
    process.exit(1)
  }
  if (!fs.statSync(file).isFile()) {
    console.error(`error: no such file, "${file}"`)
    process.exit(1)
  }
}

function _checkRequireObject(file) {
  var obj
  try {
    obj = require(path.resolve(file))
  } catch (err) {
    console.info(err)
    process.exit(1)
  }
  if (typeof obj !== 'object') {
    console.error('error: config file should be json or export object')
    process.exit(1)
  }
  return obj
}

function _print(obj) {
  console.log(beautify(JSON.stringify(obj), { indent_size: 2 }))
}
